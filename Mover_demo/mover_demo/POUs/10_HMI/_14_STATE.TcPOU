<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="_14_STATE" Id="{c95d7638-51ff-4919-9f91-365eb2425efb}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM _14_STATE
(****************************************************************************)
//STATE PROGRAMM
//	- Control Buttons
//	- Status Anlage
//
//	05.09.2019/Dj
//
//	Version:
(****************************************************************************)
VAR
    fb_State        :   FB_State;       //Status der Maschine
	sStateDbg		: STRING;		// enState but in string format
		
	//Control Buttons
	_FB_btAUTO	: FB_BUTTON;
	_FB_btSTEP	: FB_BUTTON;
	_FB_btEND	: FB_BUTTON;
	_FB_btMANU	: FB_BUTTON;
	_FB_btINIT	: FB_BUTTON;
	_FB_btSTOP	: FB_BUTTON;
	_FB_btLEER	: FB_BUTTON;
	_FB_btQUIT	: FB_BUTTON;
	_FB_btSTART	: FB_BUTTON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//****************************************************************************
// 	CONTROL BUTTONS
//****************************************************************************
//	AUTO 
_FB_btAUTO(pbtIN := ADR(HMI.btArMain[0]),
           xINdis := (HMI.enState < enState.StateREADY),
           xINon := (HMI.enState = enState.StateAUTO),
           xINerr := FALSE);

//STEP
_FB_btSTEP(pbtIN := ADR(HMI.btArMain[1]),
           xINdis := (HMI.enState < enState.StateREADY),
           xINon := (HMI.enState = enState.StateSTEP),
           xINerr := FALSE);

//END
_FB_btEND(pbtIN := ADR(HMI.btArMain[2]),
          xINdis := (HMI.enState < enState.StateREADY),
          xINon := (HMI.enState = enState.StateEND),
          xINerr := FALSE);

//MANU
_FB_btMANU(pbtIN := ADR(HMI.btArMain[3]),
           xINdis := (HMI.enState > enState.StateSTEP) OR (HMI.enState = enState.StateALARM) OR (HMI.enState < enState.StateAIRon),
           xINon := (HMI.enState = enState.StateMANU),
           xINerr := FALSE);

//INIT
_FB_btINIT(pbtIN := ADR(HMI.btArMain[4]),
           xINdis := (HMI.enState < enState.StateENGIZED),
           xINon := (HMI.enState = enState.StateINIT),
           xINerr := FALSE);

//STOP
_FB_btSTOP(pbtIN := ADR(HMI.btArMain[5]),
           xINdis := (HMI.enState < enState.StateENGIZED),
           xINon := FALSE,
           xINerr := FALSE);

//LEERFAHREN
_FB_btLEER(pbtIN := ADR(HMI.btArMain[6]),
           xINdis := FALSE,
           xINon := FALSE,
           xINerr := FALSE);

//QUIT
_FB_btQUIT(pbtIN := ADR(HMI.btArMain[7]),
           xINdis := FALSE,
           xINon := FALSE,
           xINerr := HMI.xAlarm);

//START
_FB_btSTART(pbtIN := ADR(HMI.btArMain[9]),
           xINdis := HMI.enState < enState.StateREADY,
           xINon := HMI.btArMain[9].on,
           xINerr := FALSE);

//****************************************************************************
// 	STATE FB
//****************************************************************************
fb_State(xIN_AutoInit := FALSE,
         xIN_DoRef := FALSE,
         xIN_ENERGIE := TRUE,
         xIN_AIR := HMI.xAIRon,
         xIN_EINRICHTEN :=,
         xIN_AUTO := HMI.btArMain[0].rtrig,
         xIN_STEP := HMI.btArMain[1].rtrig,
         xIN_CYCLE := HMI.btArMain[2].rtrig,
         xIN_MANU := HMI.btArMain[3].rtrig,
         xIN_INIT := HMI.btArMain[4].rtrig,
         xIN_STOP := HMI.btArMain[5].rtrig,
         xIN_LEER := HMI.btArMain[6].rtrig,
         xIN_InitEND := (GVL._Process1.xOUT_InitDone OR NOT GVL._Process1.xIN_On) AND 
						(GVL._Process2.xOUT_InitDone OR NOT GVL._Process2.xIN_On) AND 
						(GVL._Process3.xOUT_InitDone OR NOT GVL._Process3.xIN_On) AND 
						(GVL._Process4.xOUT_InitDone OR NOT GVL._Process4.xIN_On) AND 
						(GVL._Process5.xOUT_InitDone OR NOT GVL._Process5.xIN_On) AND 
						(GVL._Process6.xOUT_InitDone OR NOT GVL._Process6.xIN_On) AND 
						(GVL._Process7.xOUT_InitDone OR NOT GVL._Process7.xIN_On) AND 
						(GVL._Process8.xOUT_InitDone OR NOT GVL._Process8.xIN_On) AND 
						(GVL._Process9.xOUT_InitDone OR NOT GVL._Process9.xIN_On) AND 
						(GVL._Process10.xOUT_InitDone OR NOT GVL._Process10.xIN_On) AND 
						(GVL._Process11.xOUT_InitDone OR NOT GVL._Process11.xIN_On) AND 
						(GVL._Process12.xOUT_InitDone OR NOT GVL._Process12.xIN_On) AND 
						(GVL._Process13.xOUT_InitDone OR NOT GVL._Process13.xIN_On) AND 
						(GVL._Process14.xOUT_InitDone OR NOT GVL._Process14.xIN_On) AND 
						(GVL._Process15.xOUT_InitDone OR NOT GVL._Process15.xIN_On) AND 
						(GVL._Process16.xOUT_InitDone OR NOT GVL._Process16.xIN_On) AND 
						(GVL._Process17.xOUT_InitDone OR NOT GVL._Process17.xIN_On) AND 
						(GVL._Process18.xOUT_InitDone OR NOT GVL._Process18.xIN_On),
         xIN_ALARM := (GVL._Process1.xOUT_AlarmST) AND
                      (GVL._Process1.xOUT_ErrFlag OR GVL._Process1.xOUT_Wait OR NOT GVL._Process1.xIN_On),
         xIN_LastDone := (GVL._Process1.xOUT_Done OR NOT GVL._Process1.xIN_On),
         xIN_WaitFBs := (GVL._Process1.xOUT_Wait OR NOT GVL._Process1.xIN_On),
         enINOUT_State := HMI.enState);

sStateDbg := TO_STRING(HMI.enState);
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{73d68fed-109d-48d3-8347-db09d26fc03c}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode  : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)

    i  : INT;
    ii : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO TO_INT(LinearAxis_e._max)-1 BY 1 DO
	FOR ii := 0 TO CONST.MAX_VECTOR_LIST-1 BY 1 DO
		HMI.movesName[i][ii] := TO_STRING(ii);
	END_FOR
END_FOR


// ST110
HMI.movesName[LinearAxis_e.ST110_01Y][0] := TO_STRING(ST110_PnpHorPos_e.GS);
HMI.movesName[LinearAxis_e.ST110_01Y][1] := TO_STRING(ST110_PnpHorPos_e.AS);

HMI.movesName[LinearAxis_e.ST110_02Z][0] := TO_STRING(ST110_PnpVerPos_e.UpEmpty);
HMI.movesName[LinearAxis_e.ST110_02Z][1] := TO_STRING(ST110_PnpVerPos_e.DownEmpty);
HMI.movesName[LinearAxis_e.ST110_02Z][2] := TO_STRING(ST110_PnpVerPos_e.UpFull);
HMI.movesName[LinearAxis_e.ST110_02Z][3] := TO_STRING(ST110_PnpVerPos_e.DownFullQuick);
HMI.movesName[LinearAxis_e.ST110_02Z][4] := TO_STRING(ST110_PnpVerPos_e.DownFullTorqueControl);

HMI.movesName[LinearAxis_e.ST110_03Z][0] := TO_STRING(ST110_PnpVerPos_e.UpEmpty);
HMI.movesName[LinearAxis_e.ST110_03Z][1] := TO_STRING(ST110_PnpVerPos_e.DownEmpty);
HMI.movesName[LinearAxis_e.ST110_03Z][2] := TO_STRING(ST110_PnpVerPos_e.UpFull);
HMI.movesName[LinearAxis_e.ST110_03Z][3] := TO_STRING(ST110_PnpVerPos_e.DownFullQuick);
HMI.movesName[LinearAxis_e.ST110_03Z][4] := TO_STRING(ST110_PnpVerPos_e.DownFullTorqueControl);

HMI.movesName[LinearAxis_e.ST110_04Z][0] := TO_STRING(ST110_PnpHorPos_e.GS);
HMI.movesName[LinearAxis_e.ST110_04Z][1] := TO_STRING(ST110_PnpHorPos_e.AS);

// ST115
HMI.movesName[LinearAxis_e.ST115_01Y][0] := TO_STRING(ST115_PnpHorPos_e.GS);
HMI.movesName[LinearAxis_e.ST115_01Y][1] := TO_STRING(ST115_PnpHorPos_e.AS);

HMI.movesName[LinearAxis_e.ST115_02Z][0] := TO_STRING(ST115_PnpVerPos_e.UpEmpty);
HMI.movesName[LinearAxis_e.ST115_02Z][1] := TO_STRING(ST115_PnpVerPos_e.DownEmpty);
HMI.movesName[LinearAxis_e.ST115_02Z][2] := TO_STRING(ST115_PnpVerPos_e.UpFull);
HMI.movesName[LinearAxis_e.ST115_02Z][3] := TO_STRING(ST115_PnpVerPos_e.DownFullQuick);
HMI.movesName[LinearAxis_e.ST115_02Z][4] := TO_STRING(ST115_PnpVerPos_e.DownFullTorqueControl);

HMI.movesName[LinearAxis_e.ST115_03Z][0] := TO_STRING(ST115_PnpVerPos_e.UpEmpty);
HMI.movesName[LinearAxis_e.ST115_03Z][1] := TO_STRING(ST115_PnpVerPos_e.DownEmpty);
HMI.movesName[LinearAxis_e.ST115_03Z][2] := TO_STRING(ST115_PnpVerPos_e.UpFull);
HMI.movesName[LinearAxis_e.ST115_03Z][3] := TO_STRING(ST115_PnpVerPos_e.DownFullQuick);
HMI.movesName[LinearAxis_e.ST115_03Z][4] := TO_STRING(ST115_PnpVerPos_e.DownFullTorqueControl);

HMI.movesName[LinearAxis_e.ST115_04Z][0] := TO_STRING(ST115_PnpHorPos_e.GS);
HMI.movesName[LinearAxis_e.ST115_04Z][1] := TO_STRING(ST115_PnpHorPos_e.AS);

// ST120
HMI.movesName[LinearAxis_e.ST120_01Y][0] := TO_STRING(ST120_PnpHorPos_e.GS);
HMI.movesName[LinearAxis_e.ST120_01Y][1] := TO_STRING(ST120_PnpHorPos_e.AS);

HMI.movesName[LinearAxis_e.ST120_02Z][0] := TO_STRING(ST120_PnpVerPos_e.UpEmpty);
HMI.movesName[LinearAxis_e.ST120_02Z][1] := TO_STRING(ST120_PnpVerPos_e.DownEmpty);
HMI.movesName[LinearAxis_e.ST120_02Z][2] := TO_STRING(ST120_PnpVerPos_e.UpFull);
HMI.movesName[LinearAxis_e.ST120_02Z][3] := TO_STRING(ST120_PnpVerPos_e.DownFullQuick);
HMI.movesName[LinearAxis_e.ST120_02Z][4] := TO_STRING(ST120_PnpVerPos_e.DownFullTorqueControl);

// ST125
HMI.movesName[LinearAxis_e.ST125_01Y][0] := TO_STRING(ST120_PnpHorPos_e.GS);
HMI.movesName[LinearAxis_e.ST125_01Y][1] := TO_STRING(ST120_PnpHorPos_e.AS);

HMI.movesName[LinearAxis_e.ST125_02Z][0] := TO_STRING(ST120_PnpVerPos_e.UpEmpty);
HMI.movesName[LinearAxis_e.ST125_02Z][1] := TO_STRING(ST120_PnpVerPos_e.DownEmpty);
HMI.movesName[LinearAxis_e.ST125_02Z][2] := TO_STRING(ST120_PnpVerPos_e.UpFull);
HMI.movesName[LinearAxis_e.ST125_02Z][3] := TO_STRING(ST120_PnpVerPos_e.DownFullQuick);
HMI.movesName[LinearAxis_e.ST125_02Z][4] := TO_STRING(ST120_PnpVerPos_e.DownFullTorqueControl);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>