<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="_10_HMI" Id="{e5cce500-3567-456b-b873-631e9b00989b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM _10_HMI
(****************************************************************************)
//HMI PROGRAMM
//	- HMI RELEVANTE Signale und Funktionen
//
//	04.09.2019/Dj
//
//	Version:
(****************************************************************************)

VAR
    //Startup HMI-Panel
    TON_startup     : TON;
    fb_startProcess : NT_StartProcess;

    //Reset Counter
    TON_ResetCounter : TON; // Reset Temparary Counter

    //Ticker
    TICK6M      : TP; // Ticker for Operating Hours
    TICK6M_     : TP;
    x_TICK6M    : BOOL;
    BLINK_500   : TP; // Ticker for Operating Hours
    BLINK_500_  : TP;
    x_BLINK_500 : BOOL;

    BLINK_100   : TP; // Ticker for Operating Hours
    BLINK_100_  : TP;
    x_BLINK_100 : BOOL;

    //Cycle Time
    _FB_SystemTime : GETSYSTEMTIME;
    dw_ActTime     : DWORD;

    //Lampen
    _FB_LAMPE : FB_LampeBNI007F;

    // keba keys
    _key_keba_1    : FB_Keba_key;
    _key_keba_2    : FB_Keba_key;
    _key_press_tof : TOF;

    // pers variable save
    _fb_bp_pers_save      : FB_BUTTON;
    fbWritePersistentData : WritePersistentData;

    //Alarmlog
    iCount6h : INT;    //6h Ticker (für AlarmLOG)
    rtNOTAUS : R_TRIG; //Trigger 6h	

    //Divers
    idx        : INT; //Index
    _12_HMI_BT : FB_HMI_BT;

    iJogValueIndex : INT := 4; // index used to know current jog velocty from lookup table
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//***********************************************************************************************)
//Startup Terminal
//***********************************************************************************************)
TON_Startup(IN := TRUE, PT := T#5S);
fb_startProcess(NETID     := '',
                PATHSTR   := 'C:\Program Files\SpiderControl\MicroBrowser\MicroBrowser_XP.exe',
                DIRNAME   := 'C:\Users\Administrator\AppData\Roaming\SpiderControl\Microbrowser',
                COMNDLINE :=,
                START     := TON_Startup.Q,
                TMOUT     := T#10S);

//***********************************************************************************************)
//Parameter ÜBERPRÜFEN
//***********************************************************************************************)
_11_PAR_CHK();

//***********************************************************************************************)
// HMI BP
//***********************************************************************************************)
_12_HMI_BT();
_key_keba_1(s_in :=); // s_in is set by the keba panel 1 (ST105 - ST155)
_key_keba_2(s_in :=); // s_in is set by the keba panel 1 (ST160 - ST185)

IF (_key_keba_1.F12.press OR _key_keba_2.F12.press) AND (iJogValueIndex > 0) AND NOT _key_press_tof.Q THEN
    iJogValueIndex := iJogValueIndex - 1;

ELSIF (_key_keba_1.F11.press OR _key_keba_2.F11.press) AND (iJogValueIndex < 7) AND NOT _key_press_tof.Q
    THEN
    iJogValueIndex := iJogValueIndex + 1;
END_IF

AXIS.rJogVelo_pc := AXIS.arrJogValues[iJogValueIndex];

// this needs to be placed below the rJogVelo_pc management
_key_press_tof(IN := (_key_keba_1.F11.press OR
                     _key_keba_2.F11.press OR
                     _key_keba_1.F12.press OR
                     _key_keba_2.F12.press) AND
                     NOT _key_press_tof.Q,
               PT := DINT_TO_TIME(500 *
                                  TO_DINT(_key_keba_1.F11.press OR // set time to 0
                                          _key_keba_2.F11.press OR // when no key is
                                          _key_keba_1.F12.press OR // pressed
                                          _key_keba_2.F12.press)));

_fb_bp_pers_save(pbtIN  := ADR(HMI.btWritePers),
                 xINdis := FALSE,
                 xINon  := fbWritePersistentData.BUSY,
                 xINerr := fbWritePersistentData.ERR);

fbWritePersistentData(NETID := '',
                      PORT  := 851,
                      START := HMI.btWritePers.rtrig,
                      TMOUT := T#1S);

//***********************************************************************************************)
//State
//***********************************************************************************************)
_14_STATE();

//***********************************************************************************************)
//Lampen
//***********************************************************************************************)
_FB_LAMPE(enIN_State      := HMI.enState,
          xIN_AlarmAktiv  := GVL.st105_aut.xOUT_AlarmST,
          xIN_SafetyError := _02_Safety.xOUT_SafetyError,
          xIN_NotAus      := _02_Safety.xOUT_NotAusBetaetigt,
          xIN_Mel1        :=,
          xIN_Mel2        :=,
          xIN_Mel3        :=,
          xIN_Mel4        :=,
          xIN_Mel5        :=,
          xIN_Mel6        :=,
          xIN_Mel7        :=,
          tIN_Meldungen   := T#1000MS,
          tIN_Impuls      := T#500ms,
          xOUT_ErrFlag    =>);

//BALLUFF LAMPE
//OUT.QW194A3:=_FB_LAMPE.wOUT_Lampe;
//OUT.QW194A6:=_FB_LAMPE.wOUT_Lampe;
//OUT.Q194A3_SycStart:=_FB_LAMPE.xOUT_SyncStart;
//OUT.Q194A6_SycStart:=_FB_LAMPE.xOUT_SyncStart;
//OUT.Q194A3_SycImp:=_FB_LAMPE.xOUT_SyncImp;
//OUT.Q194A6_SycImp:=_FB_LAMPE.xOUT_SyncImp;
//LAMPE ENERGIE EIN 
(*
OUT.Q000_LAMP_NRJ:= _10_HMI.x_BLINK_500 AND 
						//Notaus Schalter
						_02_Safety.bArIN_Input[1].4 AND
						_02_Safety.bArIN_Input[2].0 AND	
						_02_Safety.bArIN_Input[2].2 AND
						_02_Safety.bArIN_Input[2].4 AND
						_02_Safety.bArIN_Input[2].6 
					OR (HMI.enState>enState.StateOFF);
					*)

OUT.Q_CPX9_1_EnergiEin_led   := _02_SAFETY.xOUT_ESout;
OUT.Q_CPX9_1_Process_running := HMI.enState > enState.StateSTOP OR HMI.enState = enState.StateREADY;
OUT.Q_CPX9_1_Process_stopped := HMI.enState <= enState.StateSTOP;

(***********************************************************************************************)
(* HMI Alarme*)
(***********************************************************************************************)
FOR idx := 1 TO 100 BY 1 DO
    HMI.xArAlarmHMI[idx] := HMI.strArALARM[idx].xAlarmOUT;
END_FOR

FOR idx := 1 TO 100 BY 1 DO
    HMI.xArAlarmHMI[idx + 5000] := HMI.strArMSG[idx].xAlarmOUT;
END_FOR

(***********************************************************************************************)
(* Cycle Time *)
(***********************************************************************************************)
_FB_SystemTime(timeLoDW => dw_ActTime, timeHiDW =>);
dw_ActTime := dw_ActTime AND 16#FFFF0000;

IF HMI.btArMain[8].rtrig THEN
    HMI.PieceDoneTmp := 0;
END_IF

(***********************************************************************************************)
(* Operating hours  *)
(***********************************************************************************************)
(* 0.5' Blinker *)
BLINK_500(IN := NOT BLINK_500_.Q, PT := T#500MS, Q => x_BLINK_500);
BLINK_500_(IN := NOT BLINK_500.Q, PT := T#500MS);
(* 0.1' Blinker *)
BLINK_100(IN := NOT BLINK_100_.Q, PT := T#100MS, Q => x_BLINK_100);
BLINK_100_(IN := NOT BLINK_100.Q, PT := T#100MS);
(* 6' Ticker *)
TICK6M(IN := NOT TICK6M_.Q, PT := T#1MS, Q => x_TICK6M);
TICK6M_(IN := NOT TICK6M.Q, PT := t#6m);

(* Operating hours *)
IF TICK6M.Q THEN
    (* AUTO *)
    IF (HMI.enState = enState.StateAUTO) THEN
        PERS.udiCount6Mauto := PERS.udiCount6Mauto + 1;
        IF (PERS.udiCount6Mauto >= 10) THEN
            PERS.udiCount6Mauto := 0;
            PERS.udiCountHauto  := PERS.udiCountHauto + 1;
            IF (PERS.udiCountHauto < 0) THEN
                PERS.udiCountHauto := 0;
            END_IF;
        END_IF;
    END_IF;

    (* TOTAL *)
    PERS.udiCount6Mon := PERS.udiCount6Mon + 1;
    IF (PERS.udiCount6Mon >= 10) THEN
        PERS.udiCount6Mon := 0;
        PERS.udiCountHon  := PERS.udiCountHon + 1;
        IF (PERS.udiCountHon < 0) THEN
            PERS.udiCountHon := 0;
        END_IF;
    END_IF;

    //6h
    iCount6h := iCount6h + 1;
END_IF;

//Alarmlog schreiben nach 6h oder bei NOT-AUS
//rtNOTAUS(CLK:=_02_SAFETY.xOUT_ESout);
IF (iCount6h >= 60) OR rtNOTAUS.Q THEN
    iCount6h        := 0;
    HMI.xWriteALlog := NOT HMI.xWriteALlog;
END_IF;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>