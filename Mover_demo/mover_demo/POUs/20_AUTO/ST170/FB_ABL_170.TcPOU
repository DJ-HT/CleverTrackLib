<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_170" Id="{4c8bbe5c-1d89-4c34-a306-674d1d791a73}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_170
(****************************************************************************************)
(*	TITEL				laden kristall- Modul	    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    Mover       : REFERENCE TO FB_Mover;

END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;         // Error Flag 
    xOUT_Busy     : BOOL;         // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;         // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;         // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;         // Timeout FB 
    xOUT_InitDone : BOOL;         // initialisierung fertig
    xOUT_Wait     : BOOL;         // Wartet auf Bedingung
    iOUT_Step     : ST170_RFID_e; // Aktueller Schritt 
    sOUT_Step     : STRING;       // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;         // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion, express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move
END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST170_RFID_e; // Merker letzter Schritt 
    iPreStep  : ST170_RFID_e; // Schritt zurück nach Alarm 
    iAktStep  : ST170_RFID_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)
    fb_PnpVerAxis    : FB_LinearMotionMan;
    simu_axis170_01Z : FB_Simu_AxisLM_V1_1;
    fb_axis170_01Z   : FB_AxisLM_V1_1;

    (* Spezial *)
	xRFID_Result_OK : BOOL;

END_VAR
VAR CONSTANT
    RFID_SIMULATION : BOOL := FALSE; // Set to TRUE to simulate this part of the program
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST170_RFID_e.RESET;
    iOUT_Step := ST170_RFID_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
fb_PnpVerAxis(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST170_01Z],
              xIN_Init        := enIN_State = enState.StateINIT,
              xIN_Reset       := xIN_Reset,
              lrIN_CurrPos    := fb_axis170_01Z.rOUT_ActPos,
              lrIN_Delta_mm   := 0.5,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST170_PnpVerPos_e._max);

simu_axis170_01Z(xIN_Enable          := RFID_SIMULATION AND CONST.USE_SIMULATION,
                 bIN_AxisCntr        := fb_axis170_01Z.bOUT_AxisCntr,
                 wIN_AxisState       := ST170_Axis.axis170_01Z.wState,
                 udiIN_HomingTime_ms := 2000,
                 pIN_axisSimu        := ADR(SIMU.axis_ref[Axis_e.ST170_01Z]),
                 pIN_axisHW          := ADR(ST170_Axis.axis170_01Z.axis),
                 rIN_PosActual       := ST170_Axis.axis170_01Z.rActPos,
                 rIN_PosMax          := ST170_Axis.const170_01Z.POS_MAX,
                 rIN_PosMin          := ST170_Axis.const170_01Z.POS_MIN,
                 rIN_PixMax          := 80,
                 rIN_PixMin          := 0);

fb_axis170_01Z(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis[Axis_e.ST170_01Z]),
               xIN_DisButtons   :=,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE,
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST170_Axis.const170_01Z.POS_MIN,
               rIN_POSMAX       := ST170_Axis.const170_01Z.POS_MAX,
               rIN_VELOMAX      := ST170_Axis.const170_01Z.VELO_MAX,
               rIN_VELOMANU     := ST170_Axis.const170_01Z.VELO_MANU,
               rIN_VELOOPEN     := ST170_Axis.const170_01Z.POS_MAX / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      := fb_PnpVerAxis.xOUT_Execute,
               xIN_Relative     :=,
               xIN_STOP         :=,
               xIN_OFF          :=,
               rIN_Position     := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrJerk),
               rIN_PosManu      :=
               TO_REAL(_20_AUTO.recipe
                           .linearAxis[LinearAxis_e.ST170_01Z].movesList[AXIS.bTeachPos[Axis_e.ST170_01Z]].lrPosition),
               rIN_VeloJogManu := TO_REAL(Axis.rJogVelo_pc),
               xIN_Home        := ST170_RFID_e.Init_vertical_homing = iOUT_Step,
               xIN_Reset       := (ST170_RFID_e.RESET = iOUT_Step) OR xIN_Reset,
               wAxisState      := simu_axis170_01Z.wOUT_AxisState,
               bOUT_AxisCntr   => ST170_Axis.axis170_01Z.bCtrlHi,
               rOUT_ActPos     => ST170_Axis.axis170_01Z.rActPos,
               axisIN_REF      := simu_axis170_01Z.pOUT_axisRef^);

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0) OR (ST170_RFID_e.ERROR = iOUT_Step);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST170_RFID_e.READY) AND (iOUT_Step < ST170_RFID_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST170_RFID_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST170_RFID_e.READY) OR (iOUT_Step = ST170_RFID_e.waitOnMover);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST170_RFID_e.READY) OR (iOUT_Step = ST170_RFID_e.waitOnMover);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST170_RFID_e.DONE) OR
             (iOUT_Step = ST170_RFID_e.READY) OR
             (iOUT_Step = ST170_RFID_e.START) OR
             (iOUT_Step = ST170_RFID_e.waitOnMover) OR
             (iOUT_Step = ST170_RFID_e.SYNC_MOVER_LEAVE);

xOUT_MoverFree := NOT (iOUT_Step >= ST170_RFID_e.MOVER_NEEDED_OP AND iOUT_Step < ST170_RFID_e.MOVER_FREE_OP) AND
                  (iOUT_Step >= ST170_RFID_e.READY) AND
                  (iOUT_Step < ST170_RFID_e.ERROR);

iOUT_ProcessCompletion := F_GetPercent_2(iAktStep,
                                         iAktStep,
                                         iAktStep,
                                         ST170_RFID_e.vertical_up,
                                         ST170_RFID_e.SYNC_MOVER_LEAVE);

OUT.Q026_ST170_rfid_start_links :=
    _20_AUTO.recipe.st170.Use_element_left AND
    (ST170_RFID_e.RFID_start = iOUT_Step) AND
    NOT (RFID_SIMULATION AND CONST.USE_SIMULATION);

OUT.Q027_ST170_rfid_start_rechts :=
    _20_AUTO.recipe.st170.Use_element_right AND
    (ST170_RFID_e.RFID_start = iOUT_Step) AND
    NOT (RFID_SIMULATION AND CONST.USE_SIMULATION);

OUT.Q040_ST170_RFID_Links_Type_Bit_0  := _20_AUTO.recipe.st170.RFID_Type.0;
OUT.Q041_ST170_RFID_Links_Type_Bit_1  := _20_AUTO.recipe.st170.RFID_Type.1;
OUT.Q042_ST170_RFID_Links_Type_Bit_2  := _20_AUTO.recipe.st170.RFID_Type.2;
OUT.Q043_ST170_RFID_Rechts_Type_Bit_0 := _20_AUTO.recipe.st170.RFID_Type.0;
OUT.Q044_ST170_RFID_Rechts_Type_Bit_1 := _20_AUTO.recipe.st170.RFID_Type.1;
OUT.Q045_ST170_RFID_Rechts_Type_Bit_2 := _20_AUTO.recipe.st170.RFID_Type.2;

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST170_RFID_e.RESET;
    iOUT_Step := ST170_RFID_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

IF 0 = bOUT_Error THEN
    IF fb_axis170_01Z.xOUT_ErrFlag THEN
        bOUT_Error := 11;
    END_IF
ELSIF iOUT_Step < ST170_RFID_e.ERROR THEN
    iOUT_Step := ST170_RFID_e.ERROR;
END_IF

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST170_RFID_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST170_RFID_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST170_RFID_e.INIT;
    END_IF;

(***** INIT *****)
ST170_RFID_e.INIT: (* Grundstellung ? *)
    IF fb_axis170_01Z.xOUT_HOMED THEN
        iOUT_Step := ST170_RFID_e.Init_vertical_down;
    ELSE
        iOUT_Step := ST170_RFID_e.Init_vertical_homing;
    END_IF

ST170_RFID_e.Init_vertical_homing:
    IF fb_axis170_01Z.xOUT_HOMED THEN
        iOUT_Step := ST170_RFID_e.Init_vertical_down;
    END_IF

ST170_RFID_e.Init_vertical_down:
    IF fb_PnpVerAxis.MoveTo(ST170_PnpVerPos_e.gs_down).xOUT_InPos THEN
        iOUT_Step := ST170_RFID_e.READY;
    END_IF

(***** READY / INIT DONE *****)
ST170_RFID_e.READY:   (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST170_RFID_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST170_RFID_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step       := ST170_RFID_e.waitOnMover;
        xRFID_Result_OK := FALSE;
    END_IF;

ST170_RFID_e.waitOnMover: (*  *)
    IF xIN_NextStep AND __ISVALIDREF(Mover) THEN
        IF (Mover.GetLastStationDone() >= 170) THEN
            iOUT_Step := ST170_RFID_e.SYNC_MOVER_LEAVE;
        ELSIF Mover.GetLastStationDone() < INT#110 THEN
            iOUT_Step := ST170_RFID_e.SYNC_MOVER_LEAVE;
        ELSE
            iOUT_Step := ST170_RFID_e.vertical_up;
        END_IF
    END_IF;

ST170_RFID_e.vertical_up:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST170_PnpVerPos_e.as_up).xOUT_InPos THEN
        iOUT_Step := ST170_RFID_e.RFID_start;
    END_IF

ST170_RFID_e.RFID_start:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st170.Use_element_left OR NOT IN.I030_rfid_test_link_out1_170_20) AND
       (NOT _20_AUTO.recipe.st170.Use_element_right OR NOT IN.I033_rfid_test_link_out1_170_21) THEN
        iOUT_Step := ST170_RFID_e.RFID_wait_on_result;

        IF __ISVALIDREF(Mover) AND_THEN NOT Mover.SetLastStation(-170) THEN
            ASSERT(0);
        END_IF
    END_IF

ST170_RFID_e.RFID_wait_on_result:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st170.Use_element_left OR IN.I030_rfid_test_link_out1_170_20) AND
       (NOT _20_AUTO.recipe.st170.Use_element_right OR IN.I033_rfid_test_link_out1_170_21) THEN

        xRFID_Result_OK := (NOT _20_AUTO.recipe.st170.Use_element_left OR
                           (IN.I031_rfid_test_link_out2_170_20 AND NOT IN.I032_rfid_test_link_out3_170_20)) AND
                           (NOT _20_AUTO.recipe.st170.Use_element_right OR
                           (IN.I034_rfid_test_link_out2_170_21 AND NOT IN.I035_rfid_test_link_out3_170_21));

        IF xRFID_Result_OK THEN
            iOUT_Step := ST170_RFID_e.vertical_down;
        ELSE
            iPreStep   := ST170_RFID_e.vertical_down;
            bOUT_Error := 1; // shold not be in error
        END_IF

    END_IF

ST170_RFID_e.vertical_down:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST170_PnpVerPos_e.gs_down).xOUT_InPos THEN
        iOUT_Step := ST170_RFID_e.SYNC_MOVER_LEAVE;

        IF __ISVALIDREF(Mover) AND NOT xRFID_Result_OK THEN
            IF NOT Mover.SetLastStation(-170) THEN
                ASSERT(0);
            END_IF
        ELSIF __ISVALIDREF(Mover) AND xRFID_Result_OK THEN
            IF NOT Mover.SetLastStation(170) THEN
                ASSERT(0);
            END_IF
        END_IF
    END_IF

ST170_RFID_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST170_RFID_e.DONE;
    END_IF

(***** DONE *****)
ST170_RFID_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST170_RFID_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST170_RFID_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST170_RFID_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST170_RFID_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>