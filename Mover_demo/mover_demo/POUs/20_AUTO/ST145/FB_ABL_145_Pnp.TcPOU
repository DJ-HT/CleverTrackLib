<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_145_Pnp" Id="{a4852b5a-96d0-4be7-ad5d-45195f08884b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_145_Pnp
(****************************************************************************************)
(*	TITEL				laden kristall- Modul	    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    Mover              : REFERENCE TO FB_Mover;
    xIN_PceReadyToPick : BOOL; // the piece(s) is/are ready to picked
    xIN_HorAxisFree    : BOOL; // TRUE when the vertical is up enough
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;        // Error Flag 
    xOUT_Busy     : BOOL;        // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;        // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;        // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;        // Timeout FB 
    xOUT_InitDone : BOOL;        // initialisierung fertig
    xOUT_Wait     : BOOL;        // Wartet auf Bedingung
    iOUT_Step     : ST145_Pnp_e; // Aktueller Schritt 
    sOUT_Step     : STRING;      // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;        // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion, express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move
    xOUT_PickPiece         : BOOL; // Set to true when a piece is picked

END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST145_Pnp_e; // Merker letzter Schritt 
    iPreStep  : ST145_Pnp_e; // Schritt zurück nach Alarm 
    iAktStep  : ST145_Pnp_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)

    (* Spezial *)
    fb_axis145_01Y : FB_AxisLM_V1_1;
    fb_axis145_02Z : FB_AxisLM_V1_1;

    fb_PnpHorAxis : FB_LinearMotionMan;
    fb_PnpVerAxis : FB_LinearMotionMan;

    fb_simu_axis145_01Y : FB_Simu_AxisLM_V1_1;
    fb_simu_axis145_02Z : FB_Simu_AxisLM_V1_1;

    fb_vakumGriperLeft    : FB_ZylMo2El_V2_1;
    fb_vakumGriperRight   : FB_ZylMo2El_V2_1;
    simu_vacumGriperLeft  : FB_Simu_Zyl2Pos;
    simu_vacumGriperRight : FB_Simu_Zyl2Pos;

END_VAR
VAR CONSTANT
    PNP_SIMULATION : BOOL := FALSE; // Set to TRUE to simulate this part of the program
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST145_Pnp_e.RESET;
    iOUT_Step := ST145_Pnp_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
fb_PnpHorAxis(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST145_01Y],
              xIN_Init        := enIN_State = enState.StateINIT,
              xIN_Reset       := xIN_Reset,
              lrIN_CurrPos    := fb_axis145_01Y.rOUT_ActPos,
              lrIN_Delta_mm   := 0.5,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST145_PnpHorPos_e._max);

fb_simu_axis145_01Y(xIN_Enable          := PNP_SIMULATION AND CONST.USE_SIMULATION,
                    bIN_AxisCntr        := fb_axis145_01Y.bOUT_AxisCntr,
                    wIN_AxisState       := ST145_Axis.axis145_01Y.wState,
                    udiIN_HomingTime_ms := 2000,
                    pIN_axisSimu        := ADR(SIMU.axis_ref[Axis_e.ST145_01Y]),
                    pIN_axisHW          := ADR(ST145_Axis.axis145_01Y.axis),
                    rIN_PosActual       := fb_axis145_01Y.rOUT_ActPos,
                    rIN_PosMax          := ST145_Axis.const145_01Y.POS_MAX,
                    rIN_PosMin          := ST145_Axis.const145_01Y.POS_MIN,
                    rIN_PixMax          := 100,
                    rIN_PixMin          := 0);

fb_axis145_01Y(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis[Axis_e.ST145_01Y]),
               xIN_DisButtons   :=,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE, (*TODO*)
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST145_Axis.const145_01Y.POS_MIN,
               rIN_POSMAX       := ST145_Axis.const145_01Y.POS_MAX,
               rIN_VELOMAX      := ST145_Axis.const145_01Y.VELO_MAX,
               rIN_VELOMANU     := ST145_Axis.const145_01Y.VELO_MANU,
               rIN_VELOOPEN     := ST145_Axis.const145_01Y.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      := fb_PnpHorAxis.xOUT_Execute,
               xIN_Home         := ST145_Pnp_e.Init_HomeHorizontals = iAktStep,
               xIN_Relative     :=,
               rIN_Position     := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrJerk),
               rIN_PosManu      :=
               TO_REAL(_20_AUTO.recipe
                           .linearAxis[LinearAxis_e.ST145_01Y].movesList[AXIS.bTeachPos[Axis_e.ST145_01Y]].lrPosition),
               rIN_VeloJogManu := TO_REAL(Axis.rJogVelo_pc),
               xIN_Reset       := (ST145_Pnp_e.RESET = iAktStep) OR xIN_Reset,
               // The simu fb gives the hardware state when we are not in simu
               wAxisState    := fb_simu_axis145_01Y.wOUT_AxisState,
               rOUT_ActPos   => st145_axis.axis145_01Y.rActPos,
               bOUT_AxisCntr => ST145_Axis.axis145_01Y.bCtrlHi,
               axisIN_REF    := fb_simu_axis145_01Y.pOUT_axisRef^);

fb_PnpVerAxis(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST145_02Z],
              xIN_Init        := enIN_State = enState.StateINIT,
              xIN_Reset       := xIN_Reset,
              lrIN_CurrPos    := fb_axis145_02Z.rOUT_ActPos,
              lrIN_Delta_mm   := 1.0,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST145_PnpVerPos_e._max);

fb_simu_axis145_02Z(xIN_Enable          := PNP_SIMULATION AND CONST.USE_SIMULATION,
                    bIN_AxisCntr        := fb_axis145_02Z.bOUT_AxisCntr,
                    wIN_AxisState       := ST145_Axis.axis145_02Z.wState,
                    udiIN_HomingTime_ms := 2000,
                    pIN_axisSimu        := ADR(SIMU.axis_ref[Axis_e.ST145_02Z]),
                    pIN_axisHW          := ADR(ST145_Axis.axis145_02Z.axis),
                    rIN_PosActual       := fb_axis145_02Z.rOUT_ActPos,
                    rIN_PosMax          := ST145_Axis.const145_02Z.POS_MAX,
                    rIN_PosMin          := ST145_Axis.const145_02Z.POS_MIN,
                    rIN_PixMax          := 100,
                    rIN_PixMin          := 0);

fb_axis145_02Z(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis[Axis_e.ST145_02Z]),
               xIN_DisButtons   :=,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE, (*TODO*)
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST145_Axis.const145_02Z.POS_MIN,
               rIN_POSMAX       := ST145_Axis.const145_02Z.POS_MAX,
               rIN_VELOMAX      := ST145_Axis.const145_02Z.VELO_MAX,
               rIN_VELOMANU     := ST145_Axis.const145_02Z.VELO_MANU,
               rIN_VELOOPEN     := ST145_Axis.const145_02Z.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      := fb_PnpVerAxis.xOUT_Execute,
               xIN_Home         := ST145_Pnp_e.Init_HomeVerticals = iAktStep,
               xIN_Relative     :=,
               rIN_Position     := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrJerk),
               rIN_PosManu      :=
               TO_REAL(_20_AUTO.recipe
                           .linearAxis[LinearAxis_e.ST145_02Z].movesList[AXIS.bTeachPos[Axis_e.ST145_02Z]].lrPosition),
               rIN_VeloJogManu := TO_REAL(Axis.rJogVelo_pc),
               xIN_Reset       := (ST145_Pnp_e.RESET = iAktStep) OR xIN_Reset,
               // The simu fb gives the hardware state when we are not in simu
               wAxisState    := fb_simu_axis145_02Z.wOUT_AxisState,
               rOUT_ActPos   => st145_axis.axis145_02Z.rActPos,
               bOUT_AxisCntr => ST145_Axis.axis145_02Z.bCtrlHi,
               axisIN_REF    := fb_simu_axis145_02Z.pOUT_axisRef^);

//////////////////////////////////
fb_vakumGriperLeft(xIN_Reset    := xIN_Reset OR (ST145_Pnp_e.RESET = iOUT_Step),
                   xIN_Quit     := xIN_Quit,
                   xIN_Manu     := enState.StateMANU = enIN_State,
                   pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST145][1]),
                   xIN_GS       := simu_vacumGriperLeft.xOUT_inGS,
                   xIN_AS       := simu_vacumGriperLeft.xOUT_inAS,
                   xIN_FREE     := TRUE,
                   xINtoGS      := ST145_Pnp_e.Vacum_off = iOUT_Step,
                   xINtoAS      := _20_AUTO.recipe.st145.xUseVerLeft AND ST145_Pnp_e.Vacum_on = iOUT_Step,
                   tIN_ErrAS    := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                    [ST145_Cylinders_e.VakuumgreiferLinks].toAS_alarm_time),
                   tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                 [ST145_Cylinders_e.VakuumgreiferLinks].toGS_alarm_time),
                   tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                  [ST145_Cylinders_e.VakuumgreiferLinks].toAS_wait_time),
                   tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                  [ST145_Cylinders_e.VakuumgreiferLinks].toGS_wait_time));

simu_vacumGriperLeft(xIN_Enable := PNP_SIMULATION AND CONST.USE_SIMULATION,
                     xIN_inGS   := NOT IO_BOX.I1600_ST145_vakum_teil_in_greiffer_left,
                     xIN_inAS   := IO_BOX.I1600_ST145_vakum_teil_in_greiffer_left,
                     xIN_valve  := fb_vakumGriperLeft.xOUT_VALVE,
                     tIN_GS_ms  := 0,    //ms
                     tIN_AS_ms  := 200); //ms

fb_vakumGriperRight(xIN_Reset    := xIN_Reset OR (ST145_Pnp_e.RESET = iOUT_Step),
                    xIN_Quit     := xIN_Quit,
                    xIN_Manu     := enState.StateMANU = enIN_State,
                    pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST145][2]),
                    xIN_GS       := simu_vacumGriperRight.xOUT_inGS,
                    xIN_AS       := simu_vacumGriperRight.xOUT_inAS,
                    xIN_FREE     := TRUE,
                    xINtoGS      := ST145_Pnp_e.Vacum_off = iOUT_Step,
                    xINtoAS      := _20_AUTO.recipe.st145.xUseVerRight AND ST145_Pnp_e.Vacum_on = iOUT_Step,
                    tIN_ErrAS    := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                     [ST145_Cylinders_e.VakuumgreiferRechts].toAS_alarm_time),
                    tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                  [ST145_Cylinders_e.VakuumgreiferRechts].toGS_alarm_time),
                    tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                   [ST145_Cylinders_e.VakuumgreiferRechts].toAS_wait_time),
                    tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST145]
                                                   [ST145_Cylinders_e.VakuumgreiferRechts].toGS_wait_time));

simu_vacumGriperRight(xIN_Enable := PNP_SIMULATION AND CONST.USE_SIMULATION,
                      xIN_inGS   := NOT IO_BOX.I1601_ST145_vakum_teil_in_greiffer_right,
                      xIN_inAS   := IO_BOX.I1601_ST145_vakum_teil_in_greiffer_right,
                      xIN_valve  := fb_vakumGriperRight.xOUT_VALVE,
                      tIN_GS_ms  := 0,    //ms
                      tIN_AS_ms  := 200); //ms

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0) OR (ST145_Pnp_e.ERROR = iOUT_Step);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST145_Pnp_e.READY) AND (iOUT_Step < ST145_Pnp_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST145_Pnp_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST145_Pnp_e.READY) OR (iOUT_Step = ST145_Pnp_e.waitOnMover);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST145_Pnp_e.READY) OR (iOUT_Step = ST145_Pnp_e.waitOnMover);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST145_Pnp_e.DONE) OR
             (iOUT_Step = ST145_Pnp_e.READY) OR
             (iOUT_Step = ST145_Pnp_e.START) OR
             (iOUT_Step = ST145_Pnp_e.waitOnMover) OR
             (iOUT_Step = ST145_Pnp_e.SYNC_MOVER_LEAVE) OR
             (iOUT_Step = ST145_Pnp_e.PnP_WaitOnFeeder);

xOUT_MoverFree := iOUT_Step >= ST145_Pnp_e.MOVER_FREE_OP AND iOUT_Step < ST145_Pnp_e.MOVER_NEEDED_OP;

iOUT_ProcessCompletion := F_GetPercent_2(iAktStep,
                                         ST145_Pnp_e.Pnp_Hor_ToRotTablePos,
                                         ST145_Pnp_e.Pnp_Hor_ToTrackPos,
                                         ST145_Pnp_e.Pnp_Ver_ShuttleDown,
                                         ST145_Pnp_e.SYNC_MOVER_LEAVE);

xOUT_PickPiece := iOUT_Step = ST145_Pnp_e.Vacum_on; // the feeder needs to move only when 
// the pnp is outside the feeder

// TODO Valve should not be set when we are in simulation !
IO_BOX.Q0200_14_ST145_vakum_greifer_links :=
    fb_vakumGriperLeft.xOUT_VALVE AND NOT (PNP_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q0201_14_ST145_vakum_greifer_rechts :=
    fb_vakumGriperRight.xOUT_VALVE AND NOT (PNP_SIMULATION AND CONST.USE_SIMULATION);

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST145_Pnp_e.RESET;
    iOUT_Step := ST145_Pnp_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

IF 0 = bOUT_Error THEN
    IF fb_axis145_01Y.xOUT_ErrFlag THEN
        bOUT_Error := 11;
    ELSIF fb_axis145_02Z.xOUT_ErrFlag THEN
        bOUT_Error := 12;
    ELSIF fb_vakumGriperLeft.xOUT_ErrFlag THEN
        bOUT_Error := 13;
    ELSIF fb_vakumGriperRight.xOUT_ErrFlag THEN
        bOUT_Error := 14;
    END_IF
ELSIF iOUT_Step < ST145_Pnp_e.ERROR THEN
    iPreStep  := ST145_Pnp_e.INIT;
    iOUT_Step := ST145_Pnp_e.ERROR;
END_IF

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST145_Pnp_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST145_Pnp_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST145_Pnp_e.INIT;
    END_IF;

(***** INIT *****)
ST145_Pnp_e.INIT: (* Grundstellung ? *)
    IF fb_axis145_02Z.xOUT_HOMED THEN
        iOUT_Step := ST145_Pnp_e.Init_VerticalsUp;
    ELSE
        iOUT_Step := ST145_Pnp_e.Init_HomeVerticals;
    END_IF;

ST145_Pnp_e.Init_HomeVerticals:
    IF fb_axis145_02Z.xOUT_HOMED THEN
        iOUT_Step := ST145_Pnp_e.Init_VerticalsUp;
    END_IF

ST145_Pnp_e.Init_VerticalsUp:
    IF fb_vakumGriperLeft.xIN_AS OR fb_vakumGriperRight.xIN_AS THEN
        IF fb_PnpVerAxis.MoveTo(ST145_PnpVerPos_e.UpFull).xOUT_InPos THEN
            IF fb_axis145_01Y.xOUT_HOMED THEN
                iOUT_Step := ST145_Pnp_e.Init_HorizontalsToTrack;
            ELSE
                iOUT_Step := ST145_Pnp_e.Init_HomeHorizontals;
            END_IF
        END_IF
    ELSE
        IF fb_PnpVerAxis.MoveTo(ST145_PnpVerPos_e.UpEmpty).xOUT_InPos THEN
            IF fb_axis145_01Y.xOUT_HOMED THEN
                iOUT_Step := ST145_Pnp_e.Init_HorizontalsToTrack;
            ELSE
                iOUT_Step := ST145_Pnp_e.Init_HomeHorizontals;
            END_IF
        END_IF
    END_IF

ST145_Pnp_e.Init_HomeHorizontals:
    IF fb_axis145_01Y.xOUT_HOMED THEN
        iOUT_Step := ST145_Pnp_e.Init_HorizontalsToTrack;
    END_IF

ST145_Pnp_e.Init_HorizontalsToTrack:
    fb_axis145_02Z.rIN_Velocity := ST145_Axis.const145_02Z.VELO_MANU;

    IF fb_PnpHorAxis.MoveTo(ST145_PnpHorPos_e.GS_Before_placement).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.Init_check_if_pces_handled;
    END_IF

ST145_Pnp_e.Init_check_if_pces_handled:
    IF (NOT _20_AUTO.recipe.st145.xUseVerLeft AND fb_vakumGriperLeft.xOUT_inAS) OR
       (NOT _20_AUTO.recipe.st145.xUseVerRight AND fb_vakumGriperRight.xOUT_inAS) THEN
        // ERROR: a piece is present in an unused gripper
        bOUT_Error := 1;
        iOUT_Step  := ST145_Pnp_e.ERROR;

    ELSIF _20_AUTO.recipe.st145.xUseVerLeft AND
          NOT fb_vakumGriperLeft.xOUT_inAS AND
          _20_AUTO.recipe.st145.xUseVerRight AND
          fb_vakumGriperRight.xOUT_inAS THEN
        // ERROR:  Initialisation failed. A piece is missing in the left griper.
        bOUT_Error := 2;
        iOUT_Step  := ST145_Pnp_e.ERROR;

    ELSIF _20_AUTO.recipe.st145.xUseVerLeft AND
          fb_vakumGriperLeft.xOUT_inAS AND
          _20_AUTO.recipe.st145.xUseVerRight AND
          NOT fb_vakumGriperRight.xOUT_inAS THEN
        // ERROR:  Initialisation failed. A piece is missing in the right griper.
        bOUT_Error := 3;
        iOUT_Step  := ST145_Pnp_e.ERROR;

    ELSIF NOT fb_vakumGriperLeft.xOUT_inAS AND NOT fb_vakumGriperRight.xOUT_inAS THEN
        iOUT_Step := ST145_Pnp_e.READY;

    ELSE
        iOUT_Step := ST145_Pnp_e.waitOnMover;
    END_IF

(***** READY / INIT DONE *****)
ST145_Pnp_e.READY:    (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST145_Pnp_e.START;
        iPreStep  := ST145_Pnp_e.INIT;
    END_IF

(***** START  ZYKLISCH *****)
ST145_Pnp_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        IF enState.StateLEER = enIN_State THEN
            IF __ISVALIDREF(Mover) THEN
                IF Mover.GetLastStationDone() > 0 THEN
                    iOUT_Step := ST145_Pnp_e.Pnp_Hor_ToRotTablePos;
                ELSE
                    iOUT_Step := ST145_Pnp_e.waitOnMover;
                END_IF
            END_IF
        ELSE
            iOUT_Step := ST145_Pnp_e.Pnp_Hor_ToRotTablePos;
        END_IF
    END_IF;

ST145_Pnp_e.Pnp_Hor_ToRotTablePos:
    IF xIN_NextStep AND fb_PnpHorAxis.MoveTo(ST145_PnpHorPos_e.AS_to_feeder).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.Pnp_WaitOnFeeder;
    END_IF

ST145_Pnp_e.Pnp_WaitOnFeeder:
    IF xIN_PceReadyToPick THEN
        iOUT_Step := ST145_Pnp_e.Pnp_Ver_RotTableDown;
    END_IF

ST145_Pnp_e.Pnp_Ver_RotTableDown:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST145_PnpVerPos_e.DownEmpty).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.Vacum_on;
    END_IF;

ST145_Pnp_e.Vacum_on:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st145.xUseVerLeft OR fb_vakumGriperLeft.xOUT_inAS) AND
       (NOT _20_AUTO.recipe.st145.xUseVerRight OR fb_vakumGriperRight.xOUT_inAS) THEN
        iOUT_Step := ST145_Pnp_e.Pnp_Ver_RotTableUp;
    END_IF;

ST145_Pnp_e.Pnp_Ver_RotTableUp:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST145_PnpVerPos_e.UpFull).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.Pnp_Hor_ToTrackPos;
    END_IF;

ST145_Pnp_e.Pnp_Hor_ToTrackPos:
    IF xIN_NextStep AND fb_PnpHorAxis.MoveTo(ST145_PnpHorPos_e.GS_Before_placement).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.waitOnMover;
    END_IF

ST145_Pnp_e.waitOnMover: (*  *)
    IF xIN_NextStep AND __ISVALIDREF(Mover) OR HMI.bArForceCyclusState[StationList_e.ST145] THEN
        IF Mover.GetLastStationDone() >= INT#145 THEN
            iOUT_Step := ST145_Pnp_e.SYNC_MOVER_LEAVE;
        ELSIF Mover.GetLastStationDone() < INT#130 THEN
            iOUT_Step := ST145_Pnp_e.SYNC_MOVER_LEAVE;
        ELSE
            iOUT_Step := ST145_Pnp_e.Pnp_Ver_ShuttleDown;
        END_IF
    END_IF;

ST145_Pnp_e.Pnp_Ver_ShuttleDown:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST145_PnpVerPos_e.DownFullQuick).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.Vacum_off;

        IF __ISVALIDREF(Mover) THEN
            IF NOT Mover.SetLastStation(-145) THEN
                ASSERT(0);
            END_IF
        END_IF
    END_IF;

// not used here, maybe later
ST145_Pnp_e.Pnp_Ver_ShuttleTorqueControl:
    ASSERT(0);
    iOUT_Step := ST145_Pnp_e.Vacum_off;

ST145_Pnp_e.Vacum_off:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st145.xUseVerLeft OR fb_vakumGriperLeft.xOUT_inGS) AND
       (NOT _20_AUTO.recipe.st145.xUseVerRight OR fb_vakumGriperRight.xOUT_inGS) THEN
        iOUT_Step := ST145_Pnp_e.Pnp_move_a_bit_to_feeder;
    END_IF

ST145_Pnp_e.Pnp_move_a_bit_to_feeder:
    IF xIN_NextStep AND fb_PnpHorAxis.MoveTo(ST145_PnpHorPos_e.GS_After_placement).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.PnP_Ver_ShuttleUp;
    END_IF

ST145_Pnp_e.PnP_Ver_ShuttleUp:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST145_PnpVerPos_e.UpEmpty).xOUT_InPos THEN
        iOUT_Step := ST145_Pnp_e.SYNC_MOVER_LEAVE;

        IF __ISVALIDREF(Mover) THEN
            IF NOT Mover.SetLastStation(145) THEN
                ASSERT(0);
            END_IF
        END_IF
    END_IF;

ST145_Pnp_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        IF (NOT _20_AUTO.recipe.st145.xUseVerLeft OR fb_vakumGriperLeft.xOUT_inAS) AND
           (NOT _20_AUTO.recipe.st145.xUseVerRight OR fb_vakumGriperRight.xOUT_inAS) THEN
            iOUT_Step := ST145_Pnp_e.waitOnMover;
        ELSE
            iOUT_Step := ST145_Pnp_e.DONE;
        END_IF
    END_IF

(***** DONE *****)
ST145_Pnp_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST145_Pnp_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST145_Pnp_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST145_Pnp_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST145_Pnp_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>