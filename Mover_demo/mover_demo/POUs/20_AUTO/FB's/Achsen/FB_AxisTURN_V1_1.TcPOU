<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_AxisTURN_V1_1" Id="{8c8ed480-3f7c-415e-b38c-5db44233acde}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisTURN_V1_1
(****************************************************************************)
(*	FB_AxisLIN			FB für Radial-Achse	Endlos							*)
(*	Status				ungetestet											*)
(*  Version:			1.1													*)
(*	Beschrieb:			Achsfunktionen für eine Horizontalachse				*)
(*	MC-Bausteine:		MC_Power		Achsenfreigabe						*)
(*						MC_Reset		Achse Reset							*)
(*						MC_MoveVelocity	Verfahren Endlos 					*)
(*						MC_Jog			Verfahren Tipp-Betrieb				*)
(*						MC_Stop			Achse Stoppen						*)
(*						MC_ReadStatus	Achsenstatus aktualisieren			*)
(*																			*)
(*																			*)
(* 	02.03.2021/Dj															*)
(****************************************************************************)
(*	31.03.2021/Dj	1.1 xIN_DisButtons: INPUT Disable Manu Buttons			*)
(****************************************************************************)

VAR_INPUT
	//ALLGEMEIN ANLAGE/ZELLE
	enIN_State		: enState;			//Status Anlage/Zelle
	//HMI
	parIN_Buttons 	: POINTER TO ARRAY[0..7] OF structbutton;	//Pointer auf Tasten
	///Tasten deaktiviert
	xIN_DisButtons : BOOL;
	xIN_Quit		: BOOL;				//Error quitieren
	//ALLGEMEIN ACHSE
	axisIN_REF		: AXIS_REF;			//Achsreferenz
	xIN_FREE		: BOOL := TRUE;		//Achse Freilauf von Extern (z.B. Endlagen, Positionen)
	//LIMITEN
	rIN_VELOMAX		: REAL := 100;
	rIN_VELOMANU	: REAL := 50;
	rIN_VELOOPEN	: REAL := 25;
	//MOVE
	xIN_Execute     : BOOL :=FALSE;		//Start Move
	xIN_DirNeg      : BOOL :=FALSE;		//Direction Negativ
	rIN_Velocity    : REAL :=1;			//Velocity in %
	rIN_Acceleration: REAL :=0;			//Acc
	rIN_Deceleration: REAL :=0;			//Dec
	rIN_Jerk        : REAL :=0;			//Jerk
	//RESET
	xIN_Reset		: BOOL := FALSE;	//Reset von Extern
END_VAR
VAR_OUTPUT
	//ALLGEMEIN
	xOUT_ErrFlag	:	BOOL;	//Error Flag 
	xOUT_READY		:	BOOL;	//Achse Bereit für Positionierung
	xOUT_DONE		:	BOOL;	//MoveDone
	bOUT_Error		:	WORD;	(* Fehlernummer
									1: 
								 	2: MC_Power;			// Freigabe
								 	3: MC_Reset;			// Reset 
								 	4: MC_MoveVelocity;		// Verfahren  
									6: MC_Jog;				// Jog
									7: MC_Stop;				// Stopp
									9: MC_ReadStatus;		//Status aktualisieren
									10: AxisRef ERROR
								*)
	
	rOUT_ActPos		:	REAL;	//Aktuelle Position
END_VAR
VAR
	//Motion Bausteine
	_MC_Power		: MC_Power;			// Freigabe
	_MC_Reset		: MC_Reset;			// Reset 
	_MC_Move	 	: MC_MoveVelocity;	// Verfahren 
	_MC_Jog			: MC_Jog;			// Jog
	_MC_Stop		: MC_Stop;			// Stopp
	_MC_Home		: MC_Home;			// Homing
	_MC_ReadStatus	: MC_ReadStatus;	//Status aktualisieren
	//Flags
	xOFF			: BOOL;				//Achse Disabled
	xParamValid		: BOOL;				//Parameter gültig
	
	//HMI
	bJogMode		: BYTE := 0;		//Jog Mode 0: OFF, 1: INCHING, 2: SLOW, 3: FAST, 4: MOVE
	_FB_btOFF		: FB_BUTTON;		//Button Disable 
	_FB_btINCH		: FB_BUTTON;		//Button Inching 
	_FB_btSLOW		: FB_BUTTON;		//Button Slow 
	_FB_btFAST		: FB_BUTTON;		//Button Fast 
	_FB_btMOVE		: FB_BUTTON;		//Button Move   
	_FB_btJOGneg	: FB_BUTTON;		//Button Manu Move NEGATIVE
	_FB_btJOGpos	: FB_BUTTON;		//Button Manu Move POSITIVE 
	_FB_btHOME	: FB_BUTTON;			//Button Manu Homing 
	//Reset
	iStepAxisReset	: INT;			//Step Ablauf Reset
	iCountTryReset	: INT;				//Zähle Reset-Versuche
	
	//Timer
	TON_WaitReset	: TON;				//Warte nach Reset
	TON_ToutReset	: TON;				//Reset-Ablauf Timeout
	TOF_PowSafety	: TOF;				//Achse PowerOFF über Safety
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//***************************** MC FBs *************************************

	_MC_Power( 	Enable_Positive:= TRUE,
				Enable_Negative:= TRUE,
				Axis:= axisIN_REF  );

	_MC_Reset( Axis:= axisIN_REF);

	_MC_Stop( Axis:= axisIN_REF );

	_MC_Move( Axis:= axisIN_REF );

	_MC_Jog (	Axis:= axisIN_REF );

	_MC_ReadStatus(	Enable:= TRUE ,
					Axis:= axisIN_REF);
		
						
//***************************** Buttons ************************************
	//	Jog Mode OFF 
	_FB_btOFF(pbtIN:= ADR(parIN_Buttons^[0]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=0), 
	xINerr:= FALSE);
	//	Jog Mode INCH 
	_FB_btINCH(pbtIN:= ADR(parIN_Buttons^[1]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=1), 
	xINerr:=  _MC_Jog.Error);
	//	Jog Mode SLOW 
	_FB_btSLOW(pbtIN:= ADR(parIN_Buttons^[2]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=2), 
	xINerr:=  _MC_Jog.Error);
	//	Jog Mode FAST 
	_FB_btFAST(pbtIN:= ADR(parIN_Buttons^[3]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=3), 
	xINerr:= _MC_Jog.Error);
	//	Jog Mode MOVE 
	_FB_btMOVE(pbtIN:= ADR(parIN_Buttons^[4]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=4), 
	xINerr:= _MC_Move.Error);
	//	Jog NEGATIVE 
	_FB_btJOGneg(pbtIN:= ADR(parIN_Buttons^[5]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode>0), 
	xINerr:= FALSE);
	//	Jog POSITIVE 
	_FB_btJOGpos(pbtIN:= ADR(parIN_Buttons^[6]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode>0), 
	xINerr:= FALSE);	
	//	Manuell HOMING 
	_FB_btHOME(pbtIN:= ADR(parIN_Buttons^[7]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= axisIN_REF.Status.Homed, 
	xINerr:= FALSE);	

						
//***************************** Velocity / ACC-DEC-JERK *******************
	(* Velocity *)
	iIN_Velocity := LIMIT(1,iIN_Velocity,100);
	IF (_02_SAFETY.xOUT_Einrichten) THEN
		_MC_Move.Velocity := iIN_Velocity * rIN_VELOOPEN / 100;
	ELSIF (enIN_State<StateREADY) THEN
		_MC_Move.Velocity := iIN_Velocity * rIN_VELOMANU / 100;
	ELSE
		_MC_Move.Velocity := iIN_Velocity * rIN_VELOMAX / 100;
	END_IF
	(* Acceleration *)
	IF (rIN_Acceleration>0) THEN
		_MC_Move.Acceleration := rIN_Acceleration;
	END_IF
	(* Deceleration *)
	IF (rIN_Deceleration>0) THEN
		_MC_Move.Deceleration := rIN_Deceleration;
	END_IF
	(* Jerk *)
	IF (rIN_Jerk>0) THEN
		_MC_Move.Jerk := rIN_Jerk;
	END_IF
	
//***************************** MOVE *************************************
	IF xOUT_READY THEN
		//AUTO
		IF (enIN_State>StateALARM) OR (enIN_State=StateINIT) OR (enIN_State=StateREF) THEN
			//Mode
			bJogMode:=0;
			_MC_Move.Execute:= xIN_Execute;
		//MANUELL
		ELSIF (enIN_State=StateMANU) THEN
			//Mode
			IF _FB_btOFF.pbtIN^.rtrig THEN
				bJogMode := 0;
				_MC_Move.Execute:= FALSE;
			ELSIF _FB_btINCH.pbtIN^.rtrig THEN
				bJogMode := 1;
			ELSIF _FB_btSLOW.pbtIN^.rtrig THEN
				bJogMode := 2;
			ELSIF _FB_btFAST.pbtIN^.rtrig THEN
				bJogMode := 3;
			ELSIF _FB_btMOVE.pbtIN^.rtrig THEN
				bJogMode := 4;
			END_IF
			//*********************************************
			//Move
			IF (bJogMode=4) THEN
				
			_MC_Move.Execute:= (_FB_btJOGneg.pbtIN^.press OR _FB_btJOGneg.pbtIN^.press);

			//*********************************************
			//Jog
			ELSIF (bJogMode>0) THEN
				_MC_Jog.Mode := MC_JOGMODE_STANDARD_SLOW;
				IF (bJogMode=1) THEN
					_MC_Jog.Mode := MC_JOGMODE_INCHING;
				ELSIF (bJogMode=3) THEN
					_MC_Jog.Mode := MC_JOGMODE_STANDARD_FAST;
				END_IF;
				_MC_Jog.JogBackwards := _FB_btJOGneg.pbtIN^.press;
				_MC_Jog.JogForward := _FB_btJOGpos.pbtIN^.press;
			END_IF;
		END_IF;
	END_IF;
//*********************** STOP - STO - POWER ******************************	
	xOFF := ((enIN_State<StateENGIZED) AND NOT (enIN_State=StateREF)) OR ((enIN_State=StateMANU) AND (bJogMode=0));
	TOF_PowSafety(IN:= NOT xOFF, PT:=T#50MS);
	_MC_Stop.Execute := _MC_Power.Enable AND 
		(	NOT _02_SAFETY.xOUT_ESout OR NOT _02_SAFETY.xOUT_MonOut OR 				//SAFETY
			(enIN_State<StateREF) OR (enIN_State=StateREADY) OR						//STATE
			(enIN_State=StateSTOP) OR (enIN_State=StateALARM) OR	
			(	(enIN_State=StateMANU) AND (bJogMode=4) AND							//MANU MOVE
					NOT _FB_btJOGneg.pbtIN^.press AND NOT _FB_btJOGneg.pbtIN^.press ) OR
			(	NOT xIN_Free AND ((enIN_State>StateINIT) OR	(bJogMode>2))) OR		//FREE
			NOT xIN_Execute 														//EXE 		
		);
	_MC_Power.Enable := _02_SAFETY.xOUT_ESdelOut AND _02_SAFETY.xOUT_MonDelOut AND TOF_PowSafety.Q;


//***************************** RESET *************************************
	TON_WaitReset(IN:=_MC_Reset.Done , PT:=T#1S , Q=> , ET=> );

	TON_ToutReset(IN:= (iStepAxisReset<>0), PT:= T#15S);
	IF TON_ToutReset.Q THEN
		iStepAxisReset:=0;
	END_IF

	CASE iStepAxisReset OF
	0:	(* Alles OK *)
		IF  axisIN_REF.Status.Error AND 
			(	(enIN_State=StateENGIZED) OR  xIN_Quit OR xIN_Reset)  THEN
			iCountTryReset := 0;
			iStepAxisReset	:= 10;
		END_IF;

	10:	(* AXIS RESET EXECUTES *)
		_MC_Reset.Execute := FALSE;
		_MC_Move.Execute := FALSE;
		IF _MC_Power.Active THEN
			iStepAxisReset	:= 50;
		END_IF;

	50:	(* RESET ACHSE *)
		_MC_Reset.Execute := TRUE;
		iStepAxisReset	:= 60;

	60:	(* RESET DONE *)
		IF _MC_Reset.Done AND TON_WaitReset.Q THEN
			_MC_Reset.Execute := FALSE;
			iStepAxisReset	:= 70;
		END_IF;

	70:  (* ACHSE OK *)
		IF axisIN_REF.Status.Error THEN
			IF (iCountTryReset>5) THEN
				iStepAxisReset := 100;
			ELSE
				iCountTryReset := iCountTryReset + 1;
				iStepAxisReset	:= 10;
			END_IF;
		ELSE
			iStepAxisReset	:= 0;
		END_IF;

	100:	(* ALARM *)
		IF xIN_Quit  OR (enIN_State<>StateENGIZED) THEN
			iStepAxisReset	:= 0;
		END_IF;
	END_CASE;
		
//*********************** ERRORS *******************************
	//QUIT
	IF xOUT_ErrFlag AND xIN_Quit THEN
		xOUT_ErrFlag := FALSE;
		bOUT_Error := 0;
	END_IF
	//SET ERROR
	IF _MC_Power.Error THEN
		bOUT_Error := 2;
	END_IF
	IF _MC_Reset.Error THEN
		bOUT_Error := 3;
	END_IF
	IF _MC_Move.Error THEN
		bOUT_Error := 4;
	END_IF
	IF _MC_Jog.Error THEN
		bOUT_Error := 6;
	END_IF
	IF _MC_Stop.Error THEN
		bOUT_Error := 7;
	END_IF
	IF _MC_ReadStatus.Error THEN
		bOUT_Error := 9;
	END_IF
	IF axisIN_REF.Status.Error THEN
		bOUT_Error := 10;
	END_IF
	xOUT_ErrFlag := (bOUT_Error<>0);
	
//***************************** OUTS *************************************
	(* Anzeige / Ready *)
	rOUT_ActPos := LREAL_TO_REAL(axisIN_REF.NcToPlc.ActPos);
	xOUT_READY 	:= 	axisIN_REF.Status.Operational AND 
					NOT axisIN_REF.Status.Error  AND
					(axisIN_REF.Status.Homed OR xIN_ENC_ABS) AND 
					xIN_Free AND xIN_PARAMok AND NOT xOUT_ErrFlag ;
	xOUT_DONE 	:= 	(NOT xIN_Relative AND _MC_MoveAbs.Done) OR
					(xIN_Relative AND _MC_MoveRel.Done);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>