<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_AxisSMC_V1_1" Id="{4456d867-404c-4dc3-8ea3-6d5ee31068ac}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisSMC_V1_1
(****************************************************************************)
(*	FB_AxisLIN			FB für Linear-Achse	SMC (keine Motion)				*)
(*	Status				ungetestet											*)
(*  Version:			1.1													*)
(*	Beschrieb:			Achsfunktionen für eine Linearachse von SMC			*)
(*						Elektrische Zylinder mit Schrittmotor				*)
(*						Kontroller: JXCE1									*)
(*																			*)
(*	Bausteine:			JXCE1_Baustein von SMC								*)
(*																			*)
(*																			*)
(*																			*)
(* 	09.09.2019/Dj															*)
(****************************************************************************)
(*	31.03.2021/Dj	1.1 xIN_DisButtons: INPUT Disable Manu Buttons			*)
(****************************************************************************)

VAR_INPUT
	//ALLGEMEIN ANLAGE/ZELLE
	enIN_State		: enState;			//Status Anlage/Zelle
	//HMI
	parIN_Buttons 	: POINTER TO ARRAY[0..7] OF structbutton;	//Pointer auf Tasten
	///Tasten deaktiviert
	xIN_DisButtons : BOOL;
	xIN_Quit		: BOOL;				//Error quitieren
	//ALLGEMEIN ACHSE
	xIN_PARAMok		: BOOL := TRUE;		//HMI Parameter validiert
	xIN_FREE		: BOOL := TRUE;		//Achse Freilauf von Extern (z.B. Endlagen, Positionen)
	xIN_FREE_HOME	: BOOL := TRUE;		//Achse Freilauf von Extern für Homing
	//LIMITEN
	rIN_POSMIN		: REAL := 0;
	rIN_POSMAX		: REAL := 10;
	rIN_VELOMAX		: REAL := 100;
	rIN_VELOMANU	: REAL := 50;
	rIN_VELOOPEN	: REAL := 25;
	//JOG
	rIN_JogInc		: REAL := 0.1;		//Jog Mode Inching Value
	rIN_JogVelo		: REAL := 50;		//Jog Mode Velocity
	//HOMING
	xIN_HomeExe		: BOOL := FALSE;	//Start Homing
	xIN_HomeCalib	: BOOL := FALSE;	//Kalibriernocken
	//MOVE
	xIN_Execute     : BOOL :=FALSE;		//Start Move
	xIN_Relative	: BOOL :=FALSE;		//Move Relative
	rIN_Position    : REAL :=10;		//Position / Distance
	rIN_Velocity    : REAL :=1;			//Velocity in %
	rIN_Acceleration: REAL :=100;			//Acc
	rIN_Deceleration: REAL :=100;			//Dec
	//RESET
	xIN_Reset		: BOOL := FALSE;	//Reset von Extern
	//SMC
	typeIN_AREA		: typeInputArea;
END_VAR
VAR_OUTPUT
	//ALLGEMEIN
	xOUT_ErrFlag	:	BOOL;	//Error Flag 
	xOUT_READY		:	BOOL;	//Achse Bereit für Positionierung
	xOUT_HOMED		:	BOOL;	//Achse Referenz gefahren
	xOUT_DONE		:	BOOL;	//MoveDone
	bOUT_Error		:	WORD;	(* Fehlernummer
									1: FB_SoEReset; 		// Drive Reset nach Leistung enable (AX5000)
								 	2: MC_Power;			// Freigabe
								 	3: MC_Reset;			// Reset 
								 	4: MC_MoveAbsolute;		// Verfahren Absolut 
									5: MC_MoveRelative;		// Verfahren Absolut 
									6: MC_Jog;				// Jog
									7: MC_Stop;				// Stopp
									8: MC_Home;				// Homing
									9: MC_ReadStatus;		//Status aktualisieren
									10: AxisRef ERROR
									11: Parameter NIO
								*)
	
	rOUT_ActPos		:	REAL;	//Aktuelle Position
	
	//SMC
	typeOUT_AREA	: typeOutputArea;
END_VAR
VAR
	//Motion Bausteine
	_FB_JXCE1		: JXCE1_Baustein;
	//Flags
	xOFF			: BOOL;				//Achse Disabled
	xParamValid		: BOOL;				//Parameter gültig
	
	//HMI
	bJogMode		: BYTE := 0;		//Jog Mode 0: OFF, 1: INCHING, 2: SLOW, 3: FAST, 4: MOVE
	_FB_btOFF		: FB_BUTTON;		//Button Disable 
	_FB_btINCH		: FB_BUTTON;		//Button Inching 
	_FB_btSLOW		: FB_BUTTON;		//Button Slow 
	_FB_btFAST		: FB_BUTTON;		//Button Fast 
	_FB_btMOVE		: FB_BUTTON;		//Button Move   
	_FB_btJOGneg	: FB_BUTTON;		//Button Manu Move NEGATIVE
	_FB_btJOGpos	: FB_BUTTON;		//Button Manu Move POSITIVE 
	_FB_btHOME	: FB_BUTTON;			//Button Manu Homing 
	//Reset
	iStepAxisReset	: INT;			//Step Ablauf Reset
	iCountTryReset	: INT;				//Zähle Reset-Versuche
	
	//Timer
	TON_WaitReset	: TON;				//Warte nach Reset
	TON_ToutReset	: TON;				//Reset-Ablauf Timeout
	TOF_PowSafety	: TOF;				//Achse PowerOFF über Safety
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//***************************** FBs *************************************
	_FB_JXCE1(
		MOTOR_ON:= , 
		RET_ORIG:= , 
		JOG_FORWARD:= , 
		JOG_BACKWARD:= , 
		START_OP:= , 
		HOLD:= , 
		RESET:= , 
		SPEED:= , 
		MOVEMENT_MODE:= , 
		POS:= 1400, // REAL_TO_DINT(rIN_Position*100), 
		ACC:= , 
		DEC:= , 
		PUSH_FOR:= 0, 
		TRIG_LV:= 0, 
		PUSH_SPE:= 0, 
		MOV_FOR:= 100, 
		AREA_1:= 0, 
		AREA_2:= 0, 
		IN_POS:= 1, 
		INPUT_AREA:= typeIN_AREA, 
		READY=> , 
		ORIG_SET=> , 
		BUSY=> , 
		INP=> , 
		AREA=> , 
		ALARM=> , 
		CUR_POS=> , 
		CUR_SPE=> , 
		CUR_PUSH_FOR=> , 
		TAR_POS=> , 
		ALARM_1=> , 
		ALARM_2=> , 
		ALARM_3=> , 
		ALARM_4=> , 
		OUTPUT_AREA=> typeOUT_AREA);
		

//***************************** Buttons ************************************
	//	Jog Mode OFF 
	_FB_btOFF(pbtIN:= ADR(parIN_Buttons^[0]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=0), 
	xINerr:= FALSE);
	//	Jog Mode INCH 
	_FB_btINCH(pbtIN:= ADR(parIN_Buttons^[1]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=1), 
	xINerr:=  _FB_JXCE1.ALARM);
	//	Jog Mode SLOW 
	_FB_btSLOW(pbtIN:= ADR(parIN_Buttons^[2]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=2), 
	xINerr:=  _FB_JXCE1.ALARM);
	//	Jog Mode FAST 
	_FB_btFAST(pbtIN:= ADR(parIN_Buttons^[3]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=3), 
	xINerr:= _FB_JXCE1.ALARM);
	//	Jog Mode MOVE 
	_FB_btMOVE(pbtIN:= ADR(parIN_Buttons^[4]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode=4), 
	xINerr:= _FB_JXCE1.ALARM);
	//	Jog NEGATIVE 
	_FB_btJOGneg(pbtIN:= ADR(parIN_Buttons^[5]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode>0), 
	xINerr:= FALSE);
	//	Jog POSITIVE 
	_FB_btJOGpos(pbtIN:= ADR(parIN_Buttons^[6]),
	xINdis:= (enIN_State<>StateMANU) OR xIN_DisButtons, 
	xINon:= (enIN_State=StateMANU) AND (bJogMode>0), 
	xINerr:= FALSE);	
	//	Manuell HOMING 
	_FB_btHOME(pbtIN:= ADR(parIN_Buttons^[7]),
	xINdis:= (enIN_State<>StateMANU) or xIN_DisButtons, 
	xINon:= _FB_JXCE1.ORIG_SET, 
	xINerr:= _FB_JXCE1.ALARM);	

						
//***************************** Velocity / ACC-DEC-JERK *******************
	(* Velocity *)
	rIN_Velocity := LIMIT(1,rIN_Velocity,100);
	IF (_02_SAFETY.xOUT_Einrichten) THEN
		_FB_JXCE1.SPEED := REAL_TO_UINT(rIN_Velocity * rIN_VELOOPEN / 100)*100;
	ELSIF (enIN_State<StateREADY) THEN
		_FB_JXCE1.SPEED := REAL_TO_UINT(rIN_Velocity * rIN_VELOMANU / 100)*100;
	ELSE
		_FB_JXCE1.SPEED := REAL_TO_UINT(rIN_Velocity * rIN_VELOMAX / 100)*100;
	END_IF
	(* Acceleration *)
	IF (rIN_Acceleration>0) THEN
		_FB_JXCE1.ACC := REAL_TO_UINT(rIN_Acceleration);
	END_IF
	(* Deceleration *)
	IF (rIN_Deceleration>0) THEN
		_FB_JXCE1.DEC := REAL_TO_UINT(rIN_Acceleration);
	END_IF
	
//***************************** HOMING ***********************************
	IF _FB_JXCE1.READY AND NOT _FB_JXCE1.ALARM  AND
					xIN_FREE_HOME AND xIN_PARAMok THEN
		//INIT+REFERENZFAHREN
		IF (enIN_State=StateINIT) OR (enIN_State=StateREF) THEN
			_FB_JXCE1.RET_ORIG := xIN_HomeExe;
		//MANUELL
		ELSIF (enIN_State=StateMANU) THEN
			_FB_JXCE1.RET_ORIG := _FB_btHOME.pbtIN^.rtrig;
		END_IF;
	END_IF;
//***************************** MOVE *************************************
	//IF xOUT_READY THEN
		//ABS-REL
		IF xIN_Relative THEN
			_FB_JXCE1.MOVEMENT_MODE := 2;
		ELSE
			_FB_JXCE1.MOVEMENT_MODE := 1;
		END_IF
		//AUTO
		IF (enIN_State>StateALARM) OR (enIN_State=StateINIT) OR (enIN_State=StateREF) THEN
			//Mode
			bJogMode:=0;
			//Absolute
			_FB_JXCE1.START_OP := xIN_Execute;
		//MANUELL
		ELSIF (enIN_State=StateMANU) THEN
			//Mode
			IF _FB_btOFF.pbtIN^.rtrig THEN
				bJogMode := 0;
				_FB_JXCE1.START_OP := FALSE;
				_FB_JXCE1.RET_ORIG := FALSE;
			ELSIF _FB_btINCH.pbtIN^.rtrig THEN
				//NICHT VERWENDET bJogMode := 1;
			ELSIF _FB_btSLOW.pbtIN^.rtrig THEN
				bJogMode := 2;
			ELSIF _FB_btFAST.pbtIN^.rtrig THEN
				bJogMode := 3;
			ELSIF _FB_btMOVE.pbtIN^.rtrig THEN
				bJogMode := 4;
			END_IF
			//*********************************************
			//Move
			IF (bJogMode=4) THEN
				//Absolute
				_FB_JXCE1.START_OP := (_FB_btJOGneg.pbtIN^.press OR _FB_btJOGneg.pbtIN^.press);
				
			//*********************************************
			//Jog
			ELSIF (bJogMode>0) THEN
				_FB_JXCE1.JOG_BACKWARD := _FB_btJOGneg.pbtIN^.press;
				_FB_JXCE1.JOG_FORWARD := _FB_btJOGpos.pbtIN^.press;
			END_IF;
		END_IF;
	//END_IF;
//*********************** STOP - STO - POWER ******************************	
	xOFF := ((enIN_State<StateENGIZED) AND NOT (enIN_State=StateREF)) OR ((enIN_State=StateMANU) AND (bJogMode=0));
	TOF_PowSafety(IN:= NOT xOFF, PT:=T#50MS);
	(*djtodo
	_FB_JXCE1.HOLD := _FB_JXCE1.READY AND 
		(	NOT _02_SAFETY.xOUT_ESout OR NOT _02_SAFETY.xOUT_MonOut OR 				//SAFETY
			(enIN_State<StateREF) OR (enIN_State=StateREADY) OR						//STATE
			(enIN_State=StateSTOP) OR (enIN_State=StateALARM) OR	
			(	(enIN_State=StateMANU) AND (bJogMode=4) AND							//MANU MOVE
					NOT _FB_btJOGneg.pbtIN^.press AND NOT _FB_btJOGneg.pbtIN^.press ) OR
			(	NOT xIN_Free AND ((enIN_State>StateINIT) OR	(bJogMode>2)) ) 		//FREE
		);
		*)
	_FB_JXCE1.MOTOR_ON := _02_SAFETY.xOUT_ESdelOut AND _02_SAFETY.xOUT_MonDelOut AND TOF_PowSafety.Q AND 
						xIN_PARAMok;


//***************************** RESET *************************************
	TON_WaitReset(IN:=_FB_JXCE1.RESET , PT:=T#1S , Q=> , ET=> );

	TON_ToutReset(IN:= (iStepAxisReset<>0), PT:= T#15S);
	IF TON_ToutReset.Q THEN
		iStepAxisReset:=0;
	END_IF
(*
	CASE iStepAxisReset OF
	0:	(* Alles OK *)
		IF  _FB_JXCE1.ALARM AND 
			(	(enIN_State=StateENGIZED) OR  xIN_Quit OR xIN_Reset)  THEN
			iCountTryReset := 0;
			iStepAxisReset	:= 10;
		END_IF;

	10:	(* AXIS RESET EXECUTES *)
		_FB_JXCE1.RESET := FALSE;
		_FB_JXCE1.RET_ORIG := FALSE;
		_FB_JXCE1.START_OP := FALSE;
		iStepAxisReset	:= 50;


	50:	(* RESET ACHSE *)
		_FB_JXCE1.RESET := TRUE;
		iStepAxisReset	:= 60;

	60:	(* RESET DONE *)
		IF NOT _FB_JXCE1.ALARM AND TON_WaitReset.Q THEN
			_FB_JXCE1.RESET := FALSE;
			iStepAxisReset	:= 70;
		END_IF;

	70:  (* ACHSE OK *)
		IF _FB_JXCE1.ALARM THEN
			IF (iCountTryReset>5) THEN
				iStepAxisReset := 100;
			ELSE
				iCountTryReset := iCountTryReset + 1;
				iStepAxisReset	:= 10;
			END_IF;
		ELSE
			iStepAxisReset	:= 0;
		END_IF;

	100:	(* ALARM *)
		IF xIN_Quit  OR (enIN_State<>StateENGIZED) THEN
			iStepAxisReset	:= 0;
		END_IF;
	END_CASE;
		*)
//*********************** ERRORS *******************************
	//QUIT
	IF xOUT_ErrFlag AND xIN_Quit THEN
		xOUT_ErrFlag := FALSE;
		bOUT_Error := 0;
	END_IF
	//SET ERROR
	IF _FB_JXCE1.ALARM THEN
		bOUT_Error := 10;
	ELSIF NOT xIN_PARAMok THEN
		bOUT_Error := 11;
	END_IF
	xOUT_ErrFlag := (bOUT_Error<>0);
	
//***************************** OUTS *************************************
	(* Anzeige / Ready *)
	rOUT_ActPos := LREAL_TO_REAL(_FB_JXCE1.CUR_POS);
	xOUT_READY 	:= 	_FB_JXCE1.READY AND 
					NOT _FB_JXCE1.ALARM  AND
					_FB_JXCE1.ORIG_SET AND 
					xIN_Free AND xIN_PARAMok AND NOT xOUT_ErrFlag ;
	xOUT_DONE 	:= 	_FB_JXCE1.INP AND NOT _FB_JXCE1.BUSY;
	xOUT_HOMED := _FB_JXCE1.ORIG_SET;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>