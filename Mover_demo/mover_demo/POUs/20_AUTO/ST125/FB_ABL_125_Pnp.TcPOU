<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_125_Pnp" Id="{4a06b0f4-99df-4f78-9f98-381f88399979}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_125_Pnp
(****************************************************************************************)
(*	TITEL				laden kristall- Modul	    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    Mover              : REFERENCE TO FB_Mover;
    xIN_PceReadyToPick : BOOL; // the piece(s) is/are ready to picked
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;        // Error Flag 
    xOUT_Busy     : BOOL;        // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;        // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;        // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;        // Timeout FB 
    xOUT_InitDone : BOOL;        // initialisierung fertig
    xOUT_Wait     : BOOL;        // Wartet auf Bedingung
    iOUT_Step     : ST125_Pnp_e; // Aktueller Schritt 
    sOUT_Step     : STRING;      // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;        // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion, express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move
    xOUT_PickPiece         : BOOL; // Set to true when a piece is picked

END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST125_Pnp_e; // Merker letzter Schritt 
    iPreStep  : ST125_Pnp_e; // Schritt zurück nach Alarm 
    iAktStep  : ST125_Pnp_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)

    (* Spezial *)
    fb_axis125_01Y : FB_AxisLM_V1_1;
    fb_axis125_02Z : FB_AxisLIN_V1_1;

    fb_PnpHorAxis : FB_LinearMotionMan;
    fb_PnpVerAxis : FB_LinearMotionMan;

    fb_simu_axis125_01Y : FB_Simu_AxisLM_V1_1;
    fb_simu_axis125_02Z : FB_Simu_AxisLIN_V1_1;

END_VAR
VAR CONSTANT
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST125_Pnp_e.RESET;
    iOUT_Step := ST125_Pnp_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
fb_PnpHorAxis(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST125_01Y],
              lrIN_CurrPos    := fb_axis125_01Y.rOUT_ActPos,
              lrIN_Delta_mm   := 0.01,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST125_PnpHorPos_e._max);

fb_axis125_01Y(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons   := FALSE,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE, (*TODO*)
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST125_Axis.const125_01Y.POS_MIN,
               rIN_POSMAX       := ST125_Axis.const125_01Y.POS_MAX,
               rIN_VELOMAX      := ST125_Axis.const125_01Y.VELO_MAX,
               rIN_VELOMANU     := ST125_Axis.const125_01Y.VELO_MANU,
               rIN_VELOOPEN     := ST125_Axis.const125_01Y.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      := fb_PnpHorAxis.xOUT_Execute,
               xIN_Home         := ST125_Pnp_e.Init_HomeHorizontals = iAktStep,
               xIN_Relative     :=,
               rIN_Position     := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrJerk),
               xIN_Reset        := (ST125_Pnp_e.RESET = iAktStep) OR xIN_Reset,
               rOUT_ActPos      => st125_axis.axis125_01Y.rActPos,
               axisIN_REF       := ST125_Axis.axis125_01Y.axis);

fb_simu_axis125_01Y(bIN_AxisCntr        := fb_axis125_01Y.bOUT_AxisCntr,
                    udiIN_HomingTime_ms := 2000,
                    rIN_PosActual       := fb_axis125_01Y.rOUT_ActPos,
                    rIN_PosMax          := ST125_Axis.const125_01Y.POS_MAX,
                    rIN_PosMin          := ST125_Axis.const125_01Y.POS_MIN,
                    rIN_PixMax          := 100,
                    rIN_PixMin          := 0,
                    wOUT_AxisState      => fb_axis125_01Y.wAxisState);

fb_PnpVerAxis(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST125_02Z],
              lrIN_CurrPos    := fb_axis125_02Z.rOUT_ActPos,
              lrIN_Delta_mm   := 0.01,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST125_PnpVerPos_e._max);

fb_axis125_02Z(enIN_State     := enIN_State,
               parIN_Buttons  := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons := FALSE,
               xIN_Quit       := xIN_Quit,
               axisIN_REF     := ST125_Axis.axis125_02Z.axis,
               xIN_AX5000     := FALSE,
               xIN_ENC_ABS    := TRUE, // TODO set accordingly
               xIN_PARAMok    := TRUE,
               xIN_FREE       := TRUE,
               xIN_FREE_HOME  := TRUE,
               rIN_POSMIN     := ST125_Axis.const125_02Z.POS_MIN,
               rIN_POSMAX     := ST125_Axis.const125_02Z.POS_MAX,
               rIN_VELOMAX    := ST125_Axis.const125_02Z.VELO_MAX,
               rIN_VELOMANU   := ST125_Axis.const125_02Z.VELO_MANU,
               rIN_VELOOPEN   := ST125_Axis.const125_02Z.POS_MAX / 4,
               rIN_JogInc     := AXIS.rTeachIncAxis,
               rIN_JogVelo    := AXIS.rTeachVelo,
               xIN_HomeExe    :=,
               xIN_HomeCalib  :=,
               xIN_Execute    := (_20_AUTO.recipe.st125.xUseVerLeft OR (iOUT_Step < ST125_Pnp_e.READY)) AND
                                 (fb_PnpVerAxis.xOUT_Execute),
               xIN_HomeExe      := NOT CONST.USE_SIMULATION AND (ST125_Pnp_e.Init_HomeVerticals = iAktStep),
               xIN_Relative     :=,
               rIN_Position     := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpVerAxis.OUT_MoveProfile.lrJerk),
               xIN_Reset        := (ST125_Pnp_e.RESET = iAktStep) OR xIN_Reset,
               rOUT_ActPos      => st125_axis.axis125_02Z.rActPos);

fb_simu_axis125_02Z(rIN_PosActual := fb_axis125_02Z.rOUT_ActPos,
                    rIN_PosMax    := ST125_Axis.const125_02Z.POS_MAX,
                    rIN_PosMin    := ST125_Axis.const125_02Z.POS_MIN,
                    rIN_PixMax    := 80,
                    rIN_PixMin    := 0);

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST125_Pnp_e.READY) AND (iOUT_Step < ST125_Pnp_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST125_Pnp_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST125_Pnp_e.READY);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST125_Pnp_e.READY);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST125_Pnp_e.DONE);

xOUT_MoverFree := iOUT_Step >= ST125_Pnp_e.MOVER_FREE_OP AND iOUT_Step < ST125_Pnp_e.MOVER_NEEDED_OP;

iOUT_ProcessCompletion := F_GetPercent_2(iAktStep,
                                         ST125_Pnp_e.PnP_Hor_ToRotTablePos,
                                         ST125_Pnp_e.PnP_Hor_ToTrackPos,
                                         ST125_Pnp_e.PnP_Ver_ShuttleDown,
                                         ST125_Pnp_e.PnP_Ver_ShuttleUp);

xOUT_PickPiece := iOUT_Step = ST125_Pnp_e.PnP_Hor_ToTrackPos;

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST125_Pnp_e.RESET;
    iOUT_Step := ST125_Pnp_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST125_Pnp_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST125_Pnp_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST125_Pnp_e.INIT;
    END_IF;

(***** INIT *****)
ST125_Pnp_e.INIT: (* Grundstellung ? *)
    IF CONST.USE_SIMULATION THEN
        iOUT_Step := ST125_Pnp_e.Init_VerticalsUp;
    ELSE
        iOUT_Step := ST125_Pnp_e.Init_HomeVerticals;
    END_IF;

ST125_Pnp_e.Init_HomeVerticals:
    fb_axis125_02Z.rIN_Velocity := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST125_02Z].movesList[0].lrVelocity;

    IF fb_axis125_02Z.xOUT_DONE THEN
        iOUT_Step := ST125_Pnp_e.Init_VerticalsUp;
    END_IF

ST125_Pnp_e.Init_VerticalsUp:
    IF fb_PnpVerAxis.MoveTo(ST125_PnpVerPos_e.UpEmpty).xOUT_InPos THEN
        IF fb_axis125_01Y.xOUT_READY OR fb_axis125_01Y.xOUT_HOMED THEN
            iOUT_Step := ST125_Pnp_e.Init_HorizontalsToTrack;
        ELSE
            iOUT_Step := ST125_Pnp_e.Init_HomeHorizontals;
        END_IF
    END_IF

ST125_Pnp_e.Init_HomeHorizontals:
    fb_axis125_01Y.rIN_Velocity := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST125_01Y].movesList[0].lrVelocity;

    IF fb_axis125_01Y.xOUT_HOMED THEN
        iOUT_Step := ST125_Pnp_e.Init_HorizontalsToTrack;
    END_IF

ST125_Pnp_e.Init_HorizontalsToTrack:
    IF fb_PnpHorAxis.MoveTo(ST125_PnpHorPos_e.GS).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.READY;
    END_IF

(***** READY / INIT DONE *****)
ST125_Pnp_e.READY:    (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST125_Pnp_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST125_Pnp_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step := ST125_Pnp_e.PnP_Hor_ToRotTablePos;
    END_IF;

ST125_Pnp_e.PnP_Hor_ToRotTablePos:
    IF xIN_NextStep AND fb_PnpHorAxis.MoveTo(ST125_PnpHorPos_e.AS).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.PnP_WaitOnFeeder;
    END_IF

ST125_Pnp_e.PnP_WaitOnFeeder:
    IF xIN_PceReadyToPick THEN
        iOUT_Step := ST125_Pnp_e.PnP_Ver_RotTableDown;
    END_IF

ST125_Pnp_e.PnP_Ver_RotTableDown:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST125_PnpVerPos_e.DownEmpty).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.Gripper_close;
    END_IF;

ST125_Pnp_e.Gripper_close:
    IF xIN_NextStep AND NOT fb_axis125_02Z.xOUT_DONE THEN
        iOUT_Step := ST125_Pnp_e.PnP_Ver_RotTableUp;
    END_IF;

ST125_Pnp_e.PnP_Ver_RotTableUp:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST125_PnpVerPos_e.UpFull).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.PnP_Hor_ToTrackPos;
    END_IF;

ST125_Pnp_e.PnP_Hor_ToTrackPos:
    IF xIN_NextStep AND fb_PnpHorAxis.MoveTo(ST125_PnpHorPos_e.GS).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.waitOnMover;
    END_IF

ST125_Pnp_e.waitOnMover: (*  *)
    IF xIN_NextStep AND __ISVALIDREF(Mover) THEN
        iOUT_Step := ST125_Pnp_e.PnP_Ver_ShuttleDown;
    END_IF;

ST125_Pnp_e.PnP_Ver_ShuttleDown:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST125_PnpVerPos_e.DownFullQuick).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.PnP_Ver_ShuttleTorqueControl;
    END_IF;

// We need a fb that enables for us torque control. Here we just go a bit further
ST125_Pnp_e.PnP_Ver_ShuttleTorqueControl:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST125_PnpVerPos_e.DownFullTorqueControl).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.Gripper_open;
    END_IF;

ST125_Pnp_e.Gripper_open:
    IF xIN_NextStep THEN
        iOUT_Step := ST125_Pnp_e.PnP_Ver_ShuttleUp;
    END_IF;

ST125_Pnp_e.PnP_Ver_ShuttleUp:
    IF xIN_NextStep AND fb_PnpVerAxis.MoveTo(ST125_PnpVerPos_e.UpEmpty).xOUT_InPos THEN
        iOUT_Step := ST125_Pnp_e.SYNC_MOVER_LEAVE;
    END_IF;

ST125_Pnp_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST125_Pnp_e.DONE;
    END_IF

(***** DONE *****)
ST125_Pnp_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST125_Pnp_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST125_Pnp_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST125_Pnp_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST125_Pnp_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>