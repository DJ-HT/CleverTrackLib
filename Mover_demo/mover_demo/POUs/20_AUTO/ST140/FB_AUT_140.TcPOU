<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_AUT_140" Id="{b97e51aa-fc97-4727-93f4-9bc927d088d5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AUT_140 EXTENDS FB_AUT_ABSTRACT
(****************************************************************************)
(*	POU_AUT_zxx			Bausteinaufrufe Station	zxx							*)
(*	Status				ungetestet											*)
(*  Version:			1.0													*)
(*	Beschrieb:																*)
(*																			*)
(*	Abläufe:			FB_ABLzxxA		Hauptablauf							*)
(*																			*)
(*																			*)
(* 	25.09.2019/Dj															*)
(****************************************************************************)
(*	dd.mm.yyyy   KZ    x.y			Beschrieb								*)
(****************************************************************************)
VAR_INPUT
    (* spezifische Eingänge *)

END_VAR
VAR_OUTPUT
    (* spezifische Ausgänge *)

END_VAR
VAR
    (* Bausteine *)
    fb_Measure : FB_ABL_140_Measure;

    fb_stat : FB_AUT_Statistics;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Timer *)
(*******************************************************************)

(*******************************************************************)
(* Flanken / Merker *)
(*******************************************************************)
//MANU CYCLE
IF (enIN_State = StateMANU) AND xIN_ManuCycle THEN
    xManuCycle := TRUE;
END_IF;

IF (enIN_State <> StateMANU) OR xOUT_Done THEN
    xManuCycle := FALSE;
END_IF

//NEXT STEP
xNextStep := (enIN_State > StateSTEP) OR
             ((enIN_State = StateSTEP) AND xIN_Step) OR
             ((enIN_State = StateMANU) AND xManuCycle);

//RESET
xReset := (enIN_State < StateREADY) AND (enIN_State <> StateINIT) AND NOT xManuCycle;

(*******************************************************************)
(* Bausteinaufrufe Abläufe *)
(*******************************************************************)

xRelease := MAIN.MoverMan.IsProcessUsed(THIS^);

fb_Measure(xIN_Reset       := xReset,
           xIN_Init        := xIN_Init,
           xIN_Quit        := xIN_Quit,
           xIN_Start       := enIN_State >= enState.StateLEER AND xRelease,
           xIN_Sperre      := NOT xIN_On,
           xIN_NextStep    := xNextStep,
           xIN_AlarmAktiv  := xIN_AlarmAktiv,
           xIN_DryCycle    := xIN_DryCycle,
           xIN_RestartCYCL := enIN_State >= enState.StateLEER,
           enIN_State      := enIN_State,
           tIN_Timeout     := tIN_Timeout,
           pxFG_Freigabe   := ADR(xRelease),
           Mover           := THIS^.Mover);

fb_stat(xIN_Enable  := enState.StateAUTO = enIN_State,
        xIN_Waiting := fb_Measure.xOUT_Wait,
        xIN_Running := (fb_Measure.iOUT_Step >= ST140_Measure_e.START) AND
                       (fb_Measure.iOUT_Step <= ST140_Measure_e.DONE),
        // Since we use a mover system, a cycle is done when we are waiting on a mover
        xIN_Done := fb_Measure.iOUT_Step = ST140_Measure_e.waitOnMover);

(*******************************************************************)
(* Mover reset flags *)
(*******************************************************************)

(*******************************************************************)
(* OUTPUT *)
(*******************************************************************)
xOUT_InitDone := fb_Measure.xOUT_InitDone;
xOUT_Ready    := fb_Measure.xOUT_Ready;
xOUT_Done     := fb_Measure.xOUT_Done;
xOUT_ErrFlag  := fb_Measure.xOUT_ErrFlag;
xOUT_Wait     := fb_Measure.xOUT_Wait;
xOUT_AlarmST  := xOUT_ErrFlag;

(*******************************************************************)
(* Bausteinaufruf Error Station *)
(*******************************************************************)
// POU_ERR_VORLAGE(xIN_QUIT:=xIN_Quit , pstrArIN_ALARM:=ADR(HMI.strArALARM[1]));
]]></ST>
    </Implementation>
    <Property Name="iCompletionPC" Id="{dd467b5e-e5e2-4ebd-9c80-0c080b3207f7}">
      <Declaration><![CDATA[(* % of completion of the process *)
PROPERTY iCompletionPC : INT
]]></Declaration>
      <Get Name="Get" Id="{8db43e4b-91d2-4382-bbac-6d5eca4ebb18}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iCompletionPC := THIS^.fb_Measure.iOUT_ProcessCompletion;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ProcessExecution" Id="{a2dd3edb-082b-4dd4-b929-042ab0faae70}">
      <Declaration><![CDATA[PROPERTY ProcessExecution : ProcessExecution_e]]></Declaration>
      <Get Name="Get" Id="{926ff66c-80b2-4019-8e38-c790b73bb361}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessExecution := THIS^._ProcessExecution;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d91c7029-cdd2-4c63-a646-80d337b30696}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._ProcessExecution := ProcessExecution;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xBusy" Id="{fa7b9acf-77d7-4703-9b62-9928c4d9294f}">
      <Declaration><![CDATA[PROPERTY xBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{5ef03455-4074-4163-9f8f-725e120501e2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xBusy := THIS^.fb_Measure.xOUT_Busy;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5d75f20d-8d4a-4112-ae6e-9d22bd0e9b18}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xDone" Id="{44bd8c8c-24dc-4756-9384-c98760dd892b}">
      <Declaration><![CDATA[PROPERTY xDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{4f1c4da4-c4bd-40ae-b1c3-24d01a7d244d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xDone := THIS^.fb_Measure.xOUT_Ready OR THIS^.fb_Measure.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverPathFree" Id="{e5473a74-874a-4720-ab76-e3020920437a}">
      <Declaration><![CDATA[PROPERTY xMoverPathFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{118019a3-0683-41e8-86c3-6b65fc9bfbb3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverPathFree := THIS^.fb_Measure.xOUT_MoverFree OR THIS^.fb_Measure.xOUT_Ready OR THIS^.fb_Measure.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverShouldLeave" Id="{00fc1311-c71b-470a-b30b-be3d4a56a97f}">
      <Declaration><![CDATA[PROPERTY xMoverShouldLeave : BOOL]]></Declaration>
      <Get Name="Get" Id="{fa4f73e1-0dd7-4eb7-9b9b-e3e6cfa9d84d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverShouldLeave := THIS^.fb_Measure.iOUT_Step = ST140_Measure_e.SYNC_MOVER_LEAVE;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>