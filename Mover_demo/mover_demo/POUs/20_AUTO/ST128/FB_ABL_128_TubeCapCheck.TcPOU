<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_128_TubeCapCheck" Id="{7b5b81cc-ae15-43e8-a24a-87bbab5bdefa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_128_TubeCapCheck
(****************************************************************************************)
(*	TITEL				laden kristall- Modul	    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP: END: LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    Mover : REFERENCE TO FB_Mover;
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;                 // Error Flag 
    xOUT_Busy     : BOOL;                 // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;                 // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;                 // Ready to begin: should be the same state as done	
    xOUT_Timeout  : BOOL;                 // Timeout FB 
    xOUT_InitDone : BOOL;                 // initialisierung fertig
    xOUT_Wait     : BOOL;                 // Wartet auf Bedingung
    iOUT_Step     : ST128_TubeCapCheck_e; // Aktueller Schritt 
    sOUT_Step     : STRING;               // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;                 // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion: express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move

END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST128_TubeCapCheck_e; // Merker letzter Schritt 
    iPreStep  : ST128_TubeCapCheck_e; // Schritt zurück nach Alarm 
    iAktStep  : ST128_TubeCapCheck_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)
    ton_WaitInPosMin : TON;  // protect the inpos flag to come to early
    capFoundRight    : BOOL; // TRUE when all measured level are OK
    capFoundLeft     : BOOL; // TRUE when all measured level are OK

    visu_shuttle_x_position : LREAL; // position of the shuttle used in visu

END_VAR
VAR CONSTANT
    TUBE_CAP_CHECK_SIMULATION : BOOL := FALSE; // Set to TRUE to simulate this part of the program
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST128_TubeCapCheck_e.RESET;
    iOUT_Step := ST128_TubeCapCheck_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := ST128_TubeCapCheck_e.READY; // iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

ton_WaitInPosMin(IN := __ISVALIDREF(Mover) AND_THEN Mover.IsInStationPos(), PT := T#100MS);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
IF (iOUT_Step = ST128_TubeCapCheck_e.Wait_move_and_check_tube_cap_right OR
   iOUT_Step = ST128_TubeCapCheck_e.Move_shuttle_relative_right) AND
   IO_BOX.I2000_ST128_filterhut_vorhanden THEN
    capFoundRight := TRUE;
END_IF

IF (iOUT_Step = ST128_TubeCapCheck_e.Wait_move_and_check_tube_cap_left OR
   iOUT_Step = ST128_TubeCapCheck_e.Move_shuttle_relative_left) AND
   IO_BOX.I2000_ST128_filterhut_vorhanden THEN
    capFoundLeft := TRUE;
END_IF

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0) OR (ST128_TubeCapCheck_e.ERROR = iOUT_Step);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST128_TubeCapCheck_e.READY) AND (iOUT_Step < ST128_TubeCapCheck_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST128_TubeCapCheck_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST128_TubeCapCheck_e.READY);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST128_TubeCapCheck_e.READY) OR
                 (iOUT_Step = ST128_TubeCapCheck_e.DONE);

// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST128_TubeCapCheck_e.DONE) OR
             (iOUT_Step = ST128_TubeCapCheck_e.READY) OR
             (iOUT_Step = ST128_TubeCapCheck_e.START) OR
             (iOUT_Step = ST128_TubeCapCheck_e.waitOnMover) OR
             (iOUT_Step = ST128_TubeCapCheck_e.SYNC_MOVER_LEAVE);

xOUT_MoverFree :=
    NOT (iOUT_Step >= ST128_TubeCapCheck_e.MOVER_NEEDED_OP AND iOUT_Step < ST128_TubeCapCheck_e.MOVER_FREE_OP);

iOUT_ProcessCompletion := F_GetPercent_2(iOUT_Step,
                                         ST128_TubeCapCheck_e.waitOnMover,
                                         ST128_TubeCapCheck_e.DONE,
                                         ST128_TubeCapCheck_e.waitOnMover,
                                         ST128_TubeCapCheck_e.DONE);

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST128_TubeCapCheck_e.RESET;
    iOUT_Step := ST128_TubeCapCheck_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

IF __ISVALIDREF(Mover) THEN
    visu_shuttle_x_position := Mover.MovingProcessOffset;
ELSE
    visu_shuttle_x_position := 0.0;
END_IF

IF 0 = bOUT_Error THEN
    // put error conditions here
ELSIF iOUT_Step < ST128_TubeCapCheck_e.ERROR THEN
    iOUT_Step := ST128_TubeCapCheck_e.ERROR;
END_IF

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST128_TubeCapCheck_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST128_TubeCapCheck_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST128_TubeCapCheck_e.INIT;
    END_IF;

(***** INIT *****)
ST128_TubeCapCheck_e.INIT: (* Grundstellung ? *)
    iOUT_Step := ST128_TubeCapCheck_e.READY;

(***** READY / INIT DONE *****)
ST128_TubeCapCheck_e.READY: (* Start AUTO:END:LEER:STEP *)
    IF xIN_Start THEN       //IF rtSTART.Q THEN
        iOUT_Step := ST128_TubeCapCheck_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST128_TubeCapCheck_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step     := ST128_TubeCapCheck_e.waitOnMover;
        capFoundRight := FALSE;
        capFoundLeft  := FALSE;
    END_IF;

ST128_TubeCapCheck_e.waitOnMover:
    IF xIN_NextStep AND __ISVALIDREF(Mover) OR HMI.bArForceCyclusState[StationList_e.ST128] THEN
        IF Mover.GetLastStationDone() >= INT#128 THEN
            iOUT_Step := ST128_TubeCapCheck_e.SYNC_MOVER_LEAVE;
		ELSIF Mover.GetLastStationDone() < INT#125 THEN
            iOUT_Step := ST128_TubeCapCheck_e.SYNC_MOVER_LEAVE;
        ELSE
            iOUT_Step := ST128_TubeCapCheck_e.Move_shuttle_relative_right;
        END_IF
    END_IF

ST128_TubeCapCheck_e.Move_shuttle_relative_right:
    IF __ISVALIDREF(Mover) THEN
        IF Mover.MoveRelativeInsideStation(40.0) THEN
            iOUT_Step := ST128_TubeCapCheck_e.Wait_move_and_check_tube_cap_right;
        END_IF
    ELSE
        bOUT_Error := 10;
    END_IF

ST128_TubeCapCheck_e.Wait_move_and_check_tube_cap_right:
    IF xIN_NextStep AND __ISVALIDREF(Mover) AND_THEN ton_WaitInPosMin.Q THEN
        IF _20_AUTO.recipe.st128.xIsTypeMiniOrSmart THEN
            iOUT_Step := ST128_TubeCapCheck_e.Move_shuttle_to_pos_left;
        ELSE
            iOUT_Step := ST128_TubeCapCheck_e.Save_result_in_mover;
        END_IF
    END_IF

ST128_TubeCapCheck_e.Move_shuttle_to_pos_left:
    IF __ISVALIDREF(Mover) THEN
        IF Mover.MoveRelativeInsideStation(60.0) THEN
            iOUT_Step := ST128_TubeCapCheck_e.Wait_move_done_pos_left;
        END_IF
    ELSE
        bOUT_Error := 11;
    END_IF

ST128_TubeCapCheck_e.Wait_move_done_pos_left:
    IF xIN_NextStep AND __ISVALIDREF(Mover) AND_THEN ton_WaitInPosMin.Q THEN
        iOUT_Step := ST128_TubeCapCheck_e.Move_shuttle_relative_left;
    END_IF

ST128_TubeCapCheck_e.Move_shuttle_relative_left:
    IF __ISVALIDREF(Mover) THEN
        IF Mover.MoveRelativeInsideStation(40.0) THEN
            iOUT_Step := ST128_TubeCapCheck_e.Wait_move_and_check_tube_cap_left;
        END_IF
    ELSE
        bOUT_Error := 12;
    END_IF

ST128_TubeCapCheck_e.Wait_move_and_check_tube_cap_left:
    IF xIN_NextStep AND __ISVALIDREF(Mover) AND_THEN ton_WaitInPosMin.Q THEN
        iOUT_Step := ST128_TubeCapCheck_e.Save_result_in_mover;
    END_IF

ST128_TubeCapCheck_e.Save_result_in_mover:
    IF (NOT capFoundRight OR
       (_20_AUTO.recipe.st128.xIsTypeMiniOrSmart AND NOT capFoundLeft)) AND
       NOT (TUBE_CAP_CHECK_SIMULATION AND CONST.USE_SIMULATION) THEN
        iOUT_Step := ST128_TubeCapCheck_e.ERROR;
        IF __ISVALIDREF(Mover) THEN
            IF NOT Mover.SetLastStation(-128) THEN
                ASSERT(0);
            END_IF
        END_IF

        bOUT_Error := 1;
    ELSE
        iOUT_Step := ST128_TubeCapCheck_e.SYNC_MOVER_LEAVE;
        IF __ISVALIDREF(Mover) THEN
            IF NOT Mover.SetLastStation(128) THEN
                ASSERT(0);
            END_IF
        END_IF
    END_IF

ST128_TubeCapCheck_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST128_TubeCapCheck_e.DONE;
    END_IF

(***** DONE *****)
ST128_TubeCapCheck_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST128_TubeCapCheck_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST128_TubeCapCheck_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST128_TubeCapCheck_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST128_TubeCapCheck_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>