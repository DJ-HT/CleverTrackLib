<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_175" Id="{fc095453-4dec-44b1-ae0d-154ee4387382}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_175
(****************************************************************************************)
(*	TITEL				laden kristall- Modul	    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    Mover : REFERENCE TO FB_Mover;

END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;          // Error Flag 
    xOUT_Busy     : BOOL;          // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;          // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;          // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;          // Timeout FB 
    xOUT_InitDone : BOOL;          // initialisierung fertig
    xOUT_Wait     : BOOL;          // Wartet auf Bedingung
    iOUT_Step     : ST175_LASER_e; // Aktueller Schritt 
    sOUT_Step     : STRING;        // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;          // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion, express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move
END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST175_LASER_e; // Merker letzter Schritt 
    iPreStep  : ST175_LASER_e; // Schritt zurück nach Alarm 
    iAktStep  : ST175_LASER_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)
	fb_trumpf_laser : FB_Laser_ABL;
	
    fb_handling  : FB_ZylMo2El_V2_1;
    fb_doorEntry : FB_ZylMo2El_V2_1;
    fb_doorExit  : FB_ZylMo2El_V2_1;

    simu_handling  : FB_Simu_Zyl2Pos;
    simu_doorEntry : FB_Simu_Zyl2Pos;
    simu_doorExit  : FB_Simu_Zyl2Pos;

    (* Spezial *)
    xLASER_Result_OK : BOOL;
    xLASER_First_mark : BOOL := FALSE;

END_VAR
VAR CONSTANT
    LASER_SIMULATION : BOOL := TRUE; // Set to TRUE to simulate this part of the program
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST175_LASER_e.RESET;
    iOUT_Step := ST175_LASER_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := ST175_LASER_e.INIT;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
fb_trumpf_laser(xIN_Start    := ST175_LASER_e.LASER_start = iOUT_Step,
                sIN_FileName := _20_AUTO.recipe.st175.file_name);

// pneumatics
fb_handling(xIN_Reset    := xIN_Reset OR (ST175_LASER_e.RESET = iOUT_Step),
            xIN_Quit     := xIN_Quit,
            xIN_Manu     := enState.StateMANU = enIN_State,
            pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST175][1]),
            xIN_GS       := simu_handling.xOUT_inGS,
            xIN_AS       := simu_handling.xOUT_inAS,
            xIN_FREE     := TRUE,
            xINtoGS      := (ST175_LASER_e.Init_pneumatics = iOUT_Step) OR
                            (ST175_LASER_e.handling_up = iOUT_Step),
            xINtoAS   := ST175_LASER_e.handling_down = iOUT_Step,
            tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                          [ST175_Cylinders_e.Niederhalter].toAS_alarm_time),
            tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                          [ST175_Cylinders_e.Niederhalter].toGS_alarm_time),
            tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                           [ST175_Cylinders_e.Niederhalter].toAS_wait_time),
            tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                           [ST175_Cylinders_e.Niederhalter].toGS_wait_time));

simu_handling(xIN_Enable := TRUE, //LASER_SIMULATION AND CONST.USE_SIMULATION,
              xIN_inGS   := IO_BOX.I9300_ST175_wegmesssensor < 10,
              xIN_inAS   := IO_BOX.I9300_ST175_wegmesssensor > 200,
              xIN_valve  := fb_handling.xOUT_VALVE,
              tIN_GS_ms  := 200,  // ms
              tIN_AS_ms  := 200); // ms

fb_doorEntry(xIN_Reset    := xIN_Reset OR (ST175_LASER_e.RESET = iOUT_Step),
             xIN_Quit     := xIN_Quit,
             xIN_Manu     := enState.StateMANU = enIN_State,
             pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST175][2]),
             xIN_GS       := simu_doorEntry.xOUT_inGS,
             xIN_AS       := simu_doorEntry.xOUT_inAS,
             xIN_FREE     := TRUE,
             xINtoGS      := (ST175_LASER_e.Init_pneumatics = iOUT_Step) OR
                             (ST175_LASER_e.open_doors = iOUT_Step),
             xINtoAS   := ST175_LASER_e.close_doors = iOUT_Step,
             tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                           [ST175_Cylinders_e.Door_entry].toAS_alarm_time),
             tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                           [ST175_Cylinders_e.Door_entry].toGS_alarm_time),
             tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                            [ST175_Cylinders_e.Door_entry].toAS_wait_time),
             tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                            [ST175_Cylinders_e.Door_entry].toGS_wait_time));

simu_doorEntry(xIN_Enable := TRUE,  //LASER_SIMULATION AND CONST.USE_SIMULATION,
               xIN_inGS   := FALSE, // no sensor here
               xIN_inAS   := FALSE, // no sensor here
               xIN_valve  := fb_doorEntry.xOUT_VALVE,
               tIN_GS_ms  := 400,  // ms
               tIN_AS_ms  := 400); // ms

fb_doorExit(xIN_Reset    := xIN_Reset OR (ST175_LASER_e.RESET = iOUT_Step),
            xIN_Quit     := xIN_Quit,
            xIN_Manu     := enState.StateMANU = enIN_State,
            pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST175][3]),
            xIN_GS       := simu_doorExit.xOUT_inGS,
            xIN_AS       := simu_doorExit.xOUT_inAS,
            xIN_FREE     := TRUE,
            xINtoGS      := (ST175_LASER_e.Init_pneumatics = iOUT_Step) OR
                            (ST175_LASER_e.open_doors = iOUT_Step),
            xINtoAS   := ST175_LASER_e.close_doors = iOUT_Step,
            tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                          [ST175_Cylinders_e.Door_exit].toAS_alarm_time),
            tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                          [ST175_Cylinders_e.Door_exit].toGS_alarm_time),
            tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                           [ST175_Cylinders_e.Door_exit].toAS_wait_time),
            tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST175]
                                           [ST175_Cylinders_e.Door_exit].toGS_wait_time));

simu_doorExit(xIN_Enable := TRUE,  //LASER_SIMULATION AND CONST.USE_SIMULATION,
              xIN_inGS   := FALSE, // no sensor here
              xIN_inAS   := FALSE, // no sensor here
              xIN_valve  := fb_doorExit.xOUT_VALVE,
              tIN_GS_ms  := 400,  // ms
              tIN_AS_ms  := 400); // ms

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST175_LASER_e.READY) AND (iOUT_Step < ST175_LASER_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST175_LASER_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST175_LASER_e.READY) OR (iOUT_Step = ST175_LASER_e.waitOnMover);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST175_LASER_e.READY) OR (iOUT_Step = ST175_LASER_e.waitOnMover);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST175_LASER_e.DONE);

xOUT_MoverFree := fb_handling.xOUT_inGS AND fb_doorEntry.xOUT_inGS AND fb_doorExit.xOUT_inGS;

iOUT_ProcessCompletion := F_GetPercent_2(iAktStep,
                                         iAktStep,
                                         iAktStep,
                                         ST175_LASER_e.close_doors,
                                         ST175_LASER_e.SYNC_MOVER_LEAVE);

(* BIG CHANGE IN OUTPUT, PLEASE UPDATE *)
IO_BOX.Q5300_14_ST175_niederhalter :=
    fb_doorEntry.xOUT_VALVE AND NOT (LASER_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q5301_14_ST175_kabinentur_einlaufseite :=
    fb_doorExit.xOUT_VALVE AND NOT (LASER_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q5302_14_ST175_kabinentur_auflaufseite :=
    fb_handling.xOUT_VALVE AND NOT (LASER_SIMULATION AND CONST.USE_SIMULATION);

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST175_LASER_e.RESET;
    iOUT_Step := ST175_LASER_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

IF 0 = bOUT_Error THEN
    IF fb_handling.xOUT_ErrFlag THEN
        bOUT_Error := 11;
    ELSIF fb_doorEntry.xOUT_ErrFlag THEN
        bOUT_Error := 12;
    ELSIF fb_doorExit.xOUT_ErrFlag THEN
        bOUT_Error := 13;
    ELSIF fb_trumpf_laser.xOUT_ERROR THEN
        bOUT_Error := 20;
    END_IF
ELSIF iOUT_Step < ST175_LASER_e.ERROR THEN
    iOUT_Step := ST175_LASER_e.ERROR;
END_IF

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST175_LASER_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST175_LASER_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST175_LASER_e.INIT;
    END_IF;

(***** INIT *****)
ST175_LASER_e.INIT: (* Grundstellung ? *)
    iOUT_Step := ST175_LASER_e.Init_pneumatics;

ST175_LASER_e.Init_pneumatics:
    IF fb_handling.xOUT_inGS AND fb_doorEntry.xOUT_inGS AND fb_doorExit.xOUT_inGS THEN
        iOUT_Step := ST175_LASER_e.READY;
    END_IF

(***** READY / INIT DONE *****)
ST175_LASER_e.READY:  (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST175_LASER_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST175_LASER_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step        := ST175_LASER_e.waitOnMover;
        xLASER_Result_OK := FALSE;
    END_IF;

ST175_LASER_e.waitOnMover: (*  *)
    IF xIN_NextStep AND __ISVALIDREF(Mover) THEN
        IF (Mover.GetLastStationDone() >= 175) THEN
            iOUT_Step := ST175_LASER_e.SYNC_MOVER_LEAVE;
        ELSE
            iOUT_Step := ST175_LASER_e.close_doors;
        END_IF
    END_IF;

ST175_LASER_e.close_doors:
    IF fb_doorEntry.xOUT_inAS AND fb_doorExit.xOUT_inAS THEN
        xLASER_First_mark := FALSE;
        iOUT_Step         := ST175_LASER_e.handling_down;
    END_IF

ST175_LASER_e.handling_down:
    IF fb_handling.xOUT_inAS THEN
        IF LASER_SIMULATION AND CONST.USE_SIMULATION THEN
            iOUT_Step := ST175_LASER_e.handling_up;
        ELSE
            iOUT_Step := ST175_LASER_e.LASER_start;
        END_IF
    END_IF

ST175_LASER_e.LASER_start:
    IF fb_trumpf_laser.xOUT_BUSY THEN
        iOUT_Step := ST175_LASER_e.LASER_wait_on_finish;
    END_IF

ST175_LASER_e.LASER_wait_on_finish:
    IF fb_trumpf_laser.xOUT_DONE OR NOT fb_trumpf_laser.xOUT_BUSY THEN
        iOUT_Step := ST175_LASER_e.handling_up;
    END_IF

ST175_LASER_e.handling_up:
    IF fb_handling.xOUT_inGS THEN
        IF _20_AUTO.recipe.st175.isTypeSmartOrMini AND xLASER_First_mark THEN
            iOUT_Step := ST175_LASER_e.open_doors;
        ELSE
            iOUT_Step := ST175_LASER_e.move_shuttle_to_left_piece;
        END_IF
    END_IF

ST175_LASER_e.move_shuttle_to_left_piece:
    IF xIN_NextStep AND __ISVALIDREF(Mover) AND_THEN Mover.MoveRelativeInsideStation(118.0) THEN
        iOUT_Step := ST175_LASER_e.wait_shuttle_in_place;
    END_IF

ST175_LASER_e.wait_shuttle_in_place:
    IF xIN_NextStep AND __ISVALIDREF(Mover) AND_THEN Mover.IsInStationPos() THEN
        xLASER_First_mark := TRUE;
        iOUT_Step         := ST175_LASER_e.handling_down;
    END_IF

ST175_LASER_e.open_doors:
    IF fb_doorEntry.xOUT_inGS AND fb_doorExit.xOUT_inGS THEN
        iOUT_Step := ST175_LASER_e.SYNC_MOVER_LEAVE;

        IF __ISVALIDREF(Mover) AND NOT xLASER_Result_OK THEN
            IF NOT Mover.SetLastStation(-175) THEN
                ASSERT(0);
            END_IF
        ELSIF __ISVALIDREF(Mover) AND xLASER_Result_OK THEN
            IF NOT Mover.SetLastStation(175) THEN
                ASSERT(0);
            END_IF
        END_IF
    END_IF

ST175_LASER_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST175_LASER_e.DONE;
    END_IF

(***** DONE *****)
ST175_LASER_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST175_LASER_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST175_LASER_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST175_LASER_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST175_LASER_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>