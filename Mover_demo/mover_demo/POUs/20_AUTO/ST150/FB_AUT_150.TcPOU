<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_AUT_150" Id="{c55627c1-8629-4a9e-88bd-41cc9782e576}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AUT_150 EXTENDS FB_AUT_ABSTRACT
(****************************************************************************)
(*	POU_AUT_zxx			Bausteinaufrufe Station	zxx							*)
(*	Status				ungetestet											*)
(*  Version:			1.0													*)
(*	Beschrieb:																*)
(*																			*)
(*	Abläufe:			FB_ABLzxxA		Hauptablauf							*)
(*																			*)
(*																			*)
(* 	25.09.2019/Dj															*)
(****************************************************************************)
(*	dd.mm.yyyy   KZ    x.y			Beschrieb								*)
(****************************************************************************)
VAR_INPUT
    (* spezifische Eingänge *)

END_VAR
VAR_OUTPUT
    (* spezifische Ausgänge *)

END_VAR
VAR
    (* Bausteine *)
    fb_Pnp    : FB_ABL_145_Pnp;
    fb_Feeder : FB_ABL_145_Feeder;

END_VAR

VAR CONSTANT
    ROT_TABLE_FREE_MAX_Y : REAL := 200.0; // If Y and Z axis is more than this value, the feeder cannot move
    ROT_TABLE_FREE_MAX_Z : REAL := 200.0; // If Z and Y axis is more than this value, the feeder cannot move

    PNP_VERTICAL_MAX_Z : REAL := 50.0; // If Z axis is more than this value, the horizontal axis of the pnp cannot move
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Timer *)
(*******************************************************************)

(*******************************************************************)
(* Flanken / Merker *)
(*******************************************************************)
//MANU CYCLE
IF (enIN_State = StateMANU) AND xIN_ManuCycle THEN
    xManuCycle := TRUE;
END_IF;

IF (enIN_State <> StateMANU) OR xOUT_Done THEN
    xManuCycle := FALSE;
END_IF

//NEXT STEP
xNextStep := (enIN_State > StateSTEP) OR
             ((enIN_State = StateSTEP) AND xIN_Step) OR
             ((enIN_State = StateMANU) AND xManuCycle);

//RESET
xReset := (enIN_State < StateREADY) AND (enIN_State <> StateINIT) AND NOT xManuCycle;

(*******************************************************************)
(* Bausteinaufrufe Abläufe *)
(*******************************************************************)

fb_Pnp(xIN_Reset          := xReset,
       xIN_Init           := xIN_Init,
       xIN_Quit           := xIN_Quit,
       xIN_Start          := enIN_State = enState.StateAUTO, //AND _FB_ABL_100A.xOUT_Done AND _FB_ABL_100A.xOUT_Ready,
       xIN_Sperre         := NOT xIN_On,
       xIN_NextStep       := xNextStep,
       xIN_AlarmAktiv     := xIN_AlarmAktiv,
       xIN_DryCycle       := xIN_DryCycle,
       xIN_RestartCYCL    := enIN_State = enState.StateAUTO, // only restart when the mover has move out
       enIN_State         := enIN_State,
       tIN_Timeout        := tIN_Timeout,
       pxFG_Freigabe      := ADR(xDummy),
       Mover              := THIS^.Mover,
       xIN_PceReadyToPick := fb_Feeder.xOUT_Done,
       xIN_HorAxisFree    := ST145_Axis.axis145_02Z.rActPos < ROT_TABLE_FREE_MAX_Y);

fb_Feeder(xIN_Reset       := xReset,
          xIN_Init        := xIN_Init,
          xIN_Quit        := xIN_Quit,
          xIN_Start       := enIN_State = enState.StateAUTO, //AND _FB_ABL_100A.xOUT_Done AND _FB_ABL_100A.xOUT_Ready, 
          xIN_Sperre      := NOT xIN_On,
          xIN_NextStep    := xNextStep,
          xIN_AlarmAktiv  := xIN_AlarmAktiv,
          xIN_DryCycle    := xIN_DryCycle,
          xIN_RestartCYCL := enIN_State = enState.StateAUTO, // only restart when the mover has move out
          enIN_State      := enIN_State,
          tIN_Timeout     := tIN_Timeout,
          pxFG_Freigabe   := ADR(xDummy),
          // special
          xIN_PickPiece            := fb_Pnp.xOUT_PickPiece,
          xIN_RotTableBlockedByPnp := (ST145_Axis.axis145_01Y.rActPos > ROT_TABLE_FREE_MAX_Y) AND
                                      (ST145_Axis.axis145_02Z.rActPos > ROT_TABLE_FREE_MAX_Z));

(*******************************************************************)
(* Mover reset flags *)
(*******************************************************************)

(*******************************************************************)
(* OUTPUT *)
(*******************************************************************)
xOUT_InitDone := fb_Pnp.xOUT_InitDone AND fb_Feeder.xOUT_InitDone;
xOUT_Ready    := fb_Pnp.xOUT_Ready AND fb_Feeder.xOUT_Ready;
xOUT_Done     := fb_Pnp.xOUT_Done;
xOUT_ErrFlag  := fb_Pnp.xOUT_ErrFlag;
xOUT_Wait     := fb_Pnp.xOUT_Wait;
xOUT_AlarmST  := xOUT_ErrFlag;

(*******************************************************************)
(* Bausteinaufruf Error Station *)
(*******************************************************************)
// POU_ERR_VORLAGE(xIN_QUIT:=xIN_Quit , pstrArIN_ALARM:=ADR(HMI.strArALARM[1]));
]]></ST>
    </Implementation>
    <Method Name="GiveMover" Id="{cfb1490d-9dac-48fd-8951-3e7640d85d90}">
      <Declaration><![CDATA[METHOD GiveMover : IProcessSampleMover
VAR_INPUT
	mover : REFERENCE TO FB_Mover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(mover) THEN
    THIS^.Mover                       REF= mover;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="iCompletionPC" Id="{2cdcc4b8-0b2d-483e-9b51-948b5cf5c886}">
      <Declaration><![CDATA[(* % of completion of the process *)
PROPERTY iCompletionPC : INT
]]></Declaration>
      <Get Name="Get" Id="{21053f65-b7c6-469c-aa63-ae847640ece5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iCompletionPC := THIS^.fb_Pnp.iOUT_ProcessCompletion;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ProcessExecution" Id="{c9e149ce-bf12-4302-8bc9-64dd5ac57297}">
      <Declaration><![CDATA[PROPERTY ProcessExecution : ProcessExecution_e]]></Declaration>
      <Get Name="Get" Id="{8858d7ef-1d8c-47a9-991f-0dca391b0be5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessExecution := THIS^._ProcessExecution;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9b289ee5-ed33-4246-bd0f-512fd18393cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._ProcessExecution := ProcessExecution;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TakeMover" Id="{c9149f44-5e76-43c3-a37a-5815e0a45c8b}">
      <Declaration><![CDATA[METHOD TakeMover : IProcessSampleMover
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Mover REF= 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="xBusy" Id="{f12f3bb8-8a37-422b-83ea-11c1f0370633}">
      <Declaration><![CDATA[PROPERTY xBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{28a9d69d-9b19-4dc0-87ae-54ef35fe57dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xBusy := THIS^.fb_Pnp.xOUT_Busy;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e271decc-f02c-4db9-8a3c-661efff99a7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xDone" Id="{901747fc-0200-4e2e-b12c-b32613138a9b}">
      <Declaration><![CDATA[PROPERTY xDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{aef701fb-74df-4a0d-8948-36430a06ec9c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xDone := THIS^.fb_Pnp.xOUT_Ready OR THIS^.fb_Pnp.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverPathFree" Id="{4bbaca45-4177-4146-bb7a-8f1c6a38cfcb}">
      <Declaration><![CDATA[PROPERTY xMoverPathFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{0f638c19-7478-4553-8736-61780a6b1227}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverPathFree := THIS^.fb_Pnp.xOUT_MoverFree OR THIS^.fb_Pnp.xOUT_Ready OR THIS^.fb_Pnp.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverShouldLeave" Id="{94fc1794-48b6-454e-87af-2e52310838f3}">
      <Declaration><![CDATA[PROPERTY xMoverShouldLeave : BOOL]]></Declaration>
      <Get Name="Get" Id="{6b0ec71f-af71-4ac8-913d-aab6817e5f3c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverShouldLeave := THIS^.fb_Pnp.iOUT_Step = ST145_Pnp_e.SYNC_MOVER_LEAVE;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>