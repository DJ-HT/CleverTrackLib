<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_AUT_150" Id="{c55627c1-8629-4a9e-88bd-41cc9782e576}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AUT_150 EXTENDS FB_AUT_ABSTRACT
(****************************************************************************)
(*	POU_AUT_zxx			Bausteinaufrufe Station	zxx							*)
(*	Status				ungetestet											*)
(*  Version:			1.0													*)
(*	Beschrieb:																*)
(*																			*)
(*	Abläufe:			FB_ABLzxxA		Hauptablauf							*)
(*																			*)
(*																			*)
(* 	25.09.2019/Dj															*)
(****************************************************************************)
(*	dd.mm.yyyy   KZ    x.y			Beschrieb								*)
(****************************************************************************)
VAR_INPUT
    (* spezifische Eingänge *)

END_VAR
VAR_OUTPUT
    (* spezifische Ausgänge *)

END_VAR
VAR
    (* Bausteine *)
    fb_Uss : FB_ABL_150;

    fb_stat : FB_AUT_Statistics;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Timer *)
(*******************************************************************)

(*******************************************************************)
(* Flanken / Merker *)
(*******************************************************************)
//MANU CYCLE
IF (enIN_State = StateMANU) AND xIN_ManuCycle THEN
    xManuCycle := TRUE;
END_IF;

IF (enIN_State <> StateMANU) OR xOUT_Done THEN
    xManuCycle := FALSE;
END_IF

//NEXT STEP
xNextStep := (enIN_State > StateSTEP) OR
             ((enIN_State = StateSTEP) AND xIN_Step) OR
             ((enIN_State = StateMANU) AND xManuCycle);

//RESET
xReset := (enIN_State < StateREADY) AND (enIN_State <> StateINIT) AND NOT xManuCycle;

(*******************************************************************)
(* Bausteinaufrufe Abläufe *)
(*******************************************************************)

xRelease := MAIN.MoverMan.IsProcessUsed(THIS^);

fb_Uss.xIN_welding_bits.Bereit       := IN.I020_ultraschall_bereit_150_20;
fb_Uss.xIN_welding_bits.Fehler       := IN.I021_ultraschall_fehler_150_20;
fb_Uss.xIN_welding_bits.US_on        := IN.I022_ultraschall_us_on_150_20;
fb_Uss.xIN_welding_bits.NullPosition := IN.I023_ultraschall_nullpos_150_20;

fb_Uss(xIN_Reset       := xReset,
       xIN_Init        := xIN_Init,
       xIN_Quit        := xIN_Quit,
       xIN_Start       := enIN_State >= enState.StateLEER AND xRelease,
       xIN_Sperre      := NOT xIN_On,
       xIN_NextStep    := xNextStep,
       xIN_AlarmAktiv  := xIN_AlarmAktiv,
       xIN_DryCycle    := xIN_DryCycle,
       xIN_RestartCYCL := enIN_State >= enState.StateLEER,
       enIN_State      := enIN_State,
       tIN_Timeout     := tIN_Timeout,
       pxFG_Freigabe   := ADR(xRelease),
       // CleverTrackLib
       Mover := THIS^.Mover,
       // hardware input
       xIN_capDetector             := IO_BOX.I2303_ST150_deckel_vohanden,
       xIN_kraftubersetzunh_zuruck := IO_BOX.I2301_ST150_kraftubersetzung_zuruck,
       xIN_kraftubersetzunh_vor    := IO_BOX.I2302_ST150_kraftubersetzung_vor,
       xIN_welding_bits            :=, // set above
       iIN_StationNumber           := 150,
       // hardware output
       xOUT_moverMaintening_valve => IO_BOX.Q0202_14_ST150_kraftubersetzung,
       xOUT_welding_bits          =>); // set below

OUT.Q020_ST150_ultraschall_start      := fb_Uss.xOUT_welding_bits.Start;
OUT.Q021_ST150_ultraschall_reset      := fb_Uss.xOUT_welding_bits.Reset;
OUT.Q022_ST150_ultraschall_data_bit_0 := fb_Uss.xOUT_welding_bits.Data_Hex1;
OUT.Q023_ST150_ultraschall_data_bit_1 := fb_Uss.xOUT_welding_bits.Data_Hex2;
OUT.Q024_ST150_ultraschall_data_bit_2 := fb_Uss.xOUT_welding_bits.Data_Hex4;
OUT.Q025_ST150_ultraschall_data_bit_3 := fb_Uss.xOUT_welding_bits.Data_Hex8;

fb_stat(xIN_Enable  := enState.StateAUTO = enIN_State,
        xIN_Waiting := fb_Uss.xOUT_Wait,
        xIN_Running := (fb_Uss.iOUT_Step >= ST150_Uss_e.START) AND
                       (fb_Uss.iOUT_Step <= ST150_Uss_e.DONE),
        // Since we use a mover system, a cycle is done when we are waiting on a mover
        xIN_Done := fb_Uss.iOUT_Step = ST150_Uss_e.waitOnMover);

(*******************************************************************)
(* Mover reset flags *)
(*******************************************************************)

(*******************************************************************)
(* OUTPUT *)
(*******************************************************************)
xOUT_InitDone := fb_Uss.xOUT_InitDone;
xOUT_Ready    := fb_Uss.xOUT_Ready;
xOUT_Done     := fb_Uss.xOUT_Done;
xOUT_ErrFlag  := fb_Uss.xOUT_ErrFlag;
xOUT_Wait     := fb_Uss.xOUT_Wait;
xOUT_AlarmST  := xOUT_ErrFlag;

(*******************************************************************)
(* Bausteinaufruf Error Station *)
(*******************************************************************)
// POU_ERR_VORLAGE(xIN_QUIT:=xIN_Quit , pstrArIN_ALARM:=ADR(HMI.strArALARM[1]));
]]></ST>
    </Implementation>
    <Property Name="iCompletionPC" Id="{2cdcc4b8-0b2d-483e-9b51-948b5cf5c886}">
      <Declaration><![CDATA[(* % of completion of the process *)
PROPERTY iCompletionPC : INT
]]></Declaration>
      <Get Name="Get" Id="{21053f65-b7c6-469c-aa63-ae847640ece5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iCompletionPC := THIS^.fb_Uss.iOUT_ProcessCompletion;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ProcessExecution" Id="{c9e149ce-bf12-4302-8bc9-64dd5ac57297}">
      <Declaration><![CDATA[PROPERTY ProcessExecution : ProcessExecution_e]]></Declaration>
      <Get Name="Get" Id="{8858d7ef-1d8c-47a9-991f-0dca391b0be5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessExecution := THIS^._ProcessExecution;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9b289ee5-ed33-4246-bd0f-512fd18393cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._ProcessExecution := ProcessExecution;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xBusy" Id="{f12f3bb8-8a37-422b-83ea-11c1f0370633}">
      <Declaration><![CDATA[PROPERTY xBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{28a9d69d-9b19-4dc0-87ae-54ef35fe57dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xBusy := THIS^.fb_Uss.xOUT_Busy;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e271decc-f02c-4db9-8a3c-661efff99a7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xDone" Id="{901747fc-0200-4e2e-b12c-b32613138a9b}">
      <Declaration><![CDATA[PROPERTY xDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{aef701fb-74df-4a0d-8948-36430a06ec9c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xDone := THIS^.fb_Uss.xOUT_Ready OR THIS^.fb_Uss.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverPathFree" Id="{4bbaca45-4177-4146-bb7a-8f1c6a38cfcb}">
      <Declaration><![CDATA[PROPERTY xMoverPathFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{0f638c19-7478-4553-8736-61780a6b1227}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverPathFree := THIS^.fb_Uss.xOUT_MoverFree OR THIS^.fb_Uss.xOUT_Ready OR THIS^.fb_Uss.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverShouldLeave" Id="{94fc1794-48b6-454e-87af-2e52310838f3}">
      <Declaration><![CDATA[PROPERTY xMoverShouldLeave : BOOL]]></Declaration>
      <Get Name="Get" Id="{6b0ec71f-af71-4ac8-913d-aab6817e5f3c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverShouldLeave := THIS^.fb_Uss.iOUT_Step = ST150_Uss_e.SYNC_MOVER_LEAVE;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>