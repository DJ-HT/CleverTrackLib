<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_AUT_155" Id="{8be72da7-e999-45a8-b1d3-1a8f8dee7e19}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AUT_155 EXTENDS FB_AUT_ABSTRACT
(****************************************************************************)
(*	POU_AUT_zxx			Bausteinaufrufe Station	zxx							*)
(*	Status				ungetestet											*)
(*  Version:			1.0													*)
(*	Beschrieb:																*)
(*																			*)
(*	Abläufe:			FB_ABLzxxA		Hauptablauf							*)
(*																			*)
(*																			*)
(* 	25.09.2019/Dj															*)
(****************************************************************************)
(*	dd.mm.yyyy   KZ    x.y			Beschrieb								*)
(****************************************************************************)
VAR_INPUT
    (* spezifische Eingänge *)

END_VAR
VAR_OUTPUT
    (* spezifische Ausgänge *)

END_VAR
VAR
    (* Bausteine *)
    fb_Uss : FB_ABL_150;

    fb_stat : FB_AUT_Statistics;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Timer *)
(*******************************************************************)

(*******************************************************************)
(* Flanken / Merker *)
(*******************************************************************)
//MANU CYCLE
IF (enIN_State = StateMANU) AND xIN_ManuCycle THEN
    xManuCycle := TRUE;
END_IF;

IF (enIN_State <> StateMANU) OR xOUT_Done THEN
    xManuCycle := FALSE;
END_IF

//NEXT STEP
xNextStep := (enIN_State > StateSTEP) OR
             ((enIN_State = StateSTEP) AND xIN_Step) OR
             ((enIN_State = StateMANU) AND xManuCycle);

//RESET
xReset := (enIN_State < StateREADY) AND (enIN_State <> StateINIT) AND NOT xManuCycle;

(*******************************************************************)
(* Bausteinaufrufe Abläufe *)
(*******************************************************************)

xRelease := MAIN.MoverMan.IsProcessUsed(THIS^);

fb_Uss.xIN_welding_bits.Bereit       := IN.I024_ultraschall_bereit_155_20;
fb_Uss.xIN_welding_bits.Fehler       := IN.I025_ultraschall_fehler_155_20;
fb_Uss.xIN_welding_bits.US_on        := IN.I026_ultraschall_us_on_155_20;
fb_Uss.xIN_welding_bits.NullPosition := IN.I027_ultraschall_nullpos_155_20;

fb_Uss(xIN_Reset       := xReset,
       xIN_Init        := xIN_Init,
       xIN_Quit        := xIN_Quit,
       xIN_Start       := enIN_State >= enState.StateLEER AND xRelease,
       xIN_Sperre      := NOT xIN_On,
       xIN_NextStep    := xNextStep,
       xIN_AlarmAktiv  := xIN_AlarmAktiv,
       xIN_DryCycle    := xIN_DryCycle,
       xIN_RestartCYCL := enIN_State >= enState.StateLEER,
       enIN_State      := enIN_State,
       tIN_Timeout     := tIN_Timeout,
       pxFG_Freigabe   := ADR(xRelease),
       // CleverTrackLib
       Mover := THIS^.Mover,
       // hardware input
       xIN_capDetector             := IO_BOX.I2306_ST155_deckel_vohanden,
       xIN_kraftubersetzunh_zuruck := IO_BOX.I2304_ST155_kraftubersetzung_zuruck,
       xIN_kraftubersetzunh_vor    := IO_BOX.I2305_ST155_kraftubersetzung_vor,
       xIN_welding_bits            :=, // set above
       iIN_StationNumber           := 155,
       sIN_errorCodeSide           := 'Right',
       // hardware output
       xOUT_moverMaintening_valve => IO_BOX.Q0203_14_ST155_kraftubersetzung,
       xOUT_welding_bits          =>); // set below

OUT.Q030_ST155_ultraschall_start      := fb_Uss.xOUT_welding_bits.Start;
OUT.Q031_ST155_ultraschall_reset      := fb_Uss.xOUT_welding_bits.Reset;
OUT.Q032_ST155_ultraschall_data_bit_0 := fb_Uss.xOUT_welding_bits.Data_Hex1;
OUT.Q033_ST155_ultraschall_data_bit_1 := fb_Uss.xOUT_welding_bits.Data_Hex2;
OUT.Q034_ST155_ultraschall_data_bit_2 := fb_Uss.xOUT_welding_bits.Data_Hex4;
OUT.Q035_ST155_ultraschall_data_bit_3 := fb_Uss.xOUT_welding_bits.Data_Hex8;

fb_stat(xIN_Enable  := enState.StateAUTO = enIN_State,
        xIN_Waiting := fb_Uss.xOUT_Wait,
        xIN_Running := (fb_Uss.iOUT_Step >= ST150_Uss_e.START) AND
                       (fb_Uss.iOUT_Step <= ST150_Uss_e.DONE),
        // Since we use a mover system, a cycle is done when we are waiting on a mover
        xIN_Done := fb_Uss.iOUT_Step = ST150_Uss_e.waitOnMover);

(*******************************************************************)
(* Mover reset flags *)
(*******************************************************************)

(*******************************************************************)
(* OUTPUT *)
(*******************************************************************)
xOUT_InitDone := fb_Uss.xOUT_InitDone;
xOUT_Ready    := fb_Uss.xOUT_Ready;
xOUT_Done     := fb_Uss.xOUT_Done;
xOUT_ErrFlag  := fb_Uss.xOUT_ErrFlag;
xOUT_Wait     := fb_Uss.xOUT_Wait;
xOUT_AlarmST  := xOUT_ErrFlag;

(*******************************************************************)
(* Bausteinaufruf Error Station *)
(*******************************************************************)
// POU_ERR_VORLAGE(xIN_QUIT:=xIN_Quit , pstrArIN_ALARM:=ADR(HMI.strArALARM[1]));
]]></ST>
    </Implementation>
    <Property Name="iCompletionPC" Id="{7bcbfe6f-3a39-4ce6-a188-81f83d67a5ee}">
      <Declaration><![CDATA[(* % of completion of the process *)
PROPERTY iCompletionPC : INT
]]></Declaration>
      <Get Name="Get" Id="{c80a7a95-48d2-44da-b585-ef39e79639a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iCompletionPC := THIS^.fb_Uss.iOUT_ProcessCompletion;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ProcessExecution" Id="{6a9b8c66-749c-4088-834c-8ab1e164464c}">
      <Declaration><![CDATA[PROPERTY ProcessExecution : ProcessExecution_e]]></Declaration>
      <Get Name="Get" Id="{4cbb1947-618f-4d8a-81f8-f418fbc09f3d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessExecution := THIS^._ProcessExecution;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{26c5bbd8-31f7-49b8-a00e-fbcb2581a963}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._ProcessExecution := ProcessExecution;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xBusy" Id="{e31a1183-855d-4f6b-ad3c-a86d341dcd18}">
      <Declaration><![CDATA[PROPERTY xBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{aa403ee1-a19d-4c7e-8bc2-174f202d8fb5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xBusy := THIS^.fb_Uss.xOUT_Busy;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{890e5157-8de6-4881-8418-3a688e7ed97a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xDone" Id="{05cc0349-0c26-419e-85fa-fcda6aa08804}">
      <Declaration><![CDATA[PROPERTY xDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{1a83d6c9-b0b9-41db-8ffa-e075d44b4195}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xDone := THIS^.fb_Uss.xOUT_Ready OR THIS^.fb_Uss.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverPathFree" Id="{e4d6d28b-86e5-4075-b1ec-bdce40502687}">
      <Declaration><![CDATA[PROPERTY xMoverPathFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{2219d0bf-5d10-449e-82dc-c79017abb629}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverPathFree := THIS^.fb_Uss.xOUT_MoverFree OR THIS^.fb_Uss.xOUT_Ready OR THIS^.fb_Uss.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverShouldLeave" Id="{723cd84a-c849-44fd-9a72-fe3e026fe397}">
      <Declaration><![CDATA[PROPERTY xMoverShouldLeave : BOOL]]></Declaration>
      <Get Name="Get" Id="{f98df206-fbda-4ff2-9808-69940d3d56fd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverShouldLeave := THIS^.fb_Uss.iOUT_Step = ST150_Uss_e.SYNC_MOVER_LEAVE;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>