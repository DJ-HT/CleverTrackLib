<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_120_Feeder" Id="{f8ada513-2635-424d-a9b6-9cc394256f95}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_120_Feeder
(****************************************************************************************)
(*	TITEL				laden Kristall modul, Feeder and rotary table                   *)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    xIN_PickPiece : BOOL; (* signal from the pick and place element
                             the number of picked signal depend on the recipe *)
    xIN_PnpGripperOpen : BOOL; // the gripper of the pnp part is open
    xIN_PnpNotOnTheWay : BOOL; // the pnp is at the track side or up enough
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;           // Error Flag 
    xOUT_Busy     : BOOL;           // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;           // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;           // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;           // Timeout FB 
    xOUT_InitDone : BOOL;           // initialisierung fertig
    xOUT_Wait     : BOOL;           // Wartet auf Bedingung
    iOUT_Step     : ST120_Feeder_e; // Aktueller Schritt 
    sOUT_Step     : STRING;         // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;           // Fehlernummer

    // Application specific
    xOUT_PceReadyToPick : BOOL; // the piece(s) is/are ready to picked
END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST120_Feeder_e; // Merker letzter Schritt 
    iPreStep  : ST120_Feeder_e; // Schritt zurück nach Alarm 
    iAktStep  : ST120_Feeder_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)

    // Application specific
    fb_feederLeft    : FB_Feeder2Sensors;
    fb_feederRight   : FB_Feeder2Sensors;
    fb_pivotLeft     : FB_ZylMo2El_V2_1;
    fb_pivotRight    : FB_ZylMo2El_V2_1;
    simu_feederLeft  : FB_Simu_Feeder;                    // simulation of a feeder
    simu_feederRight : FB_Simu_Feeder;                    // simulation of a feeder
    simu_fifo_left   : FB_Fifo(BAND_SIZE_FOR_TUBE_LEFT);  // fifo to hold a piece
    simu_fifo_right  : FB_Fifo(BAND_SIZE_FOR_TUBE_RIGHT); // fifo to hold a piece
    rtPutPiece_left  : R_TRIG;                            // trigger to add a piece
    rtPutPiece_right : R_TRIG;                            // trigger to add a piece

    simu_start_tick : UDINT; // simulation start tick, used to simulate movement

END_VAR
VAR CONSTANT
    BAND_SIZE_FOR_TUBE_LEFT  : INT := 3; // Band size, we assume that tubes pushe each other in order to move to the PNP machine
    BAND_SIZE_FOR_TUBE_RIGHT : INT := 2; // Band size, we assume that tubes pushe each other in order to move to the PNP machine
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST120_Feeder_e.RESET;
    iOUT_Step := ST120_Feeder_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)

fb_pivotLeft(xIN_Reset    := xIN_Reset OR (ST120_Feeder_e.RESET = iOUT_Step),
             xIN_Quit     := xIN_Quit,
             xIN_Manu     := enState.StateMANU = enIN_State,
             pbtIN_Button := ADR(HMI.btArManu120[1]),
             xIN_GS
                 := NOT fb_pivotLeft.xIN_AS AND NOT (ST120_Feeder_e.rotate_to_pnp = iOUT_Step), // TODO use sensor
             xIN_AS := fb_pivotLeft.xOUT_VALVE AND
                       NOT (ST120_Feeder_e.Init_pneumatics = iOUT_Step) AND
                       NOT (
                       (ST120_Feeder_e.rotate_to_feeder > iOUT_Step) AND (ST120_Feeder_e.rotate_to_pnp <= iOUT_Step)
                           ), // TODO use sensor
             xIN_FREE := xIN_PnpNotOnTheWay OR xIN_PnpGripperOpen,
             xINtoGS  := PERS.recipeList.st120.xUseVerLeft AND (ST120_Feeder_e.rotate_to_pnp = iOUT_Step),
             xINtoAS  := PERS.recipeList.st120.xUseVerLeft AND
                         (ST120_Feeder_e.rotate_to_feeder = iOUT_Step OR
                         ST120_Feeder_e.Init_pneumatics = iOUT_Step),
             tIN_ErrAS  := T#1S,
             tIN_ErrGS  := T#1S,
             tIN_WaitAS := T#0S,
             tIN_WaitGS := T#0S);

fb_pivotRight(xIN_Reset    := xIN_Reset OR (ST120_Feeder_e.RESET = iOUT_Step),
              xIN_Quit     := xIN_Quit,
              xIN_Manu     := enState.StateMANU = enIN_State,
              pbtIN_Button := ADR(HMI.btArManu120[2]),
              xIN_GS
                  := NOT fb_pivotRight.xIN_AS AND NOT (ST120_Feeder_e.rotate_to_pnp = iOUT_Step), // TODO use sensor
              xIN_AS := fb_pivotRight.xOUT_VALVE AND
                        NOT (ST120_Feeder_e.Init_pneumatics = iOUT_Step) AND
                        NOT (
                        (ST120_Feeder_e.rotate_to_feeder > iOUT_Step) AND (ST120_Feeder_e.rotate_to_pnp <= iOUT_Step)
                            ), // TODO use sensor
              xIN_FREE := xIN_PnpGripperOpen OR xIN_PnpNotOnTheWay,
              xINtoGS  := PERS.recipeList.st120.xUseVerRight AND (ST120_Feeder_e.rotate_to_pnp = iOUT_Step),
              xINtoAS  := PERS.recipeList.st120.xUseVerRight AND
                          (ST120_Feeder_e.rotate_to_feeder = iOUT_Step OR
                          ST120_Feeder_e.Init_pneumatics = iOUT_Step),
              tIN_ErrAS  := T#1S,
              tIN_ErrGS  := T#1S,
              tIN_WaitAS := T#0S,
              tIN_WaitGS := T#0S);

fb_feederLeft(xIN_Enable := (enIN_State = enState.StateAUTO OR enIN_State = enState.StateSTEP) AND
                            PERS.recipeList.st120.xUseVerLeft,
              xIN_PieceInEnd      := NOT simu_fifo_left.IsEmpty(),
              xIN_PieceMax        := (simu_fifo_left.GetLen() >= BAND_SIZE_FOR_TUBE_LEFT),
              diIN_SignlFilter_ms := PERS.recipeList.st120.FeederConfigLeft.InFilterDelay,
              diIN_StartDelay_ms  := PERS.recipeList.st120.FeederConfigLeft.StartDelay,
              diIN_StopDelay_ms   := PERS.recipeList.st120.FeederConfigLeft.StopDelay,
              diIN_EmptyDelay     := PERS.recipeList.st120.FeederConfigLeft.EmptyDelay);

fb_feederRight(xIN_Enable := (enIN_State = enState.StateAUTO OR enIN_State = enState.StateSTEP) AND
                             PERS.recipeList.st120.xUseVerRight,
               xIN_PieceInEnd      := NOT simu_fifo_right.IsEmpty(),
               xIN_PieceMax        := (simu_fifo_right.GetLen() >= BAND_SIZE_FOR_TUBE_RIGHT),
               diIN_SignlFilter_ms := PERS.recipeList.st120.FeederConfigRight.InFilterDelay,
               diIN_StartDelay_ms  := PERS.recipeList.st120.FeederConfigRight.StartDelay,
               diIN_StopDelay_ms   := PERS.recipeList.st120.FeederConfigRight.StopDelay,
               diIN_EmptyDelay     := PERS.recipeList.st120.FeederConfigRight.EmptyDelay);

simu_feederLeft(xIN_Enable         := fb_feederLeft.xOUT_EnableFeeder,
                tIN_NewPieceTime   := 500,
                iIN_WaitTimeMin_ms := 1000,
                iIN_WaitTimeMax_ms := 1500);

simu_feederRight(xIN_Enable         := fb_feederRight.xOUT_EnableFeeder,
                 tIN_NewPieceTime   := 500,
                 iIN_WaitTimeMin_ms := 1000,
                 iIN_WaitTimeMax_ms := 1500);

rtPutPiece_left(CLK := simu_feederLeft.xOUT_NewPiece);
rtPutPiece_right(CLK := simu_feederRight.xOUT_NewPiece);

IF rtPutPiece_left.Q AND NOT simu_fifo_left.IsFull() THEN
    simu_fifo_left.Put(1);
END_IF

IF rtPutPiece_right.Q AND NOT simu_fifo_right.IsFull() THEN
    simu_fifo_right.Put(1);
END_IF

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST120_Feeder_e.READY) AND (iOUT_Step < ST120_Feeder_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST120_Feeder_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST120_Feeder_e.READY);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST120_Feeder_e.READY);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST120_Feeder_e.DONE);

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST120_Feeder_e.RESET;
    iOUT_Step := ST120_Feeder_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST120_Feeder_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST120_Feeder_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST120_Feeder_e.INIT;
    END_IF;

(***** INIT *****)
ST120_Feeder_e.INIT: (* Grundstellung ? *)
    IF CONST.USE_SIMULATION THEN
        iOUT_Step := ST120_Feeder_e.Init_pneumatics;
    ELSE
        iOUT_Step := ST120_Feeder_e.Init_pneumatics;
    END_IF;

ST120_Feeder_e.Init_pneumatics:
    // TODO check all the sensors
    IF TRUE THEN
        iOUT_Step := ST120_Feeder_e.READY;
    END_IF

(***** READY / INIT DONE *****)
ST120_Feeder_e.READY: (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST120_Feeder_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST120_Feeder_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step := ST120_Feeder_e.wait_tube_presence;
    END_IF;

ST120_Feeder_e.wait_tube_presence:
    IF CONST.USE_SIMULATION AND
       ((NOT PERS.recipeList.st120.xUseVerLeft OR (simu_fifo_left.GetLen() >= BAND_SIZE_FOR_TUBE_LEFT)) AND
       (NOT PERS.recipeList.st120.xUseVerRight OR (simu_fifo_right.GetLen() >= BAND_SIZE_FOR_TUBE_RIGHT))) THEN
        iOUT_Step := ST120_Feeder_e.wait_pnp_ready;
    END_IF

ST120_Feeder_e.wait_pnp_ready:
    IF xIN_PnpGripperOpen THEN
        iOUT_Step       := ST120_Feeder_e.rotate_to_pnp;
        simu_start_tick := GetTick();
    END_IF

ST120_Feeder_e.rotate_to_pnp:
    // TODO implement the sensor here
    IF CONST.USE_SIMULATION AND ((GetTick() - simu_start_tick) > 500) THEN
        iOUT_Step := ST120_Feeder_e.wait_pce_picked;
    END_IF

ST120_Feeder_e.wait_pce_picked:
    IF xIN_PickPiece THEN
        IF PERS.recipeList.st120.xUseVerLeft THEN
            simu_fifo_left.Pop(1);
        END_IF

        IF PERS.recipeList.st120.xUseVerRight THEN
            simu_fifo_right.Pop(1);
        END_IF

        iOUT_Step := ST120_Feeder_e.wait_pnp_move_out_with_the_piece;
    END_IF

ST120_Feeder_e.wait_pnp_move_out_with_the_piece:
    IF xIN_PnpNotOnTheWay THEN
        iOUT_Step       := ST120_Feeder_e.rotate_to_feeder;
        simu_start_tick := GetTick();
    END_IF

ST120_Feeder_e.rotate_to_feeder:
    // TODO implement the sensor here
    IF CONST.USE_SIMULATION AND ((GetTick() - simu_start_tick) > 500) THEN
        iOUT_Step := ST120_Feeder_e.DONE;
    END_IF

(***** DONE *****)
ST120_Feeder_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST120_Feeder_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST120_Feeder_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST120_Feeder_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST120_Feeder_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>