<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_130_Dose" Id="{8daf3d35-9a45-4e29-895a-eeab8dc95be1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_130_Dose
(****************************************************************************************)
(*	TITEL				laden kristall- Modul	    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP: END: LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    Mover : REFERENCE TO FB_Mover;
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;         // Error Flag 
    xOUT_Busy     : BOOL;         // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;         // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;         // Ready to begin: should be the same state as done	
    xOUT_Timeout  : BOOL;         // Timeout FB 
    xOUT_InitDone : BOOL;         // initialisierung fertig
    xOUT_Wait     : BOOL;         // Wartet auf Bedingung
    iOUT_Step     : ST130_Dose_e; // Aktueller Schritt 
    sOUT_Step     : STRING;       // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;         // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion: express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move

END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST130_Dose_e; // Merker letzter Schritt 
    iPreStep  : ST130_Dose_e; // Schritt zurück nach Alarm 
    iAktStep  : ST130_Dose_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)

    (* Spezial *)
    fb_axis130_01Z : FB_AxisLIN_V1_1;
    fb_axis130_10Z : FB_AxisLM_V1_1;

    fb_VerAxis_01 : FB_LinearMotionMan;
    fb_VerAxis_10 : FB_LinearMotionMan;

    fb_simu_axis130_01Z : FB_Simu_AxisLIN_V1_1;
    fb_simu_axis130_10Z : FB_Simu_AxisLM_V1_1;

    // pneumatics
    fb_Kammer_Offnen_Links      : FB_ZylMo2El_V2_1;
    fb_Kammer_Offnen_Rechts     : FB_ZylMo2El_V2_1;
    fb_Kammer_nachfullen_Links  : FB_ZylMo2El_V2_1;
    fb_Kammer_nachfullen_Rechts : FB_ZylMo2El_V2_1;
    fb_Niederhalter_Patrone     : FB_ZylMo2El_V2_1;

    simu_Kammer_Offnen_Links      : FB_Simu_Zyl2Pos;
    simu_Kammer_Offnen_Rechts     : FB_Simu_Zyl2Pos;
    simu_Kammer_nachfullen_Links  : FB_Simu_Zyl2Pos;
    simu_Kammer_nachfullen_Rechts : FB_Simu_Zyl2Pos;
    simu_Niederhalter_Patrone     : FB_Simu_Zyl2Pos;

    fb_viebrieren_kammer_links  : FB_ZylMo2El_V2_1;
    fb_viebrieren_kammer_rechts : FB_ZylMo2El_V2_1;

    TON_load_kammer  : TON;
    TON_load_patrone : TON;

END_VAR
VAR CONSTANT
    DOSE_SIMULATION : BOOL := FALSE; // Set to TRUE to simulate this part of the program
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST130_Dose_e.RESET;
    iOUT_Step := ST130_Dose_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

TON_load_kammer(IN := ST130_Dose_e.fill_kammer = iOUT_Step,
                PT := DINT_TO_TIME(_20_AUTO.recipe.st130.diLoadKammer_ms));

TON_load_patrone(IN := ST130_Dose_e.load_powder_and_vibrate = iOUT_Step,
                 PT := DINT_TO_TIME(_20_AUTO.recipe.st130.diLoadPatrone_ms));

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
fb_VerAxis_01(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST130_01Z],
              xIN_Init        := enIN_State = enState.StateINIT,
              xIN_Reset       := xIN_Reset,
              lrIN_CurrPos    := fb_axis130_01Z.rOUT_ActPos,
              lrIN_Delta_mm   := 0.05,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST130_DosierkammerPos_e._max);

fb_simu_axis130_01Z(xIN_InSimu    := DOSE_SIMULATION AND CONST.USE_SIMULATION,
                    pIN_axisSimu  := ADR(SIMU.axis_ref[Axis_e.ST130_01Z]),
                    pIN_axisHW    := ADR(ST130_Axis.axis130_01Z.axis),
                    rIN_PosActual := ST130_Axis.axis130_01Z.rActPos,
                    rIN_PosMax    := ST130_Axis.const130_01Z.POS_MAX,
                    rIN_PosMin    := ST130_Axis.const130_01Z.POS_MIN,
                    rIN_PixMax    := 60,
                    rIN_PixMin    := 0);

fb_axis130_01Z(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis[Axis_e.ST130_01Z]),
               xIN_DisButtons   := FALSE,
               xIN_Quit         := xIN_Quit,
               xIN_AX5000       := FALSE,
               xIN_ENC_ABS      := TRUE,
               xIN_PARAMok      := TRUE,
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST130_Axis.const130_01Z.POS_MIN,
               rIN_POSMAX       := ST130_Axis.const130_01Z.POS_MAX,
               rIN_VELOMAX      := ST130_Axis.const130_01Z.VELO_MAX,
               rIN_VELOMANU     := ST130_Axis.const130_01Z.VELO_MANU,
               rIN_VELOOPEN     := ST130_Axis.const130_01Z.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               rIN_JogVelo      := AXIS.rTeachVelo,
               rIN_PosManu      := TO_REAL(_20_AUTO.recipe.linearAxis[LinearAxis_e.ST130_01Z]
                                               .movesList[AXIS.bTeachPos[Axis_e.ST130_01Z]].lrPosition),
               xIN_HomeExe      := FALSE,
               xIN_HomeCalib    := FALSE,
               xIN_Execute      := fb_VerAxis_01.xOUT_Execute,
               xIN_Relative     := FALSE,
               rIN_Position     := TO_REAL(fb_VerAxis_01.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_VerAxis_01.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_VerAxis_01.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_VerAxis_01.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_VerAxis_01.OUT_MoveProfile.lrJerk),
               xIN_Reset        := xIN_Reset,
               rOUT_ActPos      => ST130_Axis.axis130_01Z.rActPos,
               axisIN_REF       := fb_simu_axis130_01Z.pOUT_axisRef^);

fb_VerAxis_10(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST130_10Z],
              xIN_Init        := enIN_State = enState.StateINIT,
              xIN_Reset       := xIN_Reset,
              lrIN_CurrPos    := fb_axis130_10Z.rOUT_ActPos,
              lrIN_Delta_mm   := 0.5,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST130_PatroneAushebenPos_e._max);

fb_simu_axis130_10Z(xIN_Enable          := DOSE_SIMULATION AND CONST.USE_SIMULATION,
                    bIN_AxisCntr        := fb_axis130_10Z.bOUT_AxisCntr,
                    wIN_AxisState       := ST130_Axis.axis130_10Z.wState,
                    udiIN_HomingTime_ms := 2000,
                    pIN_axisSimu        := ADR(SIMU.axis_ref[Axis_e.ST130_10Z]),
                    pIN_axisHW          := ADR(ST130_Axis.axis130_10Z.axis),
                    rIN_PosActual       := ST130_Axis.axis130_10Z.rActPos,
                    rIN_PosMax          := ST130_Axis.const130_10Z.POS_MAX,
                    rIN_PosMin          := ST130_Axis.const130_10Z.POS_MIN,
                    rIN_PixMax          := 100,
                    rIN_PixMin          := 0);

fb_axis130_10Z(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis[Axis_e.ST130_10Z]),
               xIN_DisButtons   := FALSE,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE,
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST130_Axis.const130_10Z.POS_MIN,
               rIN_POSMAX       := ST130_Axis.const130_10Z.POS_MAX,
               rIN_VELOMAX      := ST130_Axis.const130_10Z.VELO_MAX,
               rIN_VELOMANU     := ST130_Axis.const130_10Z.VELO_MANU,
               rIN_VELOOPEN     := ST130_Axis.const130_10Z.POS_MAX / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      := fb_VerAxis_10.xOUT_Execute,
               xIN_Relative     := FALSE,
               xIN_STOP         := FALSE,
               xIN_OFF          := FALSE,
               rIN_Position     := TO_REAL(fb_VerAxis_10.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_VerAxis_10.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_VerAxis_10.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_VerAxis_10.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_VerAxis_10.OUT_MoveProfile.lrJerk),
               rIN_PosManu      := TO_REAL(_20_AUTO.recipe.linearAxis[LinearAxis_e.ST130_10Z]
                                               .movesList[AXIS.bTeachPos[Axis_e.ST130_10Z]].lrPosition),
               xIN_Home         := ST130_Dose_e.Init_HomeVertical_10 = iOUT_Step,
               xIN_Reset        := (ST130_Dose_e.RESET = iOUT_Step) OR xIN_Reset,
               wAxisState       := fb_simu_axis130_10Z.wOUT_AxisState,
               bOUT_AxisCntr    => ST130_Axis.axis130_10Z.bCtrlHi,
               rOUT_ActPos      => ST130_Axis.axis130_10Z.rActPos,
               axisIN_REF       := fb_simu_axis130_10Z.pOUT_axisRef^);

//////////////////////////////////
fb_Kammer_Offnen_Links(xIN_Reset    := xIN_Reset OR (ST130_Dose_e.RESET = iOUT_Step),
                       xIN_Quit     := xIN_Quit,
                       xIN_Manu     := enState.StateMANU = enIN_State,
                       pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST130][1]),
                       xIN_GS       := simu_Kammer_Offnen_Links.xOUT_inGS,
                       xIN_AS       := simu_Kammer_Offnen_Links.xOUT_inAS,
                       xIN_FREE     := TRUE,
                       xINtoGS      := ST130_Dose_e.Init_close_down_feeder = iOUT_Step OR
                                       ST130_Dose_e.close_down_feeder = iOUT_Step,
                       xINtoAS := _20_AUTO.recipe.st130.xUseVerRight AND
                                  ST130_Dose_e.open_down_feeder = iOUT_Step,
                       tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                     [ST130_Cylinders_e.Kammer_nachfullen_Links].toAS_alarm_time),
                       tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                     [ST130_Cylinders_e.Kammer_Offnen_Links].toGS_alarm_time),
                       tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                      [ST130_Cylinders_e.Kammer_Offnen_Links].toAS_wait_time),
                       tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                      [ST130_Cylinders_e.Kammer_Offnen_Links].toGS_wait_time));

simu_Kammer_Offnen_Links(xIN_Enable := DOSE_SIMULATION AND CONST.USE_SIMULATION,
                         xIN_inGS   := IO_BOX.I1405_ST130_kammer_offnen_links_vor,
                         xIN_inAS   := IO_BOX.I1404_ST130_kammer_offnen_links_zuruck,
                         xIN_valve  := fb_Kammer_Offnen_Links.xOUT_VALVE,
                         tIN_GS_ms  := 200,  //ms
                         tIN_AS_ms  := 200); //ms

fb_Kammer_Offnen_Rechts(xIN_Reset    := xIN_Reset OR (ST130_Dose_e.RESET = iOUT_Step),
                        xIN_Quit     := xIN_Quit,
                        xIN_Manu     := enState.StateMANU = enIN_State,
                        pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST130][2]),
                        xIN_GS       := simu_Kammer_Offnen_Rechts.xOUT_inGS,
                        xIN_AS       := simu_Kammer_Offnen_Rechts.xOUT_inAS,
                        xIN_FREE     := TRUE,
                        xINtoGS      := ST130_Dose_e.Init_close_down_feeder = iOUT_Step OR
                                        ST130_Dose_e.close_down_feeder = iOUT_Step,
                        xINtoAS := _20_AUTO.recipe.st130.xUseVerRight AND
                                   ST130_Dose_e.open_down_feeder = iOUT_Step,
                        tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                      [ST130_Cylinders_e.Kammer_Offnen_Rechts].toAS_alarm_time),
                        tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                      [ST130_Cylinders_e.Kammer_Offnen_Rechts].toGS_alarm_time),
                        tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                       [ST130_Cylinders_e.Kammer_Offnen_Rechts].toAS_wait_time),
                        tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                       [ST130_Cylinders_e.Kammer_Offnen_Rechts].toGS_wait_time));

simu_Kammer_Offnen_Rechts(xIN_Enable := DOSE_SIMULATION AND CONST.USE_SIMULATION,
                          xIN_inGS   := IO_BOX.I1407_ST130_kammer_offnen_rechts_vor,
                          xIN_inAS   := IO_BOX.I1406_ST130_kammer_offnen_rechts_zuruck,
                          xIN_valve  := fb_Kammer_Offnen_Rechts.xOUT_VALVE,
                          tIN_GS_ms  := 200,  //ms
                          tIN_AS_ms  := 200); //ms

fb_Kammer_nachfullen_Links(xIN_Reset    := xIN_Reset OR (ST130_Dose_e.RESET = iOUT_Step),
                           xIN_Quit     := xIN_Quit,
                           xIN_Manu     := enState.StateMANU = enIN_State,
                           pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST130][3]),
                           xIN_GS       := simu_Kammer_nachfullen_Links.xOUT_inGS,
                           xIN_AS       := simu_Kammer_nachfullen_Links.xOUT_inAS,
                           xIN_FREE     := TRUE,
                           xINtoGS      := ST130_Dose_e.close_up_feeder = iOUT_Step,
                           xINtoAS      := _20_AUTO.recipe.st130.xUseVerLeft AND
                                           (ST130_Dose_e.open_up_feeder = iOUT_Step OR
                                           ST130_Dose_e.Init_open_up_feeder = iOUT_Step),
                           tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                         [ST130_Cylinders_e.Kammer_nachfullen_Links]
                                                         .toAS_alarm_time),
                           tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                         [ST130_Cylinders_e.Kammer_nachfullen_Links].toGS_alarm_time),
                           tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Kammer_nachfullen_Links].toAS_wait_time),
                           tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Kammer_nachfullen_Links].toGS_wait_time));

simu_Kammer_nachfullen_Links(xIN_Enable := DOSE_SIMULATION AND CONST.USE_SIMULATION,
                             xIN_inGS   := IO_BOX.I1400_ST130_nachfullen_offnen_links_zuruck,
                             xIN_inAS   := IO_BOX.I1401_ST130_nachfullen_offnen_links_vor,
                             xIN_valve  := fb_Kammer_nachfullen_Links.xOUT_VALVE,
                             tIN_GS_ms  := 200,  //ms
                             tIN_AS_ms  := 200); //ms

fb_Kammer_nachfullen_Rechts(xIN_Reset    := xIN_Reset OR (ST130_Dose_e.RESET = iOUT_Step),
                            xIN_Quit     := xIN_Quit,
                            xIN_Manu     := enState.StateMANU = enIN_State,
                            pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST130][4]),
                            xIN_GS       := simu_Kammer_nachfullen_Rechts.xOUT_inGS,
                            xIN_AS       := simu_Kammer_nachfullen_Rechts.xOUT_inAS,
                            xIN_FREE     := TRUE,
                            xINtoGS      := ST130_Dose_e.close_up_feeder = iOUT_Step,
                            xINtoAS      := _20_AUTO.recipe.st130.xUseVerRight AND
                                            (ST130_Dose_e.open_up_feeder = iOUT_Step OR
                                            ST130_Dose_e.Init_open_up_feeder = iOUT_Step),
                            tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Kammer_nachfullen_Rechts]
                                                          .toAS_alarm_time),
                            tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Kammer_nachfullen_Rechts]
                                                          .toGS_alarm_time),
                            tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                           [ST130_Cylinders_e.Kammer_nachfullen_Rechts]
                                                           .toAS_wait_time),
                            tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                           [ST130_Cylinders_e.Kammer_nachfullen_Rechts]
                                                           .toGS_wait_time));

simu_Kammer_nachfullen_Rechts(xIN_Enable := DOSE_SIMULATION AND CONST.USE_SIMULATION,
                              xIN_inGS   := IO_BOX.I1402_ST130_nachfullen_offnen_rechts_zuruck,
                              xIN_inAS   := IO_BOX.I1403_ST130_nachfullen_offnen_rechts_vor,
                              xIN_valve  := fb_Kammer_nachfullen_Rechts.xOUT_VALVE,
                              tIN_GS_ms  := 200,  // ms
                              tIN_AS_ms  := 200); // ms

fb_viebrieren_kammer_links(xIN_Reset    := xIN_Reset OR (ST130_Dose_e.RESET = iOUT_Step),
                           xIN_Quit     := xIN_Quit,
                           xIN_Manu     := enState.StateMANU = enIN_State,
                           pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST130][5]),
                           xIN_GS       := NOT fb_viebrieren_kammer_links.xOUT_VALVE, // no sensor here
                           xIN_AS       := fb_viebrieren_kammer_links.xOUT_VALVE,     // no sensor here
                           xIN_FREE     := TRUE,
                           xINtoGS      := NOT fb_viebrieren_kammer_links.xINtoAS,
                           xINtoAS      := _20_AUTO.recipe.st130.xUseVerLeft AND
                                           ((ST130_Dose_e.check_filterhut_presence <= iOUT_Step AND
                                           ST130_Dose_e.load_powder_and_vibrate >= iOUT_Step) OR
                                           (ST130_Dose_e.fill_kammer = iOUT_Step)),
                           tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                         [ST130_Cylinders_e.Vibrieren_Kammer_Links]
                                                         .toAS_alarm_time),
                           tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                         [ST130_Cylinders_e.Vibrieren_Kammer_Links]
                                                         .toGS_alarm_time),
                           tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Vibrieren_Kammer_Links]
                                                          .toAS_wait_time),
                           tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Vibrieren_Kammer_Links]
                                                          .toGS_wait_time));

fb_viebrieren_kammer_rechts(xIN_Reset    := xIN_Reset OR (ST130_Dose_e.RESET = iOUT_Step),
                            xIN_Quit     := xIN_Quit,
                            xIN_Manu     := enState.StateMANU = enIN_State,
                            pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST130][6]),
                            xIN_GS       := NOT fb_viebrieren_kammer_rechts.xOUT_VALVE, // no sensor here
                            xIN_AS       := fb_viebrieren_kammer_rechts.xOUT_VALVE,     // no sensor here
                            xIN_FREE     := TRUE,
                            xINtoGS      := NOT fb_viebrieren_kammer_links.xINtoAS,
                            xINtoAS      := _20_AUTO.recipe.st130.xUseVerRight AND
                                            ((ST130_Dose_e.check_filterhut_presence <= iOUT_Step AND
                                            ST130_Dose_e.load_powder_and_vibrate >= iOUT_Step) OR
                                            (ST130_Dose_e.fill_kammer = iOUT_Step)),
                            tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Vibrieren_Kammer_Rechts]
                                                          .toAS_alarm_time),
                            tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                          [ST130_Cylinders_e.Vibrieren_Kammer_Rechts]
                                                          .toGS_alarm_time),
                            tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                           [ST130_Cylinders_e.Vibrieren_Kammer_Rechts]
                                                           .toAS_wait_time),
                            tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                           [ST130_Cylinders_e.Vibrieren_Kammer_Rechts]
                                                           .toGS_wait_time));

fb_Niederhalter_Patrone(xIN_Reset    := xIN_Reset OR (ST130_Dose_e.RESET = iOUT_Step),
                        xIN_Quit     := xIN_Quit,
                        xIN_Manu     := enState.StateMANU = enIN_State,
                        pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST130][7]),
                        xIN_GS       := simu_Niederhalter_Patrone.xOUT_inGS,
                        xIN_AS       := simu_Niederhalter_Patrone.xOUT_inAS,
                        xIN_FREE     := TRUE,
                        xINtoGS      := ST130_Dose_e.Init_clamp_up = iOUT_Step OR
                                        ST130_Dose_e.clamp_up = iOUT_Step,
                        xINtoAS   := ST130_Dose_e.clamp_down = iOUT_Step,
                        tIN_ErrAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                      [ST130_Cylinders_e.Niederhalter_Patrone]
                                                      .toAS_alarm_time),
                        tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                      [ST130_Cylinders_e.Niederhalter_Patrone]
                                                      .toGS_alarm_time),
                        tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                       [ST130_Cylinders_e.Niederhalter_Patrone]
                                                       .toAS_wait_time),
                        tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST130]
                                                       [ST130_Cylinders_e.Niederhalter_Patrone]
                                                       .toGS_wait_time));

simu_Niederhalter_Patrone(xIN_Enable := DOSE_SIMULATION AND CONST.USE_SIMULATION,
                          xIN_inGS   := IO_BOX.I2100_ST130_niederhalter_patrone_oben,
                          xIN_inAS   := IO_BOX.I2101_ST130_niederhalter_patrone_unten,
                          xIN_valve  := fb_Niederhalter_Patrone.xOUT_VALVE,
                          tIN_GS_ms  := 200,  // ms
                          tIN_AS_ms  := 200); // ms

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST130_Dose_e.READY) AND (iOUT_Step < ST130_Dose_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST130_Dose_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST130_Dose_e.READY);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST130_Dose_e.READY) OR
                 (iOUT_Step = ST130_Dose_e.DONE);

// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST130_Dose_e.DONE);

xOUT_MoverFree := NOT (iOUT_Step >= ST130_Dose_e.MOVER_NEEDED_OP AND iOUT_Step < ST130_Dose_e.MOVER_FREE_OP);

iOUT_ProcessCompletion := F_GetPercent_2(iOUT_Step,
                                         ST130_Dose_e.waitOnMover,
                                         ST130_Dose_e.DONE,
                                         ST130_Dose_e.waitOnMover,
                                         ST130_Dose_e.DONE);

IO_BOX.Q0100_14_ST130_kammer_offnen_links :=
    fb_Kammer_Offnen_Links.xOUT_VALVE AND NOT (DOSE_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q0101_14_ST130_kammer_offnen_rechts :=
    fb_Kammer_Offnen_Rechts.xOUT_VALVE AND NOT (DOSE_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q0102_14_ST130_kammer_nachfullen_links :=
    fb_Kammer_nachfullen_Links.xOUT_VALVE AND NOT (DOSE_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q0103_14_ST130_kammer_nachfullen_rechts :=
    fb_Kammer_nachfullen_Rechts.xOUT_VALVE AND NOT (DOSE_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q0104_14_ST130_vibrieren_kammer_links :=
    fb_viebrieren_kammer_links.xOUT_VALVE AND NOT (DOSE_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q0104_12_ST130_vibrieren_kammer_rechts :=
    fb_viebrieren_kammer_rechts.xOUT_VALVE AND NOT (DOSE_SIMULATION AND CONST.USE_SIMULATION);

IO_BOX.Q0105_14_ST130_niederhalter_patrone :=
    fb_Niederhalter_Patrone.xOUT_VALVE AND NOT (DOSE_SIMULATION AND CONST.USE_SIMULATION);

_20_AUTO.recipe.st130.uiVibroUnderneath := LIMIT(UINT#0, _20_AUTO.recipe.st130.uiVibroUnderneath, UINT#100);

IF IO_BOX.Q0104_14_ST130_vibrieren_kammer_links AND (ST130_Dose_e.fill_kammer <> iOUT_Step) THEN
    OUT.QA01_ST130_pressure_valve_left := (UINT#16#FFFF / UINT#100) * _20_AUTO.recipe.st130.uiVibroUnderneath;
ELSE
    OUT.QA01_ST130_pressure_valve_left := 0;
END_IF

IF IO_BOX.Q0104_12_ST130_vibrieren_kammer_rechts AND (ST130_Dose_e.fill_kammer <> iOUT_Step) THEN
    OUT.QA02_ST130_pressure_valve_right := (UINT#16#FFFF / UINT#100) * _20_AUTO.recipe.st130.uiVibroUnderneath;
ELSE
    OUT.QA02_ST130_pressure_valve_right := 0;
END_IF

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST130_Dose_e.RESET;
    iOUT_Step := ST130_Dose_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

IF 0 = bOUT_Error THEN
    IF fb_axis130_01Z.xOUT_ErrFlag THEN
        bOUT_Error := 11;
    ELSIF fb_axis130_10Z.xOUT_ErrFlag THEN
        bOUT_Error := 12;
    ELSIF fb_Kammer_Offnen_Links.xOUT_ErrFlag THEN
        bOUT_Error := 20;
    ELSIF fb_Kammer_Offnen_Rechts.xOUT_ErrFlag THEN
        bOUT_Error := 21;
    ELSIF fb_Kammer_nachfullen_Links.xOUT_ErrFlag THEN
        bOUT_Error := 22;
    ELSIF fb_Kammer_nachfullen_Rechts.xOUT_ErrFlag THEN
        bOUT_Error := 23;
    ELSIF fb_Niederhalter_Patrone.xOUT_ErrFlag THEN
        bOUT_Error := 24;
    ELSIF fb_viebrieren_kammer_links.xOUT_ErrFlag THEN
        bOUT_Error := 25;
    ELSIF fb_viebrieren_kammer_rechts.xOUT_ErrFlag THEN
        bOUT_Error := 26;
    END_IF
ELSIF iOUT_Step < ST130_Dose_e.ERROR THEN
    iOUT_Step := ST130_Dose_e.ERROR;
END_IF

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST130_Dose_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST130_Dose_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST130_Dose_e.INIT;
    END_IF;

(***** INIT *****)
ST130_Dose_e.INIT: (* Grundstellung ? *)
    iOUT_Step := ST130_Dose_e.Init_Vertical_01Z_at_position;

ST130_Dose_e.Init_Vertical_01Z_at_position:
    IF fb_VerAxis_01.MoveTo(ST130_DosierkammerPos_e.down_AS).xOUT_InPos THEN
        IF fb_axis130_10Z.xOUT_READY OR fb_axis130_10Z.xOUT_HOMED THEN
            iOUT_Step := ST130_Dose_e.Init_Vertical_10_Down;
        ELSE
            iOUT_Step := ST130_Dose_e.Init_HomeVertical_10;
        END_IF
    END_IF

ST130_Dose_e.Init_HomeVertical_10:
    IF fb_axis130_10Z.xOUT_HOMED THEN
        iOUT_Step := ST130_Dose_e.Init_Vertical_10_Down;
    END_IF

ST130_Dose_e.Init_Vertical_10_Down:
    IF fb_VerAxis_10.MoveTo(ST130_PatroneAushebenPos_e.down_GS).xOUT_InPos THEN
        iOUT_Step := ST130_Dose_e.Init_close_down_feeder;
    END_IF

ST130_Dose_e.Init_close_down_feeder:
    IF (NOT _20_AUTO.recipe.st130.xUseVerLeft OR fb_Kammer_Offnen_Links.xOUT_inGS) AND
       (NOT _20_AUTO.recipe.st130.xUseVerRight OR fb_Kammer_Offnen_Rechts.xOUT_inGS) THEN
        iOUT_Step := ST130_Dose_e.Init_open_up_feeder;
    END_IF

ST130_Dose_e.Init_open_up_feeder:
    IF (NOT _20_AUTO.recipe.st130.xUseVerLeft OR fb_Kammer_nachfullen_Links.xOUT_inAS) AND
       (NOT _20_AUTO.recipe.st130.xUseVerRight OR fb_Kammer_nachfullen_Rechts.xOUT_inAS) THEN
        iOUT_Step := ST130_Dose_e.Init_clamp_up;
    END_IF

ST130_Dose_e.Init_clamp_up:
    IF fb_Niederhalter_Patrone.xOUT_inGS THEN
        iOUT_Step := ST130_Dose_e.READY;
    END_IF

(***** READY / INIT DONE *****)
ST130_Dose_e.READY:   (* Start AUTO:END:LEER:STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST130_Dose_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST130_Dose_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step := ST130_Dose_e.fill_kammer;
    END_IF;

ST130_Dose_e.fill_kammer:
    IF xIN_NextStep AND TON_load_kammer.Q THEN
        iOUT_Step := ST130_Dose_e.waitOnMover;
    END_IF

ST130_Dose_e.waitOnMover:
    IF xIN_NextStep AND __ISVALIDREF(Mover) OR HMI.bArForceCyclusState[StationList_e.ST130] THEN
        iOUT_Step := ST130_Dose_e.check_filterhut_presence;
    END_IF

ST130_Dose_e.check_filterhut_presence:
    IF xIN_NextStep AND TRUE THEN
        iOUT_Step := ST130_Dose_e.close_up_feeder;
    END_IF

ST130_Dose_e.close_up_feeder:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st130.xUseVerLeft OR fb_Kammer_nachfullen_Links.xOUT_inGS) AND
       (NOT _20_AUTO.recipe.st130.xUseVerRight OR fb_Kammer_nachfullen_Rechts.xOUT_inGS) THEN
        iOUT_Step := ST130_Dose_e.lift_up_piece_in_workposition;
    END_IF

ST130_Dose_e.lift_up_piece_in_workposition:
    IF xIN_NextStep AND fb_VerAxis_10.MoveTo(ST130_PatroneAushebenPos_e.up_AS).xOUT_InPos THEN
        iOUT_Step := ST130_Dose_e.open_down_feeder;
    END_IF

ST130_Dose_e.open_down_feeder:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st130.xUseVerLeft OR fb_Kammer_Offnen_Links.xOUT_inAS) AND
       (NOT _20_AUTO.recipe.st130.xUseVerRight OR fb_Kammer_Offnen_Rechts.xOUT_inAS) THEN
        iOUT_Step := ST130_Dose_e.load_powder_and_vibrate;
    END_IF

ST130_Dose_e.load_powder_and_vibrate:
    IF xIN_NextStep AND TON_load_patrone.Q THEN
        iOUT_Step := ST130_Dose_e.close_down_feeder;
    END_IF

ST130_Dose_e.close_down_feeder:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st130.xUseVerLeft OR fb_Kammer_Offnen_Links.xOUT_inGS) AND
       (NOT _20_AUTO.recipe.st130.xUseVerRight OR fb_Kammer_Offnen_Rechts.xOUT_inGS) THEN
        iOUT_Step := ST130_Dose_e.release_piece_and_open_up_feeder;
    END_IF

ST130_Dose_e.release_piece_and_open_up_feeder:
    IF xIN_NextStep AND fb_VerAxis_10.MoveTo(ST130_PatroneAushebenPos_e.down_GS).xOUT_InPos THEN
        iOUT_Step := ST130_Dose_e.open_up_feeder;
    END_IF

ST130_Dose_e.open_up_feeder:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st130.xUseVerLeft OR fb_Kammer_nachfullen_Links.xOUT_inAS) AND
       (NOT _20_AUTO.recipe.st130.xUseVerRight OR fb_Kammer_nachfullen_Rechts.xOUT_inAS) THEN
        iOUT_Step := ST130_Dose_e.clamp_down;
    END_IF

ST130_Dose_e.clamp_down:
    IF xIN_NextStep AND fb_Niederhalter_Patrone.xOUT_inAS THEN
        iOUT_Step := ST130_Dose_e.clamp_up;
    END_IF

ST130_Dose_e.clamp_up:
    IF xIN_NextStep AND fb_Niederhalter_Patrone.xOUT_inGS THEN
        iOUT_Step := ST130_Dose_e.SYNC_MOVER_LEAVE;
    END_IF

ST130_Dose_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST130_Dose_e.DONE;
    END_IF

(***** DONE *****)
ST130_Dose_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST130_Dose_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST130_Dose_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST130_Dose_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST130_Dose_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>