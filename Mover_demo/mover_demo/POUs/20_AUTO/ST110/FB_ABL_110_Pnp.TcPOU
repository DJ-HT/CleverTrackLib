<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_110_Pnp" Id="{de37258f-ffab-4124-a1ed-e35be9345f92}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_110_Pnp
(****************************************************************************************)
(*	TITEL				RFID-Ring laden		    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    Mover              : REFERENCE TO FB_Mover;
    xIN_PceReadyToPick : BOOL; // the piece(s) is/are ready to picked
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;        // Error Flag 
    xOUT_Busy     : BOOL;        // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;        // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;        // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;        // Timeout FB 
    xOUT_InitDone : BOOL;        // initialisierung fertig
    xOUT_Wait     : BOOL;        // Wartet auf Bedingung
    iOUT_Step     : ST110_Pnp_e; // Aktueller Schritt 
    sOUT_Step     : STRING;      // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;        // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion, express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move
    xOUT_PickPiece         : BOOL; // Set to true when a piece is picked

END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST110_Pnp_e; // Merker letzter Schritt 
    iPreStep  : ST110_Pnp_e; // Schritt zurück nach Alarm 
    iAktStep  : ST110_Pnp_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)

    (* Spezial *)
    fb_axis110_01Y : FB_AxisLM_V1_1;
    fb_axis110_02Z : FB_AxisLIN_V1_1;
    fb_axis110_03Z : FB_AxisLIN_V1_1;
    fb_axis110_04Z : FB_AxisLIN_V1_1;

    fb_PnpHorAxis  : FB_LinearMotionMan;
    fb_PnpVerAxisL : FB_LinearMotionMan;
    fb_PnpVerAxisR : FB_LinearMotionMan;
    fb_PnpVerAxisU : FB_LinearMotionMan;

    fb_simu_axis110_01Y : FB_Simu_AxisLM_V1_1;
    fb_simu_axis110_02Z : FB_Simu_AxisLIN_V1_1;
    fb_simu_axis110_03Z : FB_Simu_AxisLIN_V1_1;
    fb_simu_axis110_04Z : FB_Simu_AxisLIN_V1_1;

    fb_gripperLeft    : FB_ZylMo2El_V2_1;
    simu_gripperLeft  : FB_Simu_Zyl2Pos;
    fb_gripperRight   : FB_ZylMo2El_V2_1;
    simu_gripperRight : FB_Simu_Zyl2Pos;

    fb_kraftLeft  : FB_WandlerForceSensor;
    fb_kraftRight : FB_WandlerForceSensor;
	
END_VAR
VAR CONSTANT
    PNP_SIMULATION : BOOL := TRUE; // Set to TRUE to simulate this part of the program
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST110_Pnp_e.RESET;
    iOUT_Step := ST110_Pnp_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
fb_PnpHorAxis(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST110_01Y],
              xIN_Init        := enIN_State = enState.StateINIT,
              xIN_Reset       := xIN_Reset,
              lrIN_CurrPos    := fb_axis110_01Y.rOUT_ActPos,
              lrIN_Delta_mm   := 0.5,
              iIN_CurrentStep := iOUT_Step,
              iIN_moveNumber  := ST110_PnpHorPos_e._max);

fb_simu_axis110_01Y(xIN_Enable          := PNP_SIMULATION AND CONST.USE_SIMULATION,
                    bIN_AxisCntr        := fb_axis110_01Y.bOUT_AxisCntr,
                    wIN_AxisState       := ST110_Axis.axis110_01Y.wState,
                    udiIN_HomingTime_ms := 2000,
                    pIN_axisSimu        := ADR(SIMU.axis_ref[Axis_e.ST110_01Y]),
                    pIN_axisHW          := ADR(ST110_Axis.axis110_01Y.axis),
                    rIN_PosActual       := fb_axis110_01Y.rOUT_ActPos,
                    rIN_PosMax          := ST110_Axis.const110_01Y.POS_MAX,
                    rIN_PosMin          := ST110_Axis.const110_01Y.POS_MIN,
                    rIN_PixMax          := 100,
                    rIN_PixMin          := 0);

fb_axis110_01Y(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons   := HMI.iSelectJogAxis <> Axis_e.ST110_01Y,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE, (*TODO*)
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST110_Axis.const110_01Y.POS_MIN,
               rIN_POSMAX       := ST110_Axis.const110_01Y.POS_MAX,
               rIN_VELOMAX      := ST110_Axis.const110_01Y.VELO_MAX,
               rIN_VELOMANU     := ST110_Axis.const110_01Y.VELO_MANU,
               rIN_VELOOPEN     := ST110_Axis.const110_01Y.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      := fb_PnpHorAxis.xOUT_Execute,
               xIN_Home         := ST110_Pnp_e.Init_HomeHorizontals = iOUT_Step,
               xIN_Relative     :=,
               rIN_Position     := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpHorAxis.OUT_MoveProfile.lrJerk),
               xIN_Reset        := (ST110_Pnp_e.RESET = iOUT_Step) OR xIN_Reset,
               // the simu fb gives the hardware signal when not in simulation
               wAxisState    := fb_simu_axis110_01Y.wOUT_AxisState,
               rOUT_ActPos   => ST110_Axis.axis110_01Y.rActPos,
               bOUT_AxisCntr => ST110_Axis.axis110_01Y.bCtrlHi,
               axisIN_REF    := fb_simu_axis110_01Y.pOUT_axisRef^);

fb_PnpVerAxisL(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST110_02Z],
               xIN_Init        := enIN_State = enState.StateINIT,
               xIN_Reset       := xIN_Reset,
               lrIN_CurrPos    := fb_axis110_02Z.rOUT_ActPos,
               lrIN_Delta_mm   := 0.05,
               iIN_CurrentStep := iOUT_Step,
               iIN_moveNumber  := ST110_PnpVerPos_e._max);

fb_simu_axis110_02Z(xIN_InSimu    := PNP_SIMULATION AND CONST.USE_SIMULATION,
                    rIN_PosActual := fb_axis110_02Z.rOUT_ActPos,
                    pIN_axisSimu  := ADR(SIMU.axis_ref[Axis_e.ST110_02Z]),
                    pIN_axisHW    := ADR(ST110_Axis.axis110_02Z.axis),
                    rIN_PosMax    := ST110_Axis.const110_02Z.POS_MAX,
                    rIN_PosMin    := ST110_Axis.const110_02Z.POS_MIN,
                    rIN_PixMax    := 80,
                    rIN_PixMin    := 0);

fb_axis110_02Z(enIN_State     := enIN_State,
               parIN_Buttons  := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons := HMI.iSelectJogAxis <> Axis_e.ST110_02Z,
               xIN_Quit       := xIN_Quit,
               xIN_AX5000     := TRUE,
               xIN_ENC_ABS    := TRUE, // TODO set accordingly
               xIN_PARAMok    := TRUE,
               xIN_FREE       := NOT ((ST110_Pnp_e.PnP_Ver_ShuttleTorqueControl = iOUT_Step) AND
                                 fb_kraftLeft.lrOUT_value >= _20_AUTO.recipe.st110.kraft_left_raw) AND
                                 NOT (ST110_Pnp_e.PnP_Ver_quick_stop = iOUT_Step),
               xIN_FREE_HOME := TRUE,
               rIN_POSMIN    := ST110_Axis.const110_02Z.POS_MIN,
               rIN_POSMAX    := ST110_Axis.const110_02Z.POS_MAX,
               rIN_VELOMAX   := ST110_Axis.const110_02Z.VELO_MAX,
               rIN_VELOMANU  := ST110_Axis.const110_02Z.VELO_MANU,
               rIN_VELOOPEN  := ST110_Axis.const110_02Z.POS_MAX / 4,
               rIN_JogInc    := AXIS.rTeachIncAxis,
               rIN_JogVelo   := AXIS.rTeachVelo,
               xIN_HomeExe   :=,
               xIN_HomeCalib :=,
               xIN_Execute   := (_20_AUTO.recipe.st110.xUseVerLeft OR (iOUT_Step < ST110_Pnp_e.READY)) AND
                                (fb_PnpVerAxisL.xOUT_Execute),
               xIN_HomeExe      :=,
               xIN_Relative     :=,
               rIN_Position     := TO_REAL(fb_PnpVerAxisL.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpVerAxisL.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpVerAxisL.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpVerAxisL.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpVerAxisL.OUT_MoveProfile.lrJerk),
               xIN_Reset        := (ST110_Pnp_e.RESET = iOUT_Step) OR xIN_Reset,
               // output
               rOUT_ActPos => ST110_Axis.axis110_02Z.rActPos,
               axisIN_REF  := fb_simu_axis110_02Z.pOUT_axisRef^);

fb_PnpVerAxisR(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST110_03Z],
               xIN_Init        := enIN_State = enState.StateINIT,
               xIN_Reset       := xIN_Reset,
               lrIN_CurrPos    := fb_axis110_03Z.rOUT_ActPos,
               lrIN_Delta_mm   := 0.05,
               iIN_CurrentStep := iOUT_Step,
               iIN_moveNumber  := ST110_PnpVerPos_e._max);

fb_simu_axis110_03Z(xIN_InSimu    := PNP_SIMULATION AND CONST.USE_SIMULATION,
                    rIN_PosActual := fb_axis110_03Z.rOUT_ActPos,
                    pIN_axisSimu  := ADR(SIMU.axis_ref[Axis_e.ST110_03Z]),
                    pIN_axisHW    := ADR(ST110_Axis.axis110_03Z.axis),
                    rIN_PosMax    := ST110_Axis.const110_03Z.POS_MAX,
                    rIN_PosMin    := ST110_Axis.const110_03Z.POS_MIN,
                    rIN_PixMax    := 80,
                    rIN_PixMin    := 0);

fb_axis110_03Z(enIN_State     := enIN_State,
               parIN_Buttons  := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons := HMI.iSelectJogAxis <> Axis_e.ST110_03Z,
               xIN_Quit       := xIN_Quit,
               xIN_PARAMok    := TRUE, (*TODO*)
               xIN_FREE       := NOT ((ST110_Pnp_e.PnP_Ver_ShuttleTorqueControl = iOUT_Step) AND
                                 fb_kraftRight.lrOUT_value >= _20_AUTO.recipe.st110.kraft_right_raw) AND
                                 NOT (ST110_Pnp_e.PnP_Ver_quick_stop = iOUT_Step),
               xIN_FREE_HOME := TRUE,
               rIN_POSMIN    := ST110_Axis.const110_03Z.POS_MIN,
               rIN_POSMAX    := ST110_Axis.const110_03Z.POS_MAX,
               rIN_VELOMAX   := ST110_Axis.const110_03Z.VELO_MAX,
               rIN_VELOMANU  := ST110_Axis.const110_03Z.VELO_MANU,
               rIN_VELOOPEN  := ST110_Axis.const110_03Z.VELO_MANU / 4,
               rIN_JogInc    := AXIS.rTeachIncAxis,
               xIN_Execute   := (_20_AUTO.recipe.st110.xUseVerRight OR (iOUT_Step < ST110_Pnp_e.READY)) AND
                                (fb_PnpVerAxisR.xOUT_Execute),
               xIN_HomeExe      :=,
               xIN_Relative     :=,
               rIN_Position     := TO_REAL(fb_PnpVerAxisR.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := TO_REAL(fb_PnpVerAxisR.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := TO_REAL(fb_PnpVerAxisR.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := TO_REAL(fb_PnpVerAxisR.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := TO_REAL(fb_PnpVerAxisR.OUT_MoveProfile.lrJerk),
               xIN_Reset        := (ST110_Pnp_e.RESET = iOUT_Step) OR xIN_Reset,
               axisIN_REF       := fb_simu_axis110_03Z.pOUT_axisRef^,
               xIN_AX5000       := TRUE,
               xIN_ENC_ABS      := TRUE,
               rOUT_ActPos      => ST110_Axis.axis110_03Z.rActPos,
               axisIN_REF       := fb_simu_axis110_03Z.pOUT_axisRef^);

fb_PnpVerAxisU(config          := _20_AUTO.recipe.linearAxis[LinearAxis_e.ST110_04Z],
               xIN_Init        := enState.StateINIT = enIN_State,
               xIN_Reset       := xIN_Reset,
               lrIN_CurrPos    := ST110_Axis.axis110_04Z.rActPos,
               lrIN_Delta_mm   := 0.05,
               iIN_CurrentStep := iOUT_Step,
               iIN_moveNumber  := ST110_PnpVerPushPos_e._max);

fb_simu_axis110_04Z(xIN_InSimu    := PNP_SIMULATION AND CONST.USE_SIMULATION,
                    rIN_PosActual := ST110_Axis.axis110_04Z.rActPos,
                    pIN_axisSimu  := ADR(SIMU.axis_ref[Axis_e.ST110_04Z]),
                    pIN_axisHW    := ADR(ST110_Axis.axis110_04Z.axis),
                    rIN_PosMax    := ST110_Axis.const110_04Z.POS_MAX,
                    rIN_PosMin    := ST110_Axis.const110_04Z.POS_MIN,
                    rIN_PixMax    := 80,
                    rIN_PixMin    := 0);

fb_axis110_04Z(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons   := HMI.iSelectJogAxis <> Axis_e.ST110_04Z,
               xIN_Quit         := xIN_Quit,
               xIN_AX5000       := TRUE,
               xIN_ENC_ABS      := TRUE,
               xIN_PARAMok      := TRUE,
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST110_Axis.const110_04Z.POS_MIN,
               rIN_POSMAX       := ST110_Axis.const110_04Z.POS_MAX,
               rIN_VELOMAX      := ST110_Axis.const110_04Z.VELO_MAX,
               rIN_VELOMANU     := ST110_Axis.const110_04Z.VELO_MANU,
               rIN_VELOOPEN     := ST110_Axis.const110_04Z.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               rIN_JogVelo      := AXIS.rTeachVelo,
               xIN_HomeExe      :=,
               xIN_HomeCalib    := FALSE,
               xIN_Execute      := fb_PnpVerAxisU.xOUT_Execute,
               xIN_Relative     := FALSE,
               rIN_Position     := LREAL_TO_REAL(fb_PnpVerAxisU.OUT_MoveProfile.lrPosition),
               rIN_Velocity     := LREAL_TO_REAL(fb_PnpVerAxisU.OUT_MoveProfile.lrVelocity),
               rIN_Acceleration := LREAL_TO_REAL(fb_PnpVerAxisU.OUT_MoveProfile.lrAccel),
               rIN_Deceleration := LREAL_TO_REAL(fb_PnpVerAxisU.OUT_MoveProfile.lrDecel),
               rIN_Jerk         := LREAL_TO_REAL(fb_PnpVerAxisU.OUT_MoveProfile.lrJerk),
               xIN_Reset        := xIN_Reset,
               rOUT_ActPos      => ST110_Axis.axis110_04Z.rActPos,
               axisIN_REF       := fb_simu_axis110_04Z.pOUT_axisRef^);

// pneumatics

fb_gripperLeft(xIN_Reset    := xIN_Reset OR (ST110_Pnp_e.RESET = iOUT_Step),
               xIN_Quit     := xIN_Quit,
               xIN_Manu     := enState.StateMANU = enIN_State,
               pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST110][1]),
               xIN_GS       := simu_gripperLeft.xOUT_inGS,
               xIN_AS       := simu_gripperLeft.xOUT_inAS,
               xIN_FREE     := TRUE,
               xINtoGS      := ST110_Pnp_e.Vacum_off = iOUT_Step,
               xINtoAS      := _20_AUTO.recipe.st110.xUseVerLeft AND (ST110_Pnp_e.Vacum_on = iOUT_Step),
               tIN_ErrAS    := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                                [ST110_Cylinders_e.VakuumgreiferLinks].toAS_alarm_time),
               tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                             [ST110_Cylinders_e.VakuumgreiferLinks].toGS_alarm_time),
               tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                              [ST110_Cylinders_e.VakuumgreiferLinks].toAS_wait_time),
               tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                              [ST110_Cylinders_e.VakuumgreiferLinks].toGS_wait_time));

simu_gripperLeft(xIN_Enable := TRUE, // PNP_SIMULATION AND CONST.USE_SIMULATION,
                 xIN_inGS   := (IO_BOX.I5500_ST110_vakumkontrolle_links / TO_INT(16#FFFF / 100)) <=
                               _20_AUTO.recipe.st110.vakum_left_pc,
                 xIN_inAS := (IO_BOX.I5500_ST110_vakumkontrolle_links / TO_INT(16#FFFF / 100)) >
                             _20_AUTO.recipe.st110.vakum_left_pc,
                 xIN_valve := fb_gripperLeft.xOUT_VALVE,
                 tIN_GS_ms := 0,    //ms
                 tIN_AS_ms := 200); //ms

fb_gripperRight(xIN_Reset    := xIN_Reset OR (ST110_Pnp_e.RESET = iOUT_Step),
                xIN_Quit     := xIN_Quit,
                xIN_Manu     := enState.StateMANU = enIN_State,
                pbtIN_Button := ADR(HMI.btManuCylinders[StationList_e.ST110][2]),
                xIN_GS       := simu_gripperRight.xOUT_inGS,
                xIN_AS       := simu_gripperRight.xOUT_inAS,
                xIN_FREE     := TRUE,
                xINtoGS      := ST110_Pnp_e.Vacum_off = iOUT_Step,
                xINtoAS      := _20_AUTO.recipe.st110.xUseVerRight AND (ST110_Pnp_e.Vacum_on = iOUT_Step),
                tIN_ErrAS    := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                                 [ST110_Cylinders_e.VakuumgreiferRechts].toAS_alarm_time),
                tIN_ErrGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                              [ST110_Cylinders_e.VakuumgreiferRechts].toGS_alarm_time),
                tIN_WaitAS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                               [ST110_Cylinders_e.VakuumgreiferRechts].toAS_wait_time),
                tIN_WaitGS := DINT_TO_TIME(_20_AUTO.recipe.cylinder2Pos[StationList_e.ST110]
                                               [ST110_Cylinders_e.VakuumgreiferRechts].toGS_wait_time));

simu_gripperRight(xIN_Enable := TRUE, // PNP_SIMULATION AND CONST.USE_SIMULATION,
                  xIN_inGS   := (IO_BOX.I5600_ST110_vakumkontrolle_rechts / TO_INT(16#FFFF / 100)) <=
                                _20_AUTO.recipe.st110.vakum_right_pc,
                  xIN_inAS := (IO_BOX.I5600_ST110_vakumkontrolle_rechts / TO_INT(16#FFFF / 100)) >
                              _20_AUTO.recipe.st110.vakum_right_pc,
                  xIN_valve := fb_gripperRight.xOUT_VALVE,
                  tIN_GS_ms := 0,    //ms
                  tIN_AS_ms := 200); //ms

// kraft sensor
fb_kraftLeft();
fb_kraftRight();

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST110_Pnp_e.READY) AND (iOUT_Step < ST110_Pnp_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST110_Pnp_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST110_Pnp_e.READY);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST110_Pnp_e.READY) OR (iOUT_Step = ST110_Pnp_e.waitOnMover);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST110_Pnp_e.DONE);

xOUT_MoverFree := iOUT_Step >= ST110_Pnp_e.MOVER_FREE_OP AND iOUT_Step < ST110_Pnp_e.MOVER_NEEDED_OP;

iOUT_ProcessCompletion := F_GetPercent_2(iOUT_Step,
                                         ST110_Pnp_e.PnP_Hor_ToRotTablePos,
                                         ST110_Pnp_e.PnP_Hor_ToTrackPos,
                                         ST110_Pnp_e.PnP_Ver_ShuttleDown,
                                         ST110_Pnp_e.PnP_Ver_ShuttleUp);

xOUT_PickPiece := iOUT_Step = ST110_Pnp_e.PnP_Hor_ToTrackPos;

OUT.Q104_ST110_vacum_on_left  := fb_gripperLeft.xOUT_VALVE AND NOT (PNP_SIMULATION AND CONST.USE_SIMULATION);
OUT.Q105_ST110_vacum_on_right := fb_gripperRight.xOUT_VALVE AND NOT (PNP_SIMULATION AND CONST.USE_SIMULATION);

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST110_Pnp_e.RESET;
    iOUT_Step := ST110_Pnp_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST110_Pnp_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST110_Pnp_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST110_Pnp_e.INIT;
    END_IF;

(***** INIT *****)
ST110_Pnp_e.INIT: (* Grundstellung ? *)
    iOUT_Step := ST110_Pnp_e.Init_VerticalUp_04;

ST110_Pnp_e.Init_VerticalUp_04:
    IF fb_PnpVerAxisU.MoveTo(ST110_PnpVerPushPos_e.down).xOUT_InPos THEN
        iOUT_Step := ST110_Pnp_e.Init_VerticalUp_02_03;

    END_IF

ST110_Pnp_e.Init_VerticalUp_02_03:
    IF fb_gripperLeft.xIN_AS OR fb_gripperRight.xIN_AS THEN
        IF fb_PnpVerAxisL.MoveTo(ST110_PnpVerPos_e.UpFull).xOUT_InPos AND
           fb_PnpVerAxisR.MoveTo(ST110_PnpVerPos_e.UpFull).xOUT_InPos THEN
            IF fb_axis110_01Y.xOUT_READY OR fb_axis110_01Y.xOUT_HOMED THEN
                iOUT_Step := ST110_Pnp_e.Init_HorizontalsToTrack;
            ELSE
                iOUT_Step := ST110_Pnp_e.Init_HomeHorizontals;
            END_IF
        END_IF
    ELSE
        IF fb_PnpVerAxisL.MoveTo(ST110_PnpVerPos_e.UpEmpty).xOUT_InPos AND
           fb_PnpVerAxisR.MoveTo(ST110_PnpVerPos_e.UpEmpty).xOUT_InPos THEN
            IF fb_axis110_01Y.xOUT_READY OR fb_axis110_01Y.xOUT_HOMED THEN
                iOUT_Step := ST110_Pnp_e.Init_HorizontalsToTrack;
            ELSE
                iOUT_Step := ST110_Pnp_e.Init_HomeHorizontals;
            END_IF
        END_IF
    END_IF

ST110_Pnp_e.Init_HomeHorizontals:
    fb_axis110_01Y.rIN_Velocity :=
        _20_AUTO.recipe.linearAxis[LinearAxis_e.ST110_01Y].movesList[ST110_PnpHorPos_e.GS].lrVelocity;

    IF fb_axis110_01Y.xOUT_HOMED THEN
        iOUT_Step := ST110_Pnp_e.Init_HorizontalsToTrack;
    END_IF

ST110_Pnp_e.Init_HorizontalsToTrack:
    IF fb_PnpHorAxis.MoveTo(ST110_PnpHorPos_e.GS).xOUT_InPos THEN
        iOUT_Step := ST110_Pnp_e.Init_check_if_pces_handled;
    END_IF

ST110_Pnp_e.Init_check_if_pces_handled:
    IF (NOT _20_AUTO.recipe.st110.xUseVerLeft AND fb_gripperLeft.xOUT_inAS) OR
       (NOT _20_AUTO.recipe.st110.xUseVerRight AND fb_gripperRight.xOUT_inAS) THEN
        // ERROR: a piece is present in an unused gripper
        bOUT_Error := 1;
        iOUT_Step  := ST110_Pnp_e.ERROR;

    ELSIF _20_AUTO.recipe.st110.xUseVerLeft AND
          NOT fb_gripperLeft.xOUT_inAS AND
          _20_AUTO.recipe.st110.xUseVerRight AND
          fb_gripperRight.xOUT_inAS THEN
        // ERROR:  Initialisation failed. A piece is missing in the left griper.
        bOUT_Error := 2;
        iOUT_Step  := ST110_Pnp_e.ERROR;

    ELSIF _20_AUTO.recipe.st110.xUseVerLeft AND
          fb_gripperLeft.xOUT_inAS AND
          _20_AUTO.recipe.st110.xUseVerRight AND
          NOT fb_gripperRight.xOUT_inAS THEN
        // ERROR:  Initialisation failed. A piece is missing in the right griper.
        bOUT_Error := 3;
        iOUT_Step  := ST110_Pnp_e.ERROR;

    ELSIF NOT fb_gripperLeft.xOUT_inAS AND NOT fb_gripperRight.xOUT_inAS THEN
        iOUT_Step := ST110_Pnp_e.READY;

    ELSE
        iOUT_Step := ST110_Pnp_e.waitOnMover;
    END_IF

(***** READY / INIT DONE *****)
ST110_Pnp_e.READY:    (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST110_Pnp_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST110_Pnp_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step := ST110_Pnp_e.PnP_Hor_ToRotTablePos;
    END_IF;

ST110_Pnp_e.PnP_Hor_ToRotTablePos:
    IF xIN_NextStep AND fb_PnpHorAxis.MoveTo(ST110_PnpHorPos_e.AS).xOUT_InPos THEN
        iOUT_Step := ST110_Pnp_e.PnP_WaitOnFeeder;
    END_IF

ST110_Pnp_e.PnP_WaitOnFeeder:
    IF xIN_PceReadyToPick THEN
        iOUT_Step := ST110_Pnp_e.PnP_Ver_RotTableDown;
    END_IF

ST110_Pnp_e.PnP_Ver_RotTableDown:
    IF xIN_NextStep AND
       (fb_PnpVerAxisL.MoveTo(ST110_PnpVerPos_e.DownEmpty).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerLeft) AND
       (fb_PnpVerAxisR.MoveTo(ST110_PnpVerPos_e.DownEmpty).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerRight) THEN
        iOUT_Step := ST110_Pnp_e.Vacum_on;
    END_IF;

ST110_Pnp_e.Vacum_on:
    IF xIN_NextStep AND
       (NOT _20_AUTO.recipe.st110.xUseVerLeft OR simu_gripperLeft.xOUT_inAS) AND
       (NOT _20_AUTO.recipe.st110.xUseVerRight OR simu_gripperRight.xOUT_inAS) THEN
        iOUT_Step := ST110_Pnp_e.PnP_Ver_RotTableUp;
    END_IF;

ST110_Pnp_e.PnP_Ver_RotTableUp:
    IF xIN_NextStep AND
       (fb_PnpVerAxisL.MoveTo(ST110_PnpVerPos_e.UpFull).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerLeft) AND
       (
       fb_PnpVerAxisR.MoveTo(ST110_PnpVerPos_e.UpFull).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerRight
           ) THEN
        iOUT_Step := ST110_Pnp_e.PnP_Hor_ToTrackPos;
    END_IF;

ST110_Pnp_e.PnP_Hor_ToTrackPos:
    IF xIN_NextStep AND fb_PnpHorAxis.MoveTo(ST110_PnpHorPos_e.GS).xOUT_InPos THEN
        iOUT_Step := ST110_Pnp_e.waitOnMover;
    END_IF

ST110_Pnp_e.waitOnMover: (*  *)
    IF xIN_NextStep AND (__ISVALIDREF(Mover) OR HMI.bArForceCyclusState[StationList_e.ST110]) THEN
        iOUT_Step := ST110_Pnp_e.PnP_Ver_ShuttleDown;
    END_IF;

ST110_Pnp_e.PnP_Ver_ShuttleDown:
    IF xIN_NextStep AND
       (NOT fb_PnpVerAxisL.MoveTo(ST110_PnpVerPos_e.DownFullQuick).xOUT_Moving OR
       NOT _20_AUTO.recipe.st110.xUseVerLeft) AND
       (NOT fb_PnpVerAxisR.MoveTo(ST110_PnpVerPos_e.DownFullQuick).xOUT_Moving OR
       NOT _20_AUTO.recipe.st110.xUseVerRight) AND
       fb_PnpVerAxisU.MoveTo(ST110_PnpVerPushPos_e.up).xOUT_InPos THEN
        iOUT_Step := ST110_Pnp_e.PnP_Ver_ShuttleTorqueControl;
    END_IF;

// We need a fb that enables for us torque control. Here we just go a bit further
ST110_Pnp_e.PnP_Ver_ShuttleTorqueControl:
    IF (fb_PnpVerAxisL.MoveTo(ST110_PnpVerPos_e.DownFullTorqueControl).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerLeft) AND
       (fb_PnpVerAxisR.MoveTo(ST110_PnpVerPos_e.DownFullTorqueControl).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerRight) THEN
        IF PNP_SIMULATION AND CONST.USE_SIMULATION THEN
            iOUT_Step := ST110_Pnp_e.PnP_Ver_quick_stop;
        ELSE
            iOUT_Step := ST110_Pnp_e.ERROR;

        END_IF

    ELSIF fb_kraftLeft.lrOUT_value >= _20_AUTO.recipe.st110.kraft_left_raw AND
          fb_kraftRight.lrOUT_value >= _20_AUTO.recipe.st110.kraft_right_raw THEN
        iOUT_Step := ST110_Pnp_e.PnP_Ver_quick_stop;
    END_IF;

ST110_Pnp_e.PnP_Ver_quick_stop:
    IF xIN_NextStep THEN
        iOUT_Step := ST110_Pnp_e.Vacum_off;
    END_IF;

ST110_Pnp_e.Vacum_off:
    IF xIN_NextStep AND fb_gripperLeft.xOUT_inGS AND fb_gripperRight.xOUT_inGS THEN
        iOUT_Step := ST110_Pnp_e.PnP_Ver_ShuttleUp;
    END_IF;

ST110_Pnp_e.PnP_Ver_ShuttleUp:
    IF xIN_NextStep AND
       (fb_PnpVerAxisL.MoveTo(ST110_PnpVerPos_e.UpEmpty).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerLeft) AND
       (fb_PnpVerAxisR.MoveTo(ST110_PnpVerPos_e.UpEmpty).xOUT_InPos OR
       NOT _20_AUTO.recipe.st110.xUseVerRight) AND
       fb_PnpVerAxisU.MoveTo(ST110_PnpVerPushPos_e.down).xOUT_InPos THEN
        iOUT_Step := ST110_Pnp_e.SYNC_MOVER_LEAVE;
    END_IF;

ST110_Pnp_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST110_Pnp_e.DONE;
    END_IF

(***** DONE *****)
ST110_Pnp_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST110_Pnp_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST110_Pnp_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST110_Pnp_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST110_Pnp_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>