<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_AUT_110" Id="{3a75638e-4197-4ed4-a9b7-03c2fb32897f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AUT_110 EXTENDS FB_AUT_ABSTRACT
(****************************************************************************)
(*	POU_AUT_zxx			Bausteinaufrufe Station	zxx							*)
(*	Status				ungetestet											*)
(*  Version:			1.0													*)
(*	Beschrieb:																*)
(*																			*)
(*	Abläufe:			FB_ABLzxxA		Hauptablauf							*)
(*																			*)
(*																			*)
(* 	25.09.2019/Dj															*)
(****************************************************************************)
(*	dd.mm.yyyy   KZ    x.y			Beschrieb								*)
(****************************************************************************)
VAR_INPUT
    (* spezifische Eingänge *)

END_VAR
VAR_OUTPUT
    (* spezifische Ausgänge *)

END_VAR
VAR
    (* Bausteine *)
    _fb_abl_1 : FB_ABL_110;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Timer *)
(*******************************************************************)

(*******************************************************************)
(* Flanken / Merker *)
(*******************************************************************)
//MANU CYCLE
IF (enIN_State = StateMANU) AND xIN_ManuCycle THEN
    xManuCycle := TRUE;
END_IF;

IF (enIN_State <> StateMANU) OR xOUT_Done THEN
    xManuCycle := FALSE;
END_IF

//NEXT STEP
xNextStep := (enIN_State > StateSTEP) OR
             ((enIN_State = StateSTEP) AND xIN_Step) OR
             ((enIN_State = StateMANU) AND xManuCycle);

//RESET
xReset := ((enIN_State < StateREADY) AND (enIN_State <> StateINIT)) OR
          ((enIN_State = StateMANU) AND NOT xManuCycle);

(*******************************************************************)
(* Bausteinaufrufe Abläufe *)
(*******************************************************************)

_fb_abl_1(xIN_Reset       := xReset,
          xIN_Init        := xIN_Init,
          xIN_Quit        := xIN_Quit,
          xIN_Start       := enIN_State = enState.StateAUTO, //AND _FB_ABL_100A.xOUT_Done AND _FB_ABL_100A.xOUT_Ready,
          xIN_Sperre      := NOT xIN_On,
          xIN_NextStep    := xNextStep,
          xIN_AlarmAktiv  := xIN_AlarmAktiv,
          xIN_DryCycle    := xIN_DryCycle,
          xIN_Reset       := HMI.btArMain[7].on,
          xIN_RestartCYCL := enIN_State = enState.StateAUTO, // only restart when the mover has move out
          enIN_State      := enIN_State,
          tIN_Timeout     := tIN_Timeout,
          pxFG_Freigabe   := ADR(xDummy),
          Mover           := THIS^.Mover,
          xOUT_ErrFlag    =>,
          xOUT_Busy       =>,
          xOUT_Done       =>,
          xOUT_Timeout    =>,
          xOUT_InitDone   =>,
          xOUT_Wait       =>,
          iOUT_Step       =>,
          bOUT_Error      =>);

(*******************************************************************)
(* Mover reset flags *)
(*******************************************************************)

(*******************************************************************)
(* OUTPUT *)
(*******************************************************************)
xOUT_InitDone := _fb_abl_1.xOUT_InitDone;
xOUT_Ready    := xOUT_InitDone;
xOUT_Done     := _fb_abl_1.xOUT_Done;
xOUT_ErrFlag  := _fb_abl_1.xOUT_ErrFlag;
xOUT_Wait     := _fb_abl_1.xOUT_Wait;
xOUT_AlarmST  := xOUT_ErrFlag;

(*******************************************************************)
(* Bausteinaufruf Error Station *)
(*******************************************************************)
// POU_ERR_VORLAGE(xIN_QUIT:=xIN_Quit , pstrArIN_ALARM:=ADR(HMI.strArALARM[1]));
]]></ST>
    </Implementation>
    <Method Name="GiveMover" Id="{90505fb1-9a4c-45d5-b06e-16a18772176e}">
      <Declaration><![CDATA[METHOD GiveMover : IProcessSampleMover
VAR_INPUT
	mover : REFERENCE TO FB_Mover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(mover) THEN
    THIS^.Mover                       REF= mover;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="iCompletionPC" Id="{f03aab34-0709-45b8-80fe-12aa7c735bba}">
      <Declaration><![CDATA[(* % of completion of the process *)
PROPERTY iCompletionPC : INT
]]></Declaration>
      <Get Name="Get" Id="{c855a333-89d4-4129-bf32-6b480d79436f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iCompletionPC := THIS^._fb_abl_1.iOUT_ProcessCompletion;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="iProcessTimeMili_1" Id="{11043a39-61b4-4cff-9ce4-83d90bbd1022}">
      <Declaration><![CDATA[(* Process time, expressed in milisecond *)
PROPERTY iProcessTimeMili_1 : DINT
]]></Declaration>
      <Get Name="Get" Id="{3f26a0b9-7a16-410f-8b57-d726a151203e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iProcessTimeMili_1 := TO_DINT(THIS^._fb_abl_1.iProcessTimeMili1);
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c5847137-02be-417e-8fd4-a81cb9e5a3b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._fb_abl_1.iProcessTimeMili1 := TO_UDINT(iProcessTimeMili_1);
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="iProcessTimeMili_2" Id="{327af14e-cede-4d6c-93fc-93739b86387b}">
      <Declaration><![CDATA[(* Process time, expressed in milisecond *)
PROPERTY iProcessTimeMili_2 : DINT
]]></Declaration>
      <Get Name="Get" Id="{01d4b1d7-3c1b-4500-ab99-b101864eee13}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iProcessTimeMili_2 := TO_DINT(THIS^._fb_abl_1.iProcessTimeMili2);
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{96d3faea-0899-48aa-a2df-87795dce60cb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._fb_abl_1.iProcessTimeMili2 := TO_UDINT(iProcessTimeMili_2);
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ProcessExecution" Id="{9944028e-71e4-4f6c-ab9d-2e450d36f1e7}">
      <Declaration><![CDATA[PROPERTY ProcessExecution : ProcessExecution_e]]></Declaration>
      <Get Name="Get" Id="{e439908e-0dcd-4313-9915-d6f50d6a1e3c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessExecution := THIS^._ProcessExecution;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{72e06213-981e-443b-b6c4-73d8e8052a5d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._ProcessExecution := ProcessExecution;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TakeMover" Id="{d84cb916-2f66-4d9a-b351-183c45d9b25f}">
      <Declaration><![CDATA[METHOD TakeMover : IProcessSampleMover
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Mover REF= 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="xBusy" Id="{a5e462d0-5361-4950-a5f3-f24e71556501}">
      <Declaration><![CDATA[PROPERTY xBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{3ea2fb3d-7ff1-4760-b35f-20e1f7d0a75a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xBusy := THIS^._fb_abl_1.xOUT_Busy;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{06ec9da9-7624-4525-8133-0d040f619b4c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="xDone" Id="{6724bbc4-60f1-4aa1-85a4-8236f2174d20}">
      <Declaration><![CDATA[PROPERTY xDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{059441f4-0e47-47a7-add9-12f3a94a07c1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xDone := THIS^._fb_abl_1.xOUT_Ready OR THIS^._fb_abl_1.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverPathFree" Id="{597cbc1b-58ec-44cf-8369-e55c696d7510}">
      <Declaration><![CDATA[PROPERTY xMoverPathFree : BOOL]]></Declaration>
      <Get Name="Get" Id="{48ce9e58-a174-4804-944b-d3b0235f1954}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverPathFree := THIS^._fb_abl_1.xOUT_MoverFree OR THIS^._fb_abl_1.xOUT_Ready OR THIS^._fb_abl_1.xOUT_Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="xMoverShouldLeave" Id="{97a4c977-4d48-474e-8d38-73231615f1f2}">
      <Declaration><![CDATA[PROPERTY xMoverShouldLeave : BOOL]]></Declaration>
      <Get Name="Get" Id="{2040f511-ef63-4808-9c4b-0956653d64fb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[xMoverShouldLeave := THIS^._fb_abl_1.iOUT_Step = ST110_Pnp_e.SYNC_MOVER_LEAVE;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>