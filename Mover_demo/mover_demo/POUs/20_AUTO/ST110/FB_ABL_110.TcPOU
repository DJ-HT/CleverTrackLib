<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_110" Id="{de37258f-ffab-4124-a1ed-e35be9345f92}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_110
(****************************************************************************************)
(*	TITEL				RFID-Ring laden		    										*)
(*	Status				ungetestet                         								*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:	self-explained using enum													*)
(***********************************Revisionen*******************************************)
(*	see github blames																	*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    iProcessTimeMili1 : UDINT := 5000; // user defined station duration, in milisecond
    iProcessTimeMili2 : UDINT := 5000; // user defined station duration, in milisecond
    Mover             : REFERENCE TO FB_Mover;
    //xIN_MoverInPos  : BOOL;          // Set this flag when a mover is in position and ready to be handled
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;    // Error Flag 
    xOUT_Busy     : BOOL;    // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;    // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;    // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;    // Timeout FB 
    xOUT_InitDone : BOOL;    // initialisierung fertig
    xOUT_Wait     : BOOL;    // Wartet auf Bedingung
    iOUT_Step     : ST110_e; // Aktueller Schritt 
    sOUT_Step     : STRING;  // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;    // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion, express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move
    //xOUT_MoverNeeded : BOOL;   // A mover is needed by this station to continue its process
END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST110_e; // Merker letzter Schritt 
    iPreStep  : ST110_e; // Schritt zurück nach Alarm 
    iAktStep  : ST110_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)

    (* Spezial *)
    udiStartProcessTimeMili : UDINT; // start of the processing time, accurate at 100ns 

    udiWaitTimeBetweenStep : UDINT; // waiting time between 2 steps

    fb_axis110_01Y : FB_AxisLM_V1_1;
    fb_axis110_02Z : FB_AxisLIN_V1_1;
    fb_axis110_03Z : FB_AxisLIN_V1_1;

    fb_simu_axis110_01Y : FB_Simu_AxisLM_V1_1;

END_VAR
VAR CONSTANT
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST110_e.RESET;
    iOUT_Step := ST110_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)
fb_axis110_01Y(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons   := FALSE,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE, (*TODO*)
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST110_Axis.const110_01Y.POS_MIN,
               rIN_POSMAX       := ST110_Axis.const110_01Y.POS_MAX,
               rIN_VELOMAX      := ST110_Axis.const110_01Y.VELO_MAX,
               rIN_VELOMANU     := ST110_Axis.const110_01Y.VELO_MANU,
               rIN_VELOOPEN     := ST110_Axis.const110_01Y.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      :=,
               xIN_Relative     :=,
               rIN_Position     :=,
               rIN_Velocity     :=,
               rIN_Acceleration := PERS.recipeList[1].st110.ST110_01Y.rAccel,
               rIN_Deceleration := PERS.recipeList[1].st110.ST110_01Y.rDecel,
               rIN_Acceleration := PERS.recipeList[1].st110.ST110_01Y.rJerk,
               rIN_Deceleration :=,
               rIN_Jerk         :=,
               xIN_Reset        := xIN_Reset,
               axisIN_REF       := ST110_Axis.axis110_01Y.axis);

fb_simu_axis110_01Y(bIN_AxisCntr        := fb_axis110_01Y.bOUT_AxisCntr,
                    udiIN_HomingTime_ms := 2000,
                    wOUT_AxisState      => fb_axis110_01Y.wAxisState);

fb_axis110_02Z(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons   := FALSE,
               xIN_Quit         := xIN_Quit,
               axisIN_REF       := ST110_Axis.axis110_02Z.axis,
               xIN_AX5000       := FALSE,
               xIN_ENC_ABS      := TRUE, // TODO set accordingly
               xIN_PARAMok      := TRUE,
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST110_Axis.const110_02Z.POS_MIN,
               rIN_POSMAX       := ST110_Axis.const110_02Z.POS_MAX,
               rIN_VELOMAX      := ST110_Axis.const110_02Z.VELO_MAX,
               rIN_VELOMANU     := ST110_Axis.const110_02Z.VELO_MANU,
               rIN_VELOOPEN     := ST110_Axis.const110_02Z.POS_MAX / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               rIN_JogVelo      :=,
               xIN_HomeExe      :=,
               xIN_HomeCalib    :=,
               xIN_Execute      :=,
               xIN_Relative     :=,
               rIN_Position     :=,
               rIN_Velocity     :=, // always move at 100%
               rIN_Acceleration := PERS.recipeList[1].st110.ST110_02Z.rAccel,
               rIN_Deceleration := PERS.recipeList[1].st110.ST110_02Z.rDecel,
               rIN_Jerk         := PERS.recipeList[1].st110.ST110_02Z.rJerk,
               xIN_Reset        := xIN_Reset,

               // output
               xOUT_ErrFlag =>,
               xOUT_READY   =>,
               xOUT_DONE    =>,
               bOUT_Error   =>,
               rOUT_ActPos  =>);

fb_axis110_03Z(enIN_State       := enIN_State,
               parIN_Buttons    := ADR(AXIS.btTeachArAxis),
               xIN_DisButtons   := FALSE,
               xIN_Quit         := xIN_Quit,
               xIN_PARAMok      := TRUE, (*TODO*)
               xIN_FREE         := TRUE,
               xIN_FREE_HOME    := TRUE,
               rIN_POSMIN       := ST110_Axis.const110_03Z.POS_MIN,
               rIN_POSMAX       := ST110_Axis.const110_03Z.POS_MAX,
               rIN_VELOMAX      := ST110_Axis.const110_03Z.VELO_MAX,
               rIN_VELOMANU     := ST110_Axis.const110_03Z.VELO_MANU,
               rIN_VELOOPEN     := ST110_Axis.const110_03Z.VELO_MANU / 4,
               rIN_JogInc       := AXIS.rTeachIncAxis,
               xIN_Execute      :=,
               xIN_Relative     :=,
               rIN_Position     :=,
               rIN_Velocity     :=,
               rIN_Acceleration := PERS.recipeList[1].st110.ST110_03Z.rAccel,
               rIN_Deceleration := PERS.recipeList[1].st110.ST110_03Z.rDecel,
               rIN_Jerk         := PERS.recipeList[1].st110.ST110_03Z.rJerk,
               xIN_Reset        := xIN_Reset,
               axisIN_REF       := ST110_Axis.axis110_03Z.axis,
               xIN_AX5000       := FALSE,
               xIN_ENC_ABS      := TRUE); // TODO set accordingly

(*******************************************************************)
(* AXIS INPUTS *)
(*******************************************************************)
fb_axis110_01Y.xIN_Reset := ST110_e.RESET = iOUT_Step;
fb_axis110_02Z.xIN_Reset := ST110_e.RESET = iOUT_Step;
fb_axis110_03Z.xIN_Reset := ST110_e.RESET = iOUT_Step;

fb_axis110_01Y.xIN_Home := ST110_e.Init_HomeHorizontals = iOUT_Step;

IF NOT CONST.USE_SIMULATION THEN
    fb_axis110_02Z.xIN_HomeExe := ST110_e.Init_HomeVerticals = iOUT_Step;
    fb_axis110_03Z.xIN_HomeExe := ST110_e.Init_HomeVerticals = iOUT_Step;
END_IF

fb_axis110_01Y.xIN_Execute := ST110_e.Init_HorizontalsToTrack = iOUT_Step OR
                              ST110_e.PnP_Hor_ToRotTablePos = iOUT_Step OR
                              ST110_e.PnP_Hor_ToTrackPos = iOUT_Step;

fb_axis110_02Z.xIN_Execute := ST110_e.Init_VerticalsUp = iOUT_Step OR
                              PERS.recipeList[1].st110.xUseVerticalRight AND
                              (
                              ST110_e.PnP_Ver_RotTableDown = iOUT_Step OR
                              ST110_e.PnP_Ver_RotTableUp = iOUT_Step OR
                              ST110_e.PnP_Ver_ShuttleDown = iOUT_Step OR
                              ST110_e.PnP_Ver_ShuttleUp = iOUT_Step);

fb_axis110_03Z.xIN_Execute := ST110_e.Init_VerticalsUp = iOUT_Step OR
                              PERS.recipeList[1].st110.xUseVerticalRight AND
                              (
                              ST110_e.PnP_Ver_RotTableDown = iOUT_Step OR
                              ST110_e.PnP_Ver_RotTableUp = iOUT_Step OR
                              ST110_e.PnP_Ver_ShuttleDown = iOUT_Step OR
                              ST110_e.PnP_Ver_ShuttleUp = iOUT_Step);

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST110_e.READY) AND (iOUT_Step < ST110_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST110_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST110_e.READY);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST110_e.READY);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST110_e.DONE);

xOUT_MoverFree := iOUT_Step >= ST110_e.MOVER_FREE_OP AND iOUT_Step < ST110_e.MOVER_NEEDED_OP;

iOUT_ProcessCompletion := F_GetPercent_2(iAktStep,
                                         ST110_e.PnP_Hor_ToRotTablePos,
                                         ST110_e.PnP_Hor_ToTrackPos,
                                         ST110_e.PnP_Ver_ShuttleDown,
                                         ST110_e.PnP_Ver_ShuttleUp);

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST110_e.RESET;
    iOUT_Step := ST110_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST110_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST110_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST110_e.INIT;
    END_IF;

(***** INIT *****)
ST110_e.INIT: (* Grundstellung ? *)
    IF CONST.USE_SIMULATION THEN
        iOUT_Step := ST110_e.Init_VerticalsUp;
    ELSE
        iOUT_Step := ST110_e.Init_HomeVerticals;
    END_IF;

ST110_e.Init_HomeVerticals:
    IF fb_axis110_02Z.xOUT_DONE AND fb_axis110_03Z.xOUT_DONE THEN
        iOUT_Step := ST110_e.Init_VerticalsUp;
    END_IF

st110_e.Init_VerticalsUp:
    fb_axis110_02Z.rIN_Position := -5.0;
	fb_axis110_02Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_02Z.rVeloToGS;
    fb_axis110_03Z.rIN_Position := -5.0;
	fb_axis110_03Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_03Z.rVeloToGS;
	

    IF fb_axis110_02Z.xOUT_DONE AND fb_axis110_03Z.xOUT_DONE THEN
        IF fb_axis110_01Y.xOUT_READY OR fb_axis110_01Y.xOUT_HOMED THEN
            iOUT_Step := ST110_e.Init_HorizontalsToTrack;
        ELSE
            iOUT_Step := ST110_e.Init_HomeHorizontals;
        END_IF
    END_IF

ST110_e.Init_HomeHorizontals:
    IF fb_axis110_01Y.xOUT_HOMED THEN
        iOUT_Step := ST110_e.Init_HorizontalsToTrack;
    END_IF

st110_e.Init_HorizontalsToTrack:
    fb_axis110_01Y.rIN_Position := -5.0;

    IF fb_axis110_01Y.xOUT_DONE THEN
        iOUT_Step := ST110_e.READY;
    END_IF

(***** READY / INIT DONE *****)
ST110_e.READY:        (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST110_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST110_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step := ST110_e.PnP_Hor_ToRotTablePos;
    END_IF;

ST110_e.PnP_Hor_ToRotTablePos:
    fb_axis110_01Y.rIN_Position := PERS.recipeList[1].st110.ST110_01Y.rPosAS;
	fb_axis110_01Y.rIN_Velocity := PERS.recipeList[1].st110.ST110_01Y.rVeloToAS;
    IF xIN_NextStep AND fb_axis110_01Y.xOUT_DONE THEN
        iOUT_Step := ST110_e.PnP_Ver_RotTableDown;
    END_IF;

ST110_e.PnP_Ver_RotTableDown:
    fb_axis110_02Z.rIN_Position := PERS.recipeList[1].st110.ST110_02Z.rPosAS;
	fb_axis110_02Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_02Z.rVeloToAS;
    fb_axis110_03Z.rIN_Position := PERS.recipeList[1].st110.ST110_03Z.rPosAS;
	fb_axis110_03Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_03Z.rVeloToAS;
    IF xIN_NextStep AND
       (fb_axis110_02Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalLeft) AND
       (fb_axis110_03Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalRight) THEN
        iOUT_Step := ST110_e.Vacum_on;
    END_IF;

ST110_e.Vacum_on:
    IF xIN_NextStep THEN
        iOUT_Step := ST110_e.PnP_Ver_RotTableUp;
    END_IF;

ST110_e.PnP_Ver_RotTableUp:
    fb_axis110_02Z.rIN_Position := PERS.recipeList[1].st110.ST110_02Z.rPosGS;
	fb_axis110_02Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_02Z.rVeloToGS;
    fb_axis110_03Z.rIN_Position := PERS.recipeList[1].st110.ST110_03Z.rPosGS;
	fb_axis110_03Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_03Z.rVeloToGS;

    IF xIN_NextStep AND
       (fb_axis110_02Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalLeft) AND
       (fb_axis110_03Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalRight) THEN
        iOUT_Step := ST110_e.PnP_Hor_ToTrackPos;
    END_IF;

ST110_e.PnP_Hor_ToTrackPos:
    fb_axis110_01Y.rIN_Position := PERS.recipeList[1].st110.ST110_01Y.rPosGS;
    IF xIN_NextStep AND fb_axis110_01Y.xOUT_DONE THEN
        iOUT_Step := ST110_e.waitOnMover;
    END_IF;

ST110_e.waitOnMover: (*  *)
    IF xIN_NextStep AND __ISVALIDREF(Mover) THEN
        iOUT_Step := ST110_e.PnP_Ver_ShuttleDown;
    END_IF;

ST110_e.PnP_Ver_ShuttleDown:
    fb_axis110_02Z.rIN_Position := PERS.recipeList[1].st110.ST110_02Z.rPosAS;
	fb_axis110_02Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_02Z.rVeloToAS;
    fb_axis110_03Z.rIN_Position := PERS.recipeList[1].st110.ST110_03Z.rPosAS;
	fb_axis110_03Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_03Z.rVeloToAS;
    IF xIN_NextStep AND
       (fb_axis110_02Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalLeft) AND
       (fb_axis110_03Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalRight) THEN
        iOUT_Step              := ST110_e.PnP_Ver_ShuttleTorqueControl;
        udiWaitTimeBetweenStep := 500; // wait 500 ms to simulate the torque control phase
    END_IF;

// We need a fb that enables for us torque control. Here we just go a bit further
ST110_e.PnP_Ver_ShuttleTorqueControl:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step := ST110_e.Vacum_off;
    END_IF;

ST110_e.Vacum_off:
    IF xIN_NextStep THEN
        iOUT_Step := ST110_e.PnP_Ver_ShuttleUp;
    END_IF;

ST110_e.PnP_Ver_ShuttleUp:
    fb_axis110_02Z.rIN_Position := PERS.recipeList[1].st110.ST110_02Z.rPosGS;
	fb_axis110_02Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_02Z.rVeloToGS;
    fb_axis110_03Z.rIN_Position := PERS.recipeList[1].st110.ST110_03Z.rPosGS;
	fb_axis110_03Z.rIN_Velocity := PERS.recipeList[1].st110.ST110_03Z.rVeloToGS;
    IF xIN_NextStep AND
       (fb_axis110_02Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalLeft) AND
       (fb_axis110_03Z.xOUT_DONE OR NOT PERS.recipeList[1].st110.xUseVerticalRight) THEN
        iOUT_Step := ST110_e.SYNC_MOVER_LEAVE;
    END_IF;

ST110_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST110_e.DONE;
    END_IF

(***** DONE *****)
ST110_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST110_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST110_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST110_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST110_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>