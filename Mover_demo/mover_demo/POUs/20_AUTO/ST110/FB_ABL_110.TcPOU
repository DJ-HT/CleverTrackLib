<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ABL_110" Id="{de37258f-ffab-4124-a1ed-e35be9345f92}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ABL_110
(****************************************************************************************)
(*	TITEL				Bezeichnung Ablauf	    										*)
(*	Status				ungetestet                         								*)
(*  Version:			1.0																*)
(*	Beschrieb:			Ablaufbeschreibung												*)
(*																						*)
(*	Steps:																				*)
(*		RESET:=0		Reset der Station												*)
(* 		INIT:=100		Initialisieren													*)
(*		... 			...																*)
(*		READY:=999		Initialisiert, Bereit für Start									*)
(*		START:=1000		Start Zyklisch 													*)
(*		... 			...																*)
(*		DONE:=8000		Letzer Schritt													*)
(*		ERROR:=9000		ALARM/Fehler													*)
(* 	09.09.2019/Dj																		*)
(***********************************Revisionen*******************************************)
(*	dd.mm.yyyy   KZ    x.y			Beschrieb											*)
(****************************************************************************************)

VAR_INPUT
    xIN_Reset       : BOOL;          // Schrittkette zurücksetzen 
    xIN_Init        : BOOL;          // Initialisieren
    xIN_Quit        : BOOL;          // Fehler quittieren 
    xIN_Start       : BOOL;          // Startbefehl
    xIN_Sperre      : BOOL;          // FB Sperren 
    xIN_NextStep    : BOOL;          // Nächsten Schritt ausführen 
    xIN_AlarmAktiv  : BOOL;          // Anlage hat Alarm
    xIN_DryCycle    : BOOL;          // Fahren ohne Teile
    xIN_RestartCYCL : BOOL;          // Zyklus erneut starten im STEP, END, LEERFAHREN
    enIN_State      : enState;       // Status Anlage
    tIN_Timeout     : TIME := T#10s; // Timout

    pxFG_Freigabe : POINTER TO BOOL; //Freigabe von Station

    // Application specific
    iProcessTimeMili1 : UDINT := 5000; // user defined station duration, in milisecond
    iProcessTimeMili2 : UDINT := 5000; // user defined station duration, in milisecond
    Mover             : REFERENCE TO FB_Mover;
    //xIN_MoverInPos  : BOOL;          // Set this flag when a mover is in position and ready to be handled
END_VAR
VAR_OUTPUT
    (* standart Ausgänge *)
    xOUT_ErrFlag  : BOOL;   // Error Flag 
    xOUT_Busy     : BOOL;   // Baustein befindet sich im Ablauf 
    xOUT_Done     : BOOL;   // Baustein hat den Ablauf beendet 		
    xOUT_Ready    : BOOL;   // Ready to begin, should be the same state as done	
    xOUT_Timeout  : BOOL;   // Timeout FB 
    xOUT_InitDone : BOOL;   // initialisierung fertig
    xOUT_Wait     : BOOL;   // Wartet auf Bedingung
    iOUT_Step     : ST110_e;    // Aktueller Schritt 
    sOUT_Step     : STRING; // Aktueller Schritt but in string format
    bOUT_Error    : BYTE;   // Fehlernummer

    iOUT_ProcessCompletion : INT;  //process completion, express in % (0-100)
    xOUT_MoverFree         : BOOL; // The mover is free to move
    //xOUT_MoverNeeded : BOOL;   // A mover is needed by this station to continue its process
END_VAR
VAR
    (* Standard *)
    (* Schritt *)
    iLastStep : ST110_e; // Merker letzter Schritt 
    iPreStep  : ST110_e; // Schritt zurück nach Alarm 
    iAktStep  : ST110_e; // aktueller Schritt

    // Trigger Starten 
    rtSTART : R_TRIG;
    // Timer TimeOut 
    TON_Timeout : TON;

    (* Bausteine *)

    (* Spezial *)
    udiStartProcessTimeMili : UDINT; // start of the processing time, accurate at 100ns 

    udiWaitTimeBetweenStep : UDINT; // waiting time between 2 steps

END_VAR
VAR CONSTANT
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*******************************************************************)
(* Trigger  *)
(*******************************************************************)
(* Zurücksetzen *)
IF xIN_RESET THEN
    iPreStep  := ST110_e.RESET;
    iOUT_Step := ST110_e.RESET;
END_IF;

(* Error Quittieren *)
IF (bOUT_Error <> 0) AND xIN_Quit THEN
    xOUT_ErrFlag := FALSE;
    bOUT_Error   := 0;
    iOUT_Step    := iPreStep;
END_IF;

(*******************************************************************)
(* Timer *)
(*******************************************************************)
TON_Timeout(IN := xIN_NextStep AND (iLastStep = iOUT_Step) (*todo FG *) ,
            PT := tIN_Timeout);

(*******************************************************************)
(* Bausteine *)
(*******************************************************************)

(*******************************************************************)
(* OUTPUTS *)
(*******************************************************************)
// Error Flag 
xOUT_ErrFlag := (bOUT_Error <> 0);
// Baustein befindet sich im Ablauf 
xOUT_Busy := (iOUT_Step > ST110_e.READY) AND (iOUT_Step < ST110_e.DONE);
// Baustein hat den Ablauf beendet
xOUT_Done := (iOUT_Step = ST110_e.DONE);
// Process ready
xOUT_Ready := (iOUT_Step = ST110_e.READY);
// Timeout FB 				 		
xOUT_Timeout := TON_Timeout.Q;
// Itialisierung fertig			
xOUT_InitDone := (iOUT_Step = ST110_e.READY);
// Aktueller Schritt			
iOUT_Step := iOUT_Step; //Im Ablauf gesetzt		
sOUT_Step := TO_STRING(iOUT_Step);
//Fehlernummer	 
bOUT_Error := bOUT_Error; //Im Ablauf/FB gesetzt	
(* Warte (alle Schritte wo auf FG oder Teile gewartet wird) *)
xOUT_Wait := (iOUT_Step = ST110_e.DONE);

xOUT_MoverFree := iOUT_Step >= ST110_e.MOVER_FREE_OP AND iOUT_Step < ST110_e.MOVER_NEEDED_OP;

iOUT_ProcessCompletion := F_GetPercent_2(iAktStep,
                                       ST110_e.PnP_Hor_ToRotTablePos,
                                       ST110_e.PnP_Hor_ToTrackPos,
                                       ST110_e.PnP_Ver_ShuttleDown,
                                       ST110_e.PnP_Ver_ShuttleUp);

(*******************************************************************)
(* Ablauf *)
(*******************************************************************)

(* Sperren *)
IF xIN_Sperre THEN
    iPreStep  := ST110_e.RESET;
    iOUT_Step := ST110_e.RESET;
    RETURN;
END_IF;

(* Schritt Merker *)
IF iAktStep <> iOUT_Step THEN
    iLastStep := iAktStep;
    iAktStep  := iOUT_Step;
END_IF

(* START *)
rtSTART(CLK := xIN_Start);

(*******************************************************************)
(* Schrittkette  *)
(*******************************************************************)
CASE iOUT_Step OF

(***** RESET *****)
ST110_e.RESET: (* Schritt 0-99 *)
    //Initialisierungen
    //Start Init Ablauf
    IF xIN_Init THEN
        iOUT_Step := ST110_e.INIT;
        //Start Manu Ablauf
    ELSIF enIN_State = StateMANU AND xIN_NextStep THEN
        iOUT_Step := ST110_e.INIT;
    END_IF;

(***** INIT *****)
ST110_e.INIT: (* Grundstellung ? *)
    IF TRUE THEN
        iOUT_Step := ST110_e.READY;
    ELSE
        iOUT_Step := ST110_e.INIT;
    END_IF;

(***** READY / INIT DONE *****)
ST110_e.READY:        (* Start AUTO,END,LEER,STEP *)
    IF xIN_Start THEN //IF rtSTART.Q THEN
        iOUT_Step := ST110_e.START;
    END_IF

(***** START  ZYKLISCH *****)
ST110_e.START: (*  *)
    IF xIN_NextStep AND pxFG_Freigabe^ THEN
        iOUT_Step               := ST110_e.PnP_Hor_ToRotTablePos;
        udiStartProcessTimeMili := GetTick();
        udiWaitTimeBetweenStep  := 500;
    END_IF;

ST110_e.PnP_Hor_ToRotTablePos:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.PnP_Ver_RotTableDown;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 500;
    END_IF;

//110.02Z	P+P handl. vertic.
ST110_e.PnP_Ver_RotTableDown:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.Vacum_on;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 200;
    END_IF;

ST110_e.Vacum_on:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.PnP_Ver_RotTableUp;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 500;
    END_IF;

//110.03Z	P+P handl. vertic.
ST110_e.PnP_Ver_RotTableUp:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.PnP_Hor_ToTrackPos;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 500;
    END_IF;

//110.01Y	P+P handl. horiz.
ST110_e.PnP_Hor_ToTrackPos:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.waitOnMover;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep;
    END_IF;

ST110_e.waitOnMover: (*  *)
    IF xIN_NextStep AND __ISVALIDREF(Mover) THEN
        udiStartProcessTimeMili := GetTick();
        iOUT_Step               := ST110_e.PnP_Ver_ShuttleDown;
        udiWaitTimeBetweenStep  := 400;
    END_IF;

//110.02Z	P+P handl. vertic.
//110.03Z	P+P handl. vertic.
ST110_e.PnP_Ver_ShuttleDown:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.PnP_Ver_ShuttleTorqueControl;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 400;
    END_IF;

//110,55	Force Controll
//110,56	Force Controll
ST110_e.PnP_Ver_ShuttleTorqueControl:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.Vacum_off;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 200;
    END_IF;

//110,05	Vacuum gripper
//110,06	Vacuum gripper
ST110_e.Vacum_off:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.PnP_Ver_ShuttleUp;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 500;
    END_IF;

//110.02Z	P+P handl. vertic.
//110.03Z	P+P handl. vertic.
ST110_e.PnP_Ver_ShuttleUp:
    IF xIN_NextStep AND (GetTick() - udiStartProcessTimeMili) >= (udiWaitTimeBetweenStep) THEN
        iOUT_Step              := ST110_e.SYNC_MOVER_LEAVE;
        udiWaitTimeBetweenStep := udiWaitTimeBetweenStep + 500;
    END_IF;

ST110_e.SYNC_MOVER_LEAVE:
    // The mover needs to be taken by MoverMan
    IF NOT __ISVALIDREF(Mover) THEN
        iOUT_Step := ST110_e.DONE;
    END_IF

(***** DONE *****)
ST110_e.DONE: (* Letzter Schritt  *)
    IF NOT xIN_AlarmAktiv THEN
        //AUTO
        IF (enIN_State = StateAUTO) AND xIN_RestartCYCL THEN
            iOUT_Step := ST110_e.START;
            //STEP / END / LEERFAHREN restart
        ELSIF (enIN_State < StateAUTO) AND (enIN_State >= enState.StateSTEP) AND xIN_RestartCYCL THEN
            iOUT_Step := ST110_e.START;
            //STEP / END / LEERFAHREN fertig
        ELSIF (enIN_State = StateREADY) THEN
            iOUT_Step := ST110_e.READY;
        END_IF;
    END_IF;

(************ ERROR *************)
ST110_e.ERROR: (* ERROR *) ;

END_CASE;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>